"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('netconfig/adapters/application', ['exports', 'ember', 'netconfig/utils/ajax'], function (exports, _ember, _netconfigUtilsAjax) {
  exports['default'] = _ember['default'].Object.extend({

    /**
      returns url for the resource request
    */
    buildURL: function buildURL(ModelClass, id) {
      var resourceUrl = ModelClass.proto().resourceUrl;

      if (id) {
        resourceUrl += '/' + id; //No I18N
      }
      return resourceUrl;
    },

    /**
     called as ModelClass.patch();
      ```
       Contact.patch({
         op: 'active',
         type: 'POST',
         data: {
           contact_ids: '2000000000836,2000000000837'
         }
       })
     ```
    */
    patch: function patch(ModelClass, operation) {
      var url = this.buildURL(ModelClass);
      if (operation.op) {
        url += '/' + operation.op;
        delete operation.op;
      }
      var params = {
        type: 'POST', //No I18N
        dataType: 'json' //No I18N
      };

      _ember['default'].merge(params, operation);

      return this.ajax(url, params);
    },

    /**
      returns a deserialized model instance with id passed
    */
    findByID: function findByID(ModelClass, id, data) {

      var url = this.buildURL(ModelClass, id);

      return this.ajax(url, { data: data }).then(function (json) {
        return ModelClass.create().deserialize(json);
      });
    },

    /**
      returns an array of model deserialized instances
    */
    findAll: function findAll(ModelClass, data) {

      var resourceUrl = this.buildURL(ModelClass);
      var self = this;
      return this.ajax(resourceUrl, { data: data }).then(function (json) {
        ModelClass.injectDependencies(json);
        return self.deserializeMany(ModelClass, json);
      });
    },

    /**
      input - raw json payload
      returns array of model instances
    */
    deserializeMany: function deserializeMany(ModelClass, json) {
      if (!ModelClass.responsePath) {
        throw new _ember['default'].Error("Please define `responsePath` on Model. eg. Contact.responsePath = 'contacts'. This is required to deserialize JSON payload"); //No I18N
      }
      var responseArray = _ember['default'].A(_ember['default'].get(json, ModelClass.responsePath));
      var finalArray = _ember['default'].A();
      // var self = this;
      responseArray.forEach(function (resource) {
        finalArray.pushObject(ModelClass.create().deserialize(resource));
      });

      return finalArray;
    },

    ajax: _netconfigUtilsAjax['default']
  });
});
/*$Id$*/
define('netconfig/app', ['exports', 'ember', 'netconfig/resolver', 'ember-load-initializers', 'netconfig/config/environment', 'netconfig/keymaster-ext'], function (exports, _ember, _netconfigResolver, _emberLoadInitializers, _netconfigConfigEnvironment, _netconfigKeymasterExt) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _netconfigConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _netconfigConfigEnvironment['default'].podModulePrefix,
    Resolver: _netconfigResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _netconfigConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('netconfig/blueprints/ember-chosen', ['exports', 'ember-chosen/blueprints/ember-chosen'], function (exports, _emberChosenBlueprintsEmberChosen) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberChosenBlueprintsEmberChosen['default'];
    }
  });
});
define('netconfig/components/alarm-widget', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    didRender: function didRender() {
      $('.ui-resizable-handle').remove();
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/bs-primary', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'button',
    classNameBindings: [':btn', 'isPrim:btn-primary:btn-default'],
    attributeBindings: ["disabled", "type"],
    isLoading: false,
    disabledWhen: false,
    isPrim: true,
    btn_name: 'Save',
    action: 'saveRecord',
    type: (function () {
      return this.get('isPrim') ? "submit" : "button";
    }).property('isPrim'),

    //Disable save button for both empty and saving state.
    disabled: (function () {
      return this.get('isLoading') || this.get('disabledWhen');
    }).property('isLoading', 'disabledWhen'),

    click: function click() {
      this.sendAction('action', this.get('params'));
      return false;
    }
  });
});
define('netconfig/components/client-add', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Component.extend({
        isEdit: false,
        routeData: [],
        content: null,
        isShowPort: true,
        isTargetBand: true,
        isShowSession: false,
        store: _ember['default'].inject.service('store'),
        initialize: (function () {
            this._super.apply(this, arguments);
            this.send('doEditStuff');
        }).on('didInsertElement'),
        actions: {
            doEditStuff: function doEditStuff() {
                var data = this.get('content');
                data = data.client_details;

                if (this.get('isEdit')) {
                    $('select[name="client_address"] option[value="' + data.client_address + '"]').prop('selected', true);
                    $('select[name="client_address"]').attr('disabled', true);
                    $('select[name="protocol"] option[value="' + data.protocol + '"]').prop('selected', true);
                    $('select[name="server_address"] option[value="' + data.server_address + '"]').prop('selected', true);
                    $('input[name="isp"]').val(data.isp);
                    this.send('protocolchanged');
                    this.send('clientchanged');

                    _ember['default'].run.next(function () {
                        $('input[name="noOfSessions"]').val(data.noOfSessions);
                        $('input[name="targetBandwidth"]').val(data.targetBandwidth);
                    });

                    $('select[name="client_address"]').trigger('chosen:updated');
                    $('select[name="protocol"]').trigger('chosen:updated');
                    $('select[name="server_address"]').trigger('chosen:updated');
                } else {
                    this.send('clientchanged');
                }
            },
            protocolchanged: function protocolchanged() {
                var proto = $('select[name="protocol"]').val();
                if (proto === 'tcp') {
                    this.setProperties({ 'isTargetBand': false, 'isShowSession': true });
                } else if (proto === 'udp') {
                    this.setProperties({ 'isTargetBand': true, 'isShowSession': false });
                } else {
                    this.setProperties({ 'isTargetBand': true, 'isShowSession': true });
                }
            },
            clientchanged: function clientchanged() {
                console.log($('select[name="client_address"]').val());
                $('select[name="server_address"] option').attr('disabled', false);
                $('select[name="server_address"] option[value="' + $('select[name="client_address"]').val() + '"]').attr('disabled', true);
                $('select[name="server_address"] option[value!="' + $('select[name="client_address"]').val() + '"]').eq(0).prop('selected', true);
                $('select[name="server_address"]').trigger('chosen:updated');
            },
            addbandwidth: function addbandwidth() {

                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="addbandwidth"]'))) {
                    return false;
                } //No I18N

                var data = {
                    client_address: $('select[name="client_address"]').val(),
                    protocol: $('select[name="protocol"]').val(),
                    server_address: $('select[name="server_address"]').val(),
                    noOfSessions: $('input[name="noOfSessions"]').val(),
                    status: 1,
                    targetBandwidth: $('input[name="targetBandwidth"]').val(),
                    isp: $('input[name="isp"]').val(),
                    updated_time: new Date().getTime()
                },
                    self = this;

                this.set('isSaving', true);
                if (this.get('isEdit')) {
                    this.get('store').put('networkmon/client/', data).then(function (res) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Client updated successfully');
                        self.get('router').transitionTo('bandwidth/clients');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update client');
                        console.log(err);
                    });
                } else {
                    this.get('store').post('networkmon/client/', data).then(function (res) {
                        self.set('isSaving', false);
                        if (res.data.message === 'SUCCESS') {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Client added successfully');
                            self.get('router').transitionTo('bandwidth/clients');
                        } else {
                            (0, _netconfigUtilsNotify.customNotify)('error', res.data.message);
                        }
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update client');
                        console.log(err);
                    });
                }
                return false;
            }
        }
    });
});
define('netconfig/components/commit-widget', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },
    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },
    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },
    didRender: function didRender() {
      $('.ui-resizable-handle').remove();
    },
    widgetUpdate: function widgetUpdate() {
      $('.ui-resizable-handle').remove();
      var self = this;
      this.get('store').getJSON('commit_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },
    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/commit.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/comp-po', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Component.extend({

        showInfo: false,
        psInfo: null,
        store: _ember['default'].inject.service('store'),

        actions: {

            exp: function exp(param1) {
                if (param1.show) {
                    _ember['default'].set(param1, "show", false);
                } else {
                    _ember['default'].set(param1, "show", true);
                }
            },

            edit: function edit(param1) {
                console.log(param1);
                if (param1.edit) {
                    _ember['default'].set(param1, "edit", false);
                } else {
                    _ember['default'].set(param1, "edit", true);
                }
            },

            update: function update(param1, param2) {

                var self = this;
                var value = $("input[name='" + param1.name + "-" + param2.name + "']").val();
                var data = {
                    name: param1.name,
                    termname: param2.name,
                    value: value,
                    host: this.get("cntr").get("rval")
                };

                this.get('store').post('policyops/', data).then(function (res) {
                    self.send("edit", param2);
                    console.log("param2", param2);
                    _ember['default'].set(param2.then["local-preference"], "local-preference", value);
                    console.log(param2);
                    delete param2.info;
                    _ember['default'].set(param2, "info", JSON.stringify(param2, undefined, 4));
                    console.log("check0");
                    (0, _netconfigUtilsNotify.customNotify)('success', 'Updated');
                }, function (err) {
                    (0, _netconfigUtilsNotify.customNotify)('error', 'Not Updated' + err.errors);
                    self.get('confCtrl').send("disconnect");
                });
            },

            cancel: function cancel(param1) {
                this.set("lpedit", false);
            },

            showDetail: function showDetail(param1) {
                if (this.get("showInfo")) {
                    this.set("showInfo", false);
                } else {
                    this.set("psInfo", JSON.stringify(param1, undefined, 4));
                    this.set("showInfo", true);
                }
            },

            showTerm: function showTerm(param1) {
                if (param1.show) {
                    _ember['default'].set(param1, "show", false);
                } else {
                    _ember['default'].set(param1, "show", true);
                }
            }
        }
    });
});
define('netconfig/components/con-mon-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Con_mon.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#conmonbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/cpu-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Con_mon.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            pivot.val(item["pivot"]);
          }
        }
      }
    },
    didRender: function didRender() {
      var self = this;
      $('#cpubtn').on("click", function (event) {
        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];

        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName) }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``
        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{

        //     var start = fromTime_
        //     var end = toTime_
        //     var panel = paramGraph['#cpuFrame']

        //     var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //     $('#cpuFrame').attr("src",finalUrl)
        //     }
        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/cur-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Cur.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#currbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/device-category-widget', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        polling: null,
        store: _ember['default'].inject.service('store'),
        didInsertElement: function didInsertElement() {
            this.widgetUpdate();
        },

        willDestroyElement: function willDestroyElement() {
            this.stopPolling();
        },

        startPolling: function startPolling() {
            var self = this;
            var polling = _ember['default'].run.later(function () {
                self.widgetUpdate();
            }, 1000 * 60 * 1);
            this.set("polling", polling);
        },
        didRender: function didRender() {
            $('.ui-resizable-handle').remove();
        },
        stopPolling: function stopPolling() {
            var poll = this.get('polling');
            _ember['default'].run.cancel(poll);
        },

        widgetUpdate: function widgetUpdate() {
            var self = this;
            this.get('store').getJSON('devicecategory_widget/').then(function (res) {
                var piedata = {
                    "legend": {
                        "colors": ["#69bffc", "#a48ad4", "#aec785", "#ffd700"],
                        "vAlign": "center",
                        "hAlign": "center",
                        "colorBox": {
                            "shape": "circle"
                        },
                        "fontSize": 15,
                        "fontWeight": "bolder",
                        "useChartEffect": false
                    },
                    "chart": {
                        "plot": {
                            "plotoptions": {
                                "pie": {
                                    "innerRadius": "60%",
                                    "startAngle": -3.14,
                                    "endAngle": 3.14,
                                    "strokeColor": "transparent",
                                    "datalabels": {
                                        "innerLabel": {
                                            "show": true,
                                            "fontColor": "black",
                                            "fontSize": 15,
                                            "showAs": "y",
                                            "fontWeight": "bold"
                                        }
                                    },
                                    "gradients": {
                                        "type": "radial",
                                        "options": {
                                            "radial": {
                                                "radius": 100,
                                                "stopOffset": ["60%", "70%", "71%", "100%"],
                                                "colorGamma": [0.25, 0.25, 0, 0]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "effects": {
                            "options": {
                                "dropShadow": {
                                    "dx": 4,
                                    "dy": 4,
                                    "blur": 2,
                                    "color": "#6B6767"
                                }
                            },
                            "choice": "dropShadow"
                        }
                    },
                    "metadata": {
                        "axes": { "x": [0], "y": [[1]], "tooltip": ["<div style='text-align:center;'><span style='font-size:16px;'>{{val(0)}}</span><br>{{col(1)}} : {{val(1)}}</div>"] },
                        "columns": [{
                            "dataindex": 0,
                            "columnname": "Device category",
                            "datatype": "ordinal"
                        }, {
                            "dataindex": 1,
                            "columnname": "Device count",
                            "datatype": "numeric"
                        }]
                    },
                    "notes": {
                        "enabled": true,
                        "type": "customNote",
                        "chartValues": [{
                            "x": function x(chartObj, conf, ele) {
                                var bound = ele.getBoundingClientRect();
                                return chartObj.plotarea.left + chartObj.plotarea.width / 2 - bound.width / 2;
                            },
                            "y": function y(chartObj, conf, ele) {
                                var bound = ele.getBoundingClientRect();
                                return chartObj.plotarea.top + chartObj.plotarea.height / 2 - bound.height / 2;
                            },
                            "htmlEl": function htmlEl(chartObj, conf) {
                                var d = chartObj.seriesdata[0].data[0],
                                    dataset = chartObj.dataset,
                                    ycol = chartObj.systemConf.metadata.axes.y[0][0],
                                    col = chartObj.systemConf.metadata.columns[ycol],
                                    description = conf.description || "Total sales";
                                var total = d.reduce(function (prev, cur, i) {
                                    return prev + (cur.disabled ? 0 : Math.abs(dataset.getY(cur, 0)));
                                }, 0);
                                total = $ZC.getFormattedValue(col[col.datatype], total, col.datatype);
                                return "<div style='text-align: center;'><span style='font-size:22px;'>" + total + "</span></br><span style='font-size:14px;'>" + description + "</span></div>";
                            },
                            "description": "All Devices"
                        }],
                        //"id": "chartcustomAnnotationXcustomAnnotationY"
                        "options": { "customNote": { "fontWeight": "bold" } }
                    },
                    "seriesdata": {
                        "chartdata": [{
                            "type": "pie",
                            "data": []
                        }]
                    },
                    "canvas": {
                        "title": { "show": false },
                        "border": { "show": false },
                        "shadow": { "show": false },
                        "subtitle": { "show": false }
                    },
                    "tooltip": {
                        "backgroundColor": "#FFFFFF",
                        "fontColor": "#333333",
                        "shadow": "2px 2px 2px rgba(0,0,0,0.3)",
                        "opacity": 1,
                        "fontSize": 15
                    },
                    "placeholder": ".category_chart"
                };
                var pievalues = [];
                for (var key in res) {
                    if (res.hasOwnProperty(key)) {
                        pievalues.push([key, res[key]]);
                    }
                }
                piedata.seriesdata.chartdata[0].data = [pievalues];
                //console.log("Final pie chart data:",  JSON.stringify(piedata))
                new $ZC.charts($(piedata.placeholder)[0], piedata);
                self.startPolling();
            }, function (err) {
                console.log(err);
            });
        }
    });
});
define('netconfig/components/device-status-widget', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        polling: null,
        store: _ember['default'].inject.service('store'),
        didInsertElement: function didInsertElement() {
            this.widgetUpdate();
        },

        willDestroyElement: function willDestroyElement() {
            this.stopPolling();
        },

        startPolling: function startPolling() {
            var self = this;
            var polling = _ember['default'].run.later(function () {
                self.widgetUpdate();
            }, 1000 * 60 * 1);
            this.set("polling", polling);
        },
        didRender: function didRender() {
            $('.ui-resizable-handle').remove();
        },
        stopPolling: function stopPolling() {
            var poll = this.get('polling');
            _ember['default'].run.cancel(poll);
        },

        widgetUpdate: function widgetUpdate() {
            var self = this;
            this.get('store').getJSON('devicestatus_widget/').then(function (res) {
                var colorsArr = ["#69bffc", "#a48ad4", "#aec785", "#ffd700"]; // No I18N
                var piedata = {
                    "seriesdata": {
                        "chartdata": []
                    },
                    "metadata": {
                        "axes": { "x": [0], "y": [[1]], "clr": [2], "tooltip": [0, 1, 2] },
                        "columns": [{
                            "dataindex": 0,
                            "columnname": "Device Status",
                            "datatype": "ordinal"
                        }, {
                            "dataindex": 1,
                            "columnname": "Number of Devices",
                            "datatype": "numeric",
                            "numeric": {
                                "subfunction": "integer",
                                "format": { "decimalPlaces": "0" }
                            }
                        }, {
                            "columnname": "Device Category"
                        }]
                    },
                    "chart": {
                        "axes": {
                            "rotated": false,
                            "xaxis": {
                                "categories": ["OK", "NOT OK", "STOPPED"],
                                "label": { "text": "Device Status" },
                                "ticklabel": {
                                    "alignMode": "rotate",
                                    "showAs": function showAs(data, options, columnInfo, chartObj) {
                                        return data == "OK" ? "<tspan style='fill:rgb(0, 128, 43);font-weight: bold'>" + data + "</tspan>" : "<tspan style='fill:rgb(255, 0, 0);font-weight:bold'>" + data + "</tspan>";
                                    }
                                }
                            },
                            "yaxis": [{ "label": { "text": "Number of Devices" } }]
                        },
                        "plot": {
                            "plotoptions": {
                                "bar": {
                                    "maxBandWidth": 75,
                                    "outerPadding": 0.15
                                }
                            }
                        },
                        "fontSize": 25,
                        "fontWeight": "bolder",
                        "effects": {
                            "options": {
                                "dropShadow": {
                                    "dx": 4,
                                    "dy": 4,
                                    "blur": 2,
                                    "color": "#6B6767"
                                }
                            },
                            "choice": "dropShadow"
                        }
                    },
                    "legend": {
                        "colorPallete": {
                            "options": {
                                "multicolor": "data_colours"
                            }
                        },
                        "fontSize": 15,
                        "fontWeight": "bolder",
                        "useChartEffect": false
                    },
                    "canvas": {
                        "title": { "show": false },
                        "border": { "show": false },
                        "shadow": { "show": false },
                        "subtitle": { "show": false }
                    },
                    "tooltip": {
                        "backgroundColor": "#FFFFFF",
                        "fontColor": "#333333",
                        "fontSize": 13,
                        "shadow": "2px 2px 2px rgba(0,0,0,0.3)",
                        "opacity": 1
                    },
                    "placeholder": ".status_chart"
                };
                var pievalues = [];
                var status = ["OK", "NOT OK", "STOPPED"];
                for (var category in res) {
                    var devData = [];
                    var statData = { "type": 10, "seriesname": category, "data": [] };
                    for (var i = 0; i < status.length; i++) {
                        devData.push([status[i], res[category][status[i]]]);
                    }
                    statData.data = [devData];
                    pievalues.push(statData);
                }
                piedata.seriesdata.chartdata = pievalues;
                //console.log("Final bar chart data:",  JSON.stringify(piedata))
                $ZC.setLegendColorPallete("data_colours", colorsArr); // No I18N
                new $ZC.charts($(piedata.placeholder)[0], piedata);
                self.startPolling();
            }, function (err) {
                console.log(err);
            });
        }
    });
});
define("netconfig/components/double-clickable", ["exports"], function (exports) {
  exports["default"] = Ember.Component.extend({
    doubleClick: function doubleClick() {
      //alert("DoubleClickableComponent was clicked!");
    }
  });
});
define('netconfig/components/drag-drop-zone', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['draggable-dropzone'],
    classNameBindings: ['dragClass'],
    dragClass: 'deactivated',
    dragLeave: function dragLeave(event) {
      event.preventDefault();
      return this.set('dragClass', 'deactivated');
    },
    dragOver: function dragOver(event) {
      event.preventDefault();
      return this.set('dragClass', 'activated');
    },
    drop: function drop(event) {
      var data;
      this.set('dragClass', 'deactivated');
      data = event.dataTransfer.getData('text/data');
      event.target.appendChild(document.getElementById(data));
    }

  });
});
define('netconfig/components/drag-drop', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'img',
        classNames: ['draggable-item'],
        attributeBindings: ['draggable', 'src'],
        draggable: 'true',
        src: 'http://www.programwitherik.com/content/images/2015/02/eriksmall3-1.png ',
        dragStart: function dragStart(event) {
            event.dataTransfer.setData('text/data', event.target.id);
        }
    });
});
define('netconfig/components/ember-chosen', ['exports', 'ember', 'ember-chosen/components/ember-chosen'], function (exports, _ember, _emberChosenComponentsEmberChosen) {
    exports['default'] = _emberChosenComponentsEmberChosen['default'].extend({
        name: '',
        'class': ''
    });
});
define('netconfig/components/fa-icon', ['exports', 'ember-font-awesome/components/fa-icon'], function (exports, _emberFontAwesomeComponentsFaIcon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFontAwesomeComponentsFaIcon['default'];
    }
  });
});
define('netconfig/components/fa-list', ['exports', 'ember-font-awesome/components/fa-list'], function (exports, _emberFontAwesomeComponentsFaList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFontAwesomeComponentsFaList['default'];
    }
  });
});
define('netconfig/components/fa-stack', ['exports', 'ember-font-awesome/components/fa-stack'], function (exports, _emberFontAwesomeComponentsFaStack) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFontAwesomeComponentsFaStack['default'];
    }
  });
});
define('netconfig/components/fan-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Fan.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#fanbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/grid-stack-item', ['exports', 'ember-gridstack/components/grid-stack-item'], function (exports, _emberGridstackComponentsGridStackItem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberGridstackComponentsGridStackItem['default'];
    }
  });
});
define('netconfig/components/grid-stack', ['exports', 'ember-gridstack/components/grid-stack'], function (exports, _emberGridstackComponentsGridStack) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberGridstackComponentsGridStack['default'];
    }
  });
});
define('netconfig/components/hover-act', ['exports'], function (exports) {
  exports['default'] = Ember.Component.extend({
    action: 'showPrefix',
    leaveAction: 'hidePrefix',
    mouseEnter: function mouseEnter(event) {
      this.sendAction('action', this.get('params'), event);
      return false;
    },
    mouseLeave: function mouseLeave() {
      this.sendAction('leaveAction', this.get('params'));
      return false;
    }
  });
});
define('netconfig/components/infinite-scroll', ['exports', 'ember'], function (exports, _ember) {

  var $window = _ember['default'].$(window),
      $document = _ember['default'].$(document),
      bind = _ember['default'].run.bind;

  var EPSILON = 150;

  exports['default'] = _ember['default'].Component.extend({
    action: 'fetchMore',
    isFetching: false,
    epsilon: EPSILON,
    hasMore: null,
    content: null,
    scrollable: null,
    $scrollable: null,
    setup: (function () {
      var scrollable = this.get('scrollable'),
          $scrollable = scrollable ? _ember['default'].$(scrollable) : $window;
      this.set('$scrollable', $scrollable);
      $scrollable.on('scroll.' + this.elementId, bind(this, this.didScroll));
    }).on('didInsertElement'),
    teardown: (function () {
      this.get('$scrollable').off('scroll.' + this.elementId);
    }).on('willDestroyElement'),
    didScroll: function didScroll() {
      if (!this.get('isFetching') && this.get('hasMore') && this.isNearBottom()) {
        this.safeSet('isFetching', true);
        this.sendAction('action', bind(this, this.handleFetch));
      }
    },
    handleFetch: function handleFetch(promise) {
      var success = bind(this, this.fetchDidSucceed),
          failure = bind(this, this.fetchDidFail);

      promise.then(success, failure);
    },
    fetchDidSucceed: function fetchDidSucceed(response) {
      var content = this.get('content'),
          newContent = _ember['default'].getWithDefault(response, 'content', response);

      this.safeSet('isFetching', false);
      if (content) {
        content.pushObjects(newContent);
      }
    },
    fetchDidFail: function fetchDidFail() {
      this.safeSet('isFetching', false);
    },
    isNearBottom: function isNearBottom() {
      var $scrollable = this.get('$scrollable'),
          viewPortTop,
          bottomTop;

      if ($scrollable === $window) {
        viewPortTop = $document.scrollTop(), bottomTop = $document.height() - $window.height();
      } else {
        viewPortTop = $scrollable.scrollTop(), bottomTop = $scrollable[0].scrollHeight - $scrollable.innerHeight();
      }
      return viewPortTop && bottomTop - viewPortTop < this.get('epsilon');
    },

    safeSet: function safeSet(key, value) {
      if (!this.isDestroyed && !this.isDestroying) {
        this.set(key, value);
      }
    }
  });
});
define('netconfig/components/infinity-loader', ['exports', 'ember-infinity/components/infinity-loader'], function (exports, _emberInfinityComponentsInfinityLoader) {
  exports['default'] = _emberInfinityComponentsInfinityLoader['default'];
});
define('netconfig/components/inline-filters', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Component.extend({
        isEdit: false,
        routeData: [],
        content: null,
        isShowPort: true,
        store: _ember['default'].inject.service('store'),
        initialize: (function () {
            this._super.apply(this, arguments);
            $('textarea[name="iplist"]').tagsInput({
                width: '100%',
                defaultText: 'add IP',
                onAddTag: function onAddTag(a, b) {
                    if ($('select[name="protocol"]').val() === 'telnet') {
                        if ($('textarea[name="iplist"]').next('.tagsinput').find('.tag').length > 1) {
                            $('textarea[name="iplist"]').removeTag(a);
                        }
                    }
                }
            });
            $('textarea[name="portlist"]').tagsInput({
                width: '100%',
                defaultText: 'add port',
                onAddTag: function onAddTag(a, b) {
                    if ($('select[name="protocol"]').val() === 'telnet') {
                        if ($('textarea[name="portlist"]').next('.tagsinput').find('.tag').length > 1) {
                            $('textarea[name="portlist"]').removeTag(a);
                        }
                    }
                }
            });
            if (this.get('isEdit')) {
                this.send('doEditStuff');
            }
        }).on('didInsertElement'),
        actions: {
            doEditStuff: function doEditStuff() {
                var data = this.get('content.attributes');

                var iplst = data.iplist.substr(2, data.iplist.length - 4);
                iplst = iplst.split("', '");

                var portlist = data.portlist.substr(2, data.portlist.length - 4);
                portlist = portlist.split("', '");
                $('input[name="name"]').val(data.name);
                $('textarea[name="iplist"]').importTags(iplst.toString());
                $('textarea[name="portlist"]').importTags(portlist.toString());
                $('select[name="protocol"] option[value="' + data.protocol + '"]').prop('selected', true);
                $('select[name="protocol"]').trigger('chosen:updated');
                $('select[name="dc"] option[value="' + data.dc + '"]').prop('selected', true);
                $('select[name="dc"]').trigger('chosen:updated');

                if (data.protocol === 'udpall' || data.protocol === 'icmp') {
                    this.set('isShowPort', false);
                } else {
                    this.set('isShowPort', true);
                }
            },
            protocolchanged: function protocolchanged() {
                var pval = $('select[name="protocol"]').val();
                if (pval === 'telnet') {
                    if ($('textarea[name="portlist"]').next('.tagsinput').find('.tag').length > 1) {
                        $('textarea[name="iplist"]').importTags('');
                        $('textarea[name="portlist"]').importTags('');
                    }
                }

                if (pval === 'udpall' || pval === 'icmp') {
                    this.set('isShowPort', false);
                } else {
                    this.set('isShowPort', true);
                }
            },
            addinlinefilter: function addinlinefilter() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="addinlinefilter"]'))) {
                    return false;
                } //No I18N
                var iplst = $('textarea[name="iplist"]').val().split(','),
                    portlst = $('textarea[name="portlist"]').val().split(',');
                var data = {
                    name: $('input[name="name"]').val(),
                    iplist: "['" + iplst.join("', '") + "']",
                    protocol: $('select[name="protocol"]').val(),
                    dc: $('select[name="dc"]').val()
                },
                    self = this;

                if (!this.get('isShowPort')) {
                    data.portlist = "";
                } else if (portlst.length && !portlst.contains("")) {
                    data.portlist = "['" + portlst.join("', '") + "']";
                }

                this.set('isSaving', true);
                if (this.get('isEdit')) {
                    this.get('store').put('inlinefilter/' + this.get('content.id') + '/', data).then(function (res) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Inline filter updated successfully');
                        self.get('router').transitionTo('settings/inlinefilters');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update Inline filter');
                        console.log(err);
                    });
                } else {
                    this.get('store').post('inlinefilter/', data).then(function (res) {
                        self.set('isSaving', false);
                        if (res.data.id) {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Inline filter updated successfully');
                            self.get('router').transitionTo('settings/inlinefilters');
                        }
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update Inline filter');
                        console.log(err);
                    });
                }
                return false;
            }
        }
    });
});
define("netconfig/components/int-details", ["exports"], function (exports) {
  exports["default"] = Ember.Component.extend({});
});
define('netconfig/components/json-view', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('netconfig/components/labeled-radio-button', ['exports', 'ember-radio-button/components/labeled-radio-button'], function (exports, _emberRadioButtonComponentsLabeledRadioButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRadioButtonComponentsLabeledRadioButton['default'];
    }
  });
});
define('netconfig/components/mem-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Mem.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#membtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/mtr-profiles', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Component.extend({
        isEdit: false,
        routeData: [],
        content: null,
        store: _ember['default'].inject.service('store'),
        initialize: (function () {
            this._super.apply(this, arguments);
            if (this.get('isEdit')) {
                this.send('doEditStuff');
            }
        }).on('didInsertElement'),

        actions: {

            doEditStuff: function doEditStuff() {
                var data = this.get('content.attributes');
                $('input[name="destination_host"]').val(data.destination_host);
                console.log(data.protocol);
                $('select[name="protocol"] option[value="' + data.protocol + '"]').prop('selected', true);
                $('select[name="protocol"]').trigger('chosen:updated');
                $('input[name="ttl"]').val(data.ttl);
                $('input[name="peer"]').val(data.peer);
                $('input[name="network"]').val(data.network);
                $('input[name="router"]').val(data.router);
            },

            networkChanged: function networkChanged() {
                var cval = $('select[name="network"]').val(),
                    self = this;
                if (cval !== "") {
                    var peer = cval.split('-');
                    $('input[name="peer"]').val(peer[0]);
                    if (peer[1].indexOf('@') !== -1) {
                        peer[1] = peer[1].split('@');
                        peer[1] = peer[1][1].substr(1, peer[1][1].length - 2);
                    }
                    /*this.get('store').getJSON('r_for_peer_net/?peer='+peer[0]+'&network='+peer[1]).then(function(res){
                        self.set('routeData', res.data);
                        Ember.run.next(function(){
                            $('select[name="router"]').trigger('chosen:updated');
                        });
                    });*/
                } else {
                        //self.set('routeData', []);
                        $('input[name="peer"]').val('');
                        /*Ember.run.next(function(){
                            $('select[name="router"]').trigger('chosen:updated');
                        });*/
                    }
            },

            routerChanged: function routerChanged() {
                var cval = $('select[name="router"]').val();
                self = this;
                this.get('store').getJSON("peernetworks/?host=" + cval).then(function (res) {
                    self.set('routeData', res.data);
                    _ember['default'].run.next(function () {
                        $('select[name="network"]').trigger('chosen:updated');
                    });
                });
            },

            addMTRProfile: function addMTRProfile() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="addmtrprofile"]'))) {
                    return false;
                } //No I18N

                if (this.get('isEdit')) {
                    console.log("edit");
                    var network = $('input[name="network"]').val();
                    var data = {
                        destination_host: $('input[name="destination_host"]').val(),
                        protocol: $('select[name="protocol"]').val(),
                        network: network,
                        ttl: $('input[name="ttl"]').val(),
                        peer: $('input[name="peer"]').val(),
                        router: $('select[name="router"]').val(),
                        dns: $('input[name="dns"]').val()
                    };
                } else {
                    console.log("nedit");
                    var network = $('select[name="network"]').val();
                    network = network.split('-');
                    var data = {
                        destination_host: $('input[name="destination_host"]').val(),
                        protocol: $('select[name="protocol"]').val(),
                        network: network[1],
                        ttl: $('input[name="ttl"]').val(),
                        peer: $('input[name="peer"]').val(),
                        router: $('select[name="router"]').val(),
                        dns: $('input[name="dns"]').val()
                    };
                }
                self = this;
                this.set('isSaving', true);
                if (this.get('isEdit')) {
                    this.get('store').put('mtrprofile/' + this.get('content.id') + '/', data).then(function (res) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'MTR Profile updated successfully');
                        self.get('router').transitionTo('settings/mtrprofiles');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update MTR Profile');
                        console.log(err);
                    });
                } else {
                    this.get('store').post('mtrprofile/', data).then(function (res) {
                        self.set('isSaving', false);
                        if (res.data.id) {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'MTR Profile added successfully');
                            self.get('router').transitionTo('settings/mtrprofiles');
                        }
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to add MTR Profile');
                        console.log(err);
                    });
                }
                return false;
            }
        }
    });
});
define('netconfig/components/packet-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Packet.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#packetbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/radio-button-input', ['exports', 'ember-radio-button/components/radio-button-input'], function (exports, _emberRadioButtonComponentsRadioButtonInput) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRadioButtonComponentsRadioButtonInput['default'];
    }
  });
});
define('netconfig/components/radio-button', ['exports', 'ember-radio-button/components/radio-button'], function (exports, _emberRadioButtonComponentsRadioButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRadioButtonComponentsRadioButton['default'];
    }
  });
});
define('netconfig/components/router-page', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Component.extend({
        devtype: "",
        islan: false,
        isEdit: false,
        isSaving: false,
        content: null,
        showEnPwd: true,
        categories: ['Super spine', 'Spine', 'Leaf', 'Service Leaf', 'P2P Leaf', 'CVX'],
        podtypes: ['Super spine', 'Pod 1', 'Pod 2', 'Pod 3', 'Pod 4'],

        store: _ember['default'].inject.service('store'),

        initialize: (function () {
            console.log("Router");
            this._super.apply(this, arguments);
            if (this.get('isEdit')) {
                this.send('doEditStuff');
                this.send("changeDevice");
            } else {
                this.set('devtype', "WAN");
                this.set('islan', false);
            }
            //this.send("populateDevice")
        }).on('didInsertElement'),

        actions: {
            doEditStuff: function doEditStuff() {
                console.log("Router edit.");
                var data = this.get('content');
                console.log(data);
                if (data.devicetype == 'LAN') {
                    this.set('islan', true);
                    _ember['default'].run.next(function () {
                        $('select[name="category"] option[value="' + data.category + '"]').prop('selected', true);
                        $('select[name="category"]').trigger('chosen:updated');
                        $('select[name="podtype"] option[value="' + data.podtype + '"]').prop('selected', true);
                        $('select[name="podtype"]').trigger('chosen:updated');
                        $('input[name="racklabel"]').val(data.racklabel);
                        $('input[name="tag"]').val(data.tag);
                    });
                } else {
                    this.set('islan', false);
                    $('input[name="port"]').val(data.port);
                }
                $('input[name="devicetype"]').val(data.devicetype);
                $('input[name="host"]').val(data.host);
                $('input[name="username"]').val(data.username);
                $('input[name="password"]').val(data.password);
                $('input[name="name"]').val(data.name);
                $('input[name="enpwd"]').val(data.enpwd);
                $('select[name="dc"] option[value="' + data.dc + '"]').prop('selected', true);
                $('select[name="dc"]').trigger('chosen:updated');
                $('select[name="deviceinfo_id"] option[value="' + data.deviceinfo_id + '"]').prop('selected', true);
                $('select[name="deviceinfo_id"]').trigger('chosen:updated');
            },
            addRouter: function addRouter() {

                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="addrouter"]'))) {
                    return false;
                } //No I18N
                var self = this;
                this.set('isSaving', true);
                var url = this.get('islan') ? 'landevices/' : 'router/';
                console.log("Url is ", url);
                if (this.get('isEdit')) {
                    var data = $('form[name="addrouter"]').serialize();
                    this.get('store').put(url + this.get('content.host') + '/', data).then(function (res) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Router Profile updated successfully');
                        self.get('router').transitionTo('settings/routers');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Unable to update Router Profile' + err);
                        console.log(err);
                    });
                } else {
                    if (this.get("ip")) {
                        $('input[name="ipaddr"]').val($('input[name="ipaddr"]').val().trim());
                    } else if (this.get("range")) {
                        console.log("Range it is!");
                        $('input[name="start_ip"]').val($('input[name="start_ip"]').val().trim());
                        $('input[name="end_ip"]').val($('input[name="end_ip"]').val().trim());
                    } else if (this.get("network")) {
                        console.log("Network it is!");
                        $('input[name="net"]').val($('input[name="net"]').val().trim());
                    } else if (!this.get("islan")) {
                        console.log("Wan it is!");
                        $('input[name="host"]').val($('input[name="host"]').val().trim());
                    }
                    var data = $('form[name="addrouter"]').serialize();
                    data = data.concat('&devicetype=' + this.get('devtype'));
                    if (this.get('islan')) {
                        data = data.concat('&host_type=' + this.get('host_type'));
                    }
                    console.log("Post data:", data);
                    this.get('store').post(url, data).then(function (res) {
                        self.set('isSaving', false);
                        if (self.get('islan')) {
                            //console.log("Failed routers", res.data[1])
                            var msg = "";
                            if (res.data[1] != "") {
                                msg = 'Devices ' + res.data[1] + ' could not be discovered. ';
                            }
                            if (res.data[2] != "") {
                                msg = msg + 'Devices ' + res.data[2] + ' already present. ';
                            }
                            if (msg == "") {
                                (0, _netconfigUtilsNotify.customNotify)('success', 'Router profile added successfully!');
                            } else {
                                (0, _netconfigUtilsNotify.customNotify)('error', res.data[0].length > 0 ? msg + " Other devices added successfully!" : msg);
                            }
                        } else {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Router Profile added successfully');
                        }
                        self.get('router').transitionTo('settings/routers');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Unable to add router.' + err.errors);
                    });
                }
                return false;
            },
            deviceTypeToggled: function deviceTypeToggled(devType) {
                self = this;
                self.set('devtype', devType);
                if (devType == "LAN") {
                    self.set('islan', true);
                    self.set('ip', true);
                    self.set('host_type', "ip");
                    self.set('prop', 'lan');
                } else {
                    self.set('islan', false);
                    self.set('prop', 'wan');
                }
            },
            hostTypeChanged: function hostTypeChanged(value) {
                self = this;
                self.set('host_type', value);
                var types = ['range', 'network', 'ip'];
                for (var i = 0; i < 3; i++) {
                    self.set(types[i], false);
                }
                self.set(value, true);
            },
            populateDevice: function populateDevice() {
                var self = this;
                //$('select[name="deviceinfo"]').trigger('chosen:updated');
                this.get('store').getJSON('deviceinfo/').then(function (res) {
                    if (res.data) {
                        console.log(res.data);
                        self.set('content.dv', { dvlst: res.data });
                        _ember['default'].run.next(function () {
                            $('select[name="deviceinfo_id"]').trigger('chosen:updated');
                        });
                    }
                }, function (err) {
                    console.log("could not update device type.");
                });
            },

            changeDevice: function changeDevice() {
                if (jQuery.inArray($('select[name="deviceinfo_id"]').val(), ['1', '3', '4']) != -1) {
                    this.set("showEnPwd", true);
                } else {
                    this.set("showEnPwd", true);
                }
            }
        }
    });
});
define("netconfig/components/routers", ["exports"], function (exports) {});
define('netconfig/components/switch-btn', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        btnStat: true,
        sbtnInfo: (function () {
            return this.get('btnActive') ? 'Enabled' : 'Disabled';
        }).property('btnActive'),
        btnActive: false,
        actions: {
            toggleBtn: function toggleBtn() {
                this.toggleProperty('btnActive');
            }
        }
    });
});
define('netconfig/components/sys-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Sys.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#sysbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/temp-fourth-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Temp_four.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#tempfourthbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/temp-second-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Temp_two.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#tempsecondbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/temp-third-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Temp_three.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#tempthirdbtn_wid').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/temp-widget', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/telemetryUrl'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Component.extend({
    polling: null,
    store: _ember['default'].inject.service('store'),
    data: null,
    thrVal: {},
    globOperation: "set",
    globPivot: "max",
    isSuccess: false,
    didInsertElement: function didInsertElement() {
      this.widgetUpdate();
    },

    willDestroyElement: function willDestroyElement() {
      this.stopPolling();
    },

    startPolling: function startPolling() {
      var self = this;
      var polling = _ember['default'].run.later(function () {
        self.widgetUpdate();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    actions: {
      onOperationChange: function onOperationChange(event) {
        var self = this;
        var operation = $(event.target).closest('.timePicker').find("select[name='operation']").find(':selected').val();
        self.set("globOperation", operation);
      },
      onPivotChange: function onPivotChange(event) {
        var self = this;
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']").find(':selected').val();
        self.set("globPivot", pivot);
      },
      getDataChange: function getDataChange() {
        var self = this;
        self.get('store').getJSON('grafana_alert/').then(function (grafana_res) {
          self.set("tes.nameList", grafana_res.data.Temp.nameList);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error getting updated data !!!");
        });
      },
      onChange: function onChange(event) {
        var self = this;
        //console.log(self.get("tes").nameList)
        var oldThreshold = $(event.target).children(":selected").attr("id");
        var uid = $(event.target).children(":selected").attr("class");
        var threshold = $(event.target).closest('.timePicker').find("[name='threshold']");
        var fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        var pivot = $(event.target).closest('.timePicker').find("select[name='pivot']");

        if (oldThreshold == undefined) {
          threshold.val("");
        }

        if (uid != undefined) {

          threshold.val(oldThreshold);
        }
        self.get("tes.nameList").forEach(myFunction);
        function myFunction(item, index, arr) {
          if (item["path"] == fieldType) {
            if (item["pivot"] != "") {
              pivot.val(item["pivot"]);
            }
          }
        }
      }
    },

    didRender: function didRender() {

      var self = this;
      $('#tempbtn').on("click", function (event) {

        (0, _netconfigUtilsNotify.customNotify)("info", "Processing your request, Please wait !!!");
        var threshold = "";
        var oldThreshold = "";
        var fieldType = "";
        var reg = new RegExp("/^\d+$/");
        var ip = localStorage.getItem('teleIP');

        var graphName = self.get("tes.nameList")[0]["measurement"];
        var unit = self.get("tes.unit");
        oldThreshold = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("id");
        var uid = $(event.target).closest('.timePicker').find("select[name='fieldType']").find(':selected').attr("class");

        fieldType = $(event.target).closest('.timePicker').find("[name='fieldType']").val();
        threshold = $(event.target).closest('.timePicker').find("[name='threshold']").val();

        if (fieldType == "" || threshold == 0 || threshold == undefined || fieldType == undefined || threshold < 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please enter all the values !!!");
          return;
        } else if (oldThreshold == threshold && self.get("globOperation") != "remove") {
          (0, _netconfigUtilsNotify.customNotify)("error", "Please change the threshold value !!!");
          return;
        } else if (threshold.length > 60) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Maximum number of characters allowed is 60 !!!");
          return;
        } else if (reg.test(threshold)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Only numbers are allowed in this field !!!");
          return;
        } else {
          if (self.get("globOperation") == "set") {
            if (uid == "" || uid == undefined) {
              self.get('store').post('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), graphName: JSON.stringify(graphName), unit: unit }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                console.log(res.data.data);
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold set successfully !!!");
              }, function (err) {
                console.log(err);
                (0, _netconfigUtilsNotify.customNotify)("error", err.errors.msg);
              });
            } else {
              self.get('store').put('grafana_alert/', { host: ip, fieldType: fieldType, threshold: parseFloat(threshold), pivot: self.get("globPivot"), uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");

                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold updated successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to update) !!!");
              });
            }
          } else {
            if (uid == "" || uid == undefined) {
              (0, _netconfigUtilsNotify.customNotify)("error", "No existing rule !!!");
              return;
            } else {
              self.get('store')['delete']('grafana_alert/', { host: ip, fieldType: fieldType, uid: uid }).then(function (res) {
                $(event.target).closest('.timePicker').find("[name='threshold']").val("");
                self.send("getDataChange");
                (0, _netconfigUtilsNotify.customNotify)("success", "Threshold deleted successfully !!!");
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)("error", "Check the values properly (Failed to delete) !!!");
              });
            }
          }
        }

        // var graphView = $('select[name="dcGraphView"]').val();
        // var graphType=``

        // if(graphView=="stat")
        // {  
        //     graphView = statGraph
        //     graphType = type_stat

        // }
        // else{
        //     graphView = timeGraph
        //     graphType = type_time
        // }
        // var fromTime = $(event.target).closest('.timePicker').find("[name='fromTime']").val();
        // var toTime = $(event.target).closest('.timePicker').find("[name='toTime']").val();

        // if(fromTime.length!=0 && toTime.length!=0){
        //   var fromTime_ = new Date(fromTime)
        //     var fromTime_ = new Date(fromTime).toISOString();
        //     var toTime_ = new Date(toTime).toISOString();

        //     fromTime_ = Date.parse(fromTime_);
        //     toTime_ = Date.parse(toTime_);
        //     if((toTime_ - fromTime_) > 3600000)
        //     {
        //       customNotify("error","Time range should be within 1 hour!")
        //       return
        //     }
        //     else{
        //       var start = fromTime_
        //       var end = toTime_
        //       var panel = paramGraph['#conmonFrame']

        //       var finalUrl = teleUrlGraph.fmt(graphView,graphType,ip,start,end)+panel

        //       $('#conmonFrame').attr("src",finalUrl)
        //     }

        //   }
        // else{
        //     customNotify("error","Select date and time")
        // }
      });
    },
    stopPolling: function stopPolling() {
      var poll = this.get('polling');
      _ember['default'].run.cancel(poll);
    },

    widgetUpdate: function widgetUpdate() {
      var self = this;
      this.get('store').getJSON('bgpalarm_widget/').then(function (res) {
        // self.newAlarm(res)
        self.set('data', res);
        self.startPolling();
      }, function (err) {
        console.log(err);
      });
    },

    newAlarm: function newAlarm(data) {
      var oldData = this.get('data');
      if (oldData) {
        for (var i = 0; i < data.length; i++) {
          var alarm = true;
          for (var j = 0; j < oldData.length; j++) {
            if (data[i].id == oldData[j].id) {
              alarm = false;
              continue;
            }
          }
          if (alarm) {
            console.info('new alarm');
            var audio = new Audio('audio/bgp_alarm.mp3');
            audio.play();
          }
        }
      }
    }
  });
});
define('netconfig/components/zohoservice-page', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Component.extend({
        isEdit: false,
        content: null,

        store: _ember['default'].inject.service('store'),

        initialize: (function () {
            this._super.apply(this, arguments);
            if (this.get('isEdit')) {
                this.send('doEditStuff');
            }
        }).on('didInsertElement'),

        actions: {

            doEditStuff: function doEditStuff() {
                var data = this.get('content.attributes');
                $('input[name="name"]').val(data.name);
                $('input[name="url"]').val(data.url);
            },

            addService: function addService() {

                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="addservice"]'))) {
                    return false;
                } //No I18N
                var data = $('form[name="addservice"]').serialize(),
                    self = this;

                this.set('isSaving', true);

                if (this.get('isEdit')) {
                    this.get('store').put('zohoservices/' + this.get('content.id') + '/', data).then(function (res) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Service Profile updated successfully');
                        self.get('router').transitionTo('settings/zohoserviceview');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update Service Profile');
                        console.log(err);
                    });
                } else {
                    this.get('store').post('zohoservices/', data).then(function (res) {
                        self.set('isSaving', false);
                        if (res.data.id) {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Service Profile added successfully');
                            self.get('router').transitionTo('settings/zohoserviceview');
                        }
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to add Service Profile');
                        console.log(err);
                    });
                }
                return false;
            }
        }
    });
});
define("netconfig/controllers/admin", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({});
});
define('netconfig/controllers/admin_login', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Controller.extend({
        appCtrl: _ember['default'].inject.controller('application'),
        actions: {
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="login"]'))) {
                    return false;
                }
                var self = this;
                this.set('isSaving', true);
                this.store.post('../api-auth-token/', $('form[name="login"]').serialize()).then(function (res) {
                    self.set('isSaving', false);
                    localStorage.setItem('authtoken', res.token);
                    window.authtoken = res.token;
                    window.isLogin = true;
                    self.set('appCtrl.login', true);
                    self.get('router').transitionTo('moniroting.inventory');
                }, function (err) {
                    self.set('isSaving', false);
                    window.isLogin = false;
                    self.set('appCtrl.login', false);
                    console.log(err.non_field_errors);
                    (0, _netconfigUtilsNotify.customNotify)('error', err.non_field_errors);
                });
                return false;
            },
            iamRedirect: function iamRedirect() {
                window.location = "https://accounts.zoho.com/oauth/v2/auth?scope=email,AaaServer.profile.READ&client_id=1000.6ZPXU3HZIE5Z81C9AMDPC4BH28UWBK&state=testing&response_type=code&redirect_uri=https://in2-pop-netops.zohonoc.com/oauth2callback&access_type=online";
            }
        }
    });
});
define('netconfig/controllers/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    login: localStorage.getItem('authtoken') !== null ? true : false,
    fullscreen: _ember['default'].inject.service(),
    showLeft: true,
    LAN: false,
    isShowLeft: (function () {
      return this.get('showLeft') && this.get('login') ? true : false;
    }).property('login', 'showLeft'),

    isLoggedin: (function () {
      return this.get('login');
    }).property('login'),

    confCtrl: _ember['default'].inject.controller('conf'),
    lanCtrl: _ember['default'].inject.controller('lanconf'),

    init: function init() {
      var self = this;
      this._super();
      this.setUser();
      window.addEventListener("beforeunload", function () {
        console.log("calling disconnect.");
        self.get('confCtrl').send("disconnect");
        if (self.get("lanCtrl.connected")) {
          self.get('lanCtrl').send("disconnect");
        }
      });
    },

    setUser: function setUser() {
      var self = this;
      this.store.getJSON("../get_user/").then(function (res) {
        self.store.getJSON("get_account_info/").then(function (Apres) {
          if (Apres.data.attributes.approver == 3 || Apres.data.attributes.approver == 4) {
            Apres.data.attributes["toShow"] = false;
          } else {
            Apres.data.attributes["toShow"] = true;
          }
          self.set("approvers", Apres);
          self.set("user", res);
        });
      });
    },

    isShowSettings: (function () {}).property('router.currentRouteName'),

    isShowConf: (function () {
      return true;
    }).property('router.currentRouteName'),

    staticPath: APP_META.staticimgUrl,

    appMeta: {
      isLogin: true,
      userInfo: {}
    },

    actions: {
      logout: function logout() {
        console.log("logout function.");
        if (this.get("confCtrl.connected")) {
          this.get('confCtrl').send("disconnect");
        }
        if (this.get("lanCtrl.connected")) {
          this.get('lanCtrl').send("disconnect");
        }
        var self = this;
        this.store.post('../rm-iam-oauth-token/', { token: localStorage.getItem("authtoken") }).then(function (res) {
          console.log("logout action.");
          console.log(APP_META.isLogin);
          APP_META.isLogin = false;
          self.set('login', false);
          $.xhrPool.abortAll();
          self.transitionToRoute('login');
          localStorage.removeItem('authtoken');
          localStorage.removeItem('appuser');
          localStorage.removeItem('teleIP');
          self.set("user", null);
          window.location.reload(true);
        }, function (err) {
          console.log("could not logout.");
        });
      }
    }
  });
});
/*$Id$*/
define('netconfig/controllers/bandwidth/clients/allagents', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            updateElement: function updateElement() {
                $('.nodatarow').each(function (i, e) {
                    $(e).closest('li').find('.fa-minus-square-o').trigger('click');
                });
            },
            showFData: function showFData(item) {
                if (item.isShowData) {
                    _ember['default'].set(item, 'isShowData', false);
                } else {
                    _ember['default'].set(item, 'isShowData', true);
                }
            },
            changeStatus: function changeStatus(item) {
                var self = this;
                this.store.put('networkmon/clientdetails/', { id: item.id, status: item.status ? 'False' : 'True' }).then(function (res) {
                    if (res.data.message === 'SUCCESS') {
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Status updated successfully');
                        _ember['default'].set(item, 'status', item.status ? false : true);
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', res.data.message);
                    }
                });
            },
            deleteAgent: function deleteAgent(item) {
                var self = this;
                (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete agent ' + item.agent_address, function () {
                    self.store['delete']('networkmon/clientdetails/', { server_address: item.agent_address }).then(function (res) {
                        if (res.data.message === 'SUCCESS') {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Agent ' + item.agent_address + ' deleted successfully');
                            var adata = self.get('content');
                            adata.removeObject(item);
                        } else {
                            (0, _netconfigUtilsNotify.customNotify)('error', res.data.message);
                        }
                    });
                });
            },
            deleteClient: function deleteClient(item, adata) {
                var self = this;
                (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete client ' + item.client_address, function () {
                    self.store['delete']('networkmon/client/', { client_address: item.client_address, server_address: item.server_address }).then(function (res) {
                        if (res.data.message === 'SUCCESS') {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Client ' + item.client_address + ' deleted successfully');
                            adata.client_details.removeObject(item);
                        } else {
                            (0, _netconfigUtilsNotify.customNotify)('error', res.data.message);
                        }
                    });
                });
            }
        }
    });
});
define('netconfig/controllers/bandwidth/clients/summary', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            updateElement: function updateElement() {
                $('.nodatarow').each(function (i, e) {
                    $(e).closest('li').find('.fa-minus-square-o').trigger('click');
                });
            },
            showFData: function showFData(item) {
                if (item.isShowData) {
                    _ember['default'].set(item, 'isShowData', false);
                } else {
                    _ember['default'].set(item, 'isShowData', true);
                }
            },
            changeStatus: function changeStatus(item) {
                var self = this;
                this.store.put('networkmon/clientdetails/', { id: item.id, status: item.status ? 'False' : 'True' }).then(function (res) {
                    if (res.data.message === 'SUCCESS') {
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Status updated successfully');
                        _ember['default'].set(item, 'status', item.status ? false : true);
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', res.data.message);
                    }
                });
            },
            deleteAgent: function deleteAgent(item) {
                var self = this;
                (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete agent ' + item.agent_address, function () {
                    self.store['delete']('networkmon/clientdetails/', { server_address: item.agent_address }).then(function (res) {
                        if (res.data.message === 'SUCCESS') {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Agent ' + item.agent_address + ' deleted successfully');
                            var adata = self.get('content');
                            adata.removeObject(item);
                        } else {
                            (0, _netconfigUtilsNotify.customNotify)('error', res.data.message);
                        }
                    });
                });
            },
            deleteClient: function deleteClient(item, adata) {
                var self = this;
                (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete client ' + item.client_address, function () {
                    self.store['delete']('networkmon/client/', { client_address: item.client_address, server_address: item.server_address }).then(function (res) {
                        if (res.data.message === 'SUCCESS') {
                            (0, _netconfigUtilsNotify.customNotify)('success', 'Client ' + item.client_address + ' deleted successfully');
                            adata.client_details.removeObject(item);
                        } else {
                            (0, _netconfigUtilsNotify.customNotify)('error', res.data.message);
                        }
                    });
                });
            }
        }
    });
});
define('netconfig/controllers/bandwidth/tcp', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            didInsEle: function didInsEle() {
                this.send('createGraph');
            },
            dateChanged: function dateChanged() {
                var pid = window.location.hash.split('/'),
                    self = this,
                    ftime = '',
                    ttime = '';
                switch ($('select[name="date"]').val()) {
                    case 'today':
                        {
                            ftime = moment(moment().format('YYYY-MM-DD') + ' 00:00:00', 'YYYY-MM-DD hh:mm:ss').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                    case 'last24hours':
                        {
                            ftime = moment().subtract(24, 'hours').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                    case 'last7days':
                        {
                            ftime = moment().subtract(7, 'days').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                    case 'last3days':
                        {
                            ftime = moment().subtract(3, 'days').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                }

                this.store.getJSON('networkmon/tcp/', {
                    pk: pid[pid.length - 1],
                    fromtime: parseInt(ftime),
                    totime: parseInt(ttime)
                }).then(function (res) {
                    self.set('content', res.data);
                    _ember['default'].run.next(function () {
                        self.send('createGraph');
                    });
                });
            },
            createGraph: function createGraph() {
                var colorsArr = ["#69bffc", "#a48ad4", "#aec785", "#fdd752", "#3acdc7", "#fa8564", "#ff5722", "#5bba8e", "#6dc0f9", "#e0be00", "#45ada9", "#b15e5e", "#59787a", "#aec785", "#3e86c6", "#4fc5ea", "#d64c1d", "#89ccbb", "#25b9ef", "#2196f3", "#3bafda", "#967adc", "#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed", "#0d47a1", "#1a237e", "#d500f9", "#ffee58", "#95332f", "#fa7872", "#7c4dff", "#8bc34a", "#880e4f", "#33691e", "#7cb342", "#673ab7", "#546e7a", "#5d4037", "#f06292", "#0097a7", "#00e5ff", "#00e676", "#80cbc4", "#ff3d00", "#ffeb3b", "#8e24aa", "#42a5f5", "#d4e157"]; // No I18N

                var defaults = {
                    "metadata": { // No I18N
                        "columns": [{
                            "dataindex": 0,
                            "columnname": "Date/Time",
                            "datatype": "time",
                            "time": {
                                "format": {},
                                "inputformat": "YYYY-MM-dd HH:mm:ss"
                            }
                        }, {
                            "dataindex": 1,
                            "columnname": "Bandwidth",
                            "datatype": "numeric",
                            "numeric": { "format": { "decimalPlaces": 3 } }
                        }, {
                            "columnname": "Service"
                        }],
                        "axes": { "x": [0], "y": [[1]], "tooltip": [0, 1] } },
                    // No I18N

                    "legend": {
                        "colorPallete": {
                            "type": "multicolor",
                            "options": {
                                "multicolor": "ao_Colors"
                            }
                        },
                        "title": {
                            "show": "true",
                            "text": "NoOf Parallel Connections"
                        }
                    },
                    "chart": { // No I18N
                        "axes": {
                            "rotated": false,
                            "xaxis": {
                                "label": {
                                    "show": true
                                },
                                "ticklabel": { "rotation": "auto" } }, "yaxis": [{ "label": { "text": "Bandwidth(Mbps)", "show": true } }]
                        }, // No I18N
                        //"mode": "monotone",
                        "plot": {
                            "plotoptions": {
                                "line": {
                                    "datalabels": { "fontSize": 12 }, "marker": { "innerFillColor": "white" }, "animation": {},
                                    // "outerPadding": 0.1,
                                    "events": {
                                        "click": function click(e, d) {
                                            $('.bandwidth_streams').remove();
                                            $('.readings_graph').append('<div class="bandwidth_streams"><h2>Individual Streams<span class="bandwidth_st_cls" title="Close Streams">x</span></h2><ol><li>' + d.data[2].value.replace(/,/g, ' (Mbps)</li><li>') + ' (Mbps)</li></ol></div>');
                                            $('.bandwidth_streams').css({ 'left': e.pageX - 55, top: e.pageY - 40 });

                                            $('.bandwidth_st_cls').click(function () {
                                                $('.bandwidth_streams').remove();
                                            });
                                        }
                                    }
                                }
                            }
                        } // No I18N
                    },
                    "seriesdata": { "chartdata": [] }, // No I18N
                    "noDataHandler": { "text": 'No data available' }, // No I18N
                    "canvas": { "title": { "show": true, "text": "Readings", "fontColor": "#45B05A", "fontSize": "17" }, "border": { "show": false }, "shadow": { "show": false }, "subtitle": { "show": false } }, // No I18N
                    "placeholder": ".readings_graph"
                };

                var cdata = this.get('content'),
                    gdata = [];
                $.each(cdata.readings, function (k, v) {
                    var arr = [];
                    $(v).each(function (i, e) {
                        arr.push([e.timestamp, e.bandwidth, e.individual_streams_Mbps]);
                    });
                    gdata.push({ "seriesname": k, "data": [arr], "type": 11, "yaxiscolumnorder": [0] });
                });

                // defaults.chart.axes.xaxis.minRange = gdata[0].data[0][0][0];
                // defaults.chart.axes.xaxis.maxRange = gdata[0].data[0][gdata[0].data[0].length -1][0];
                if (gdata.length) {
                    var min = moment(gdata[0].data[0][0][0]),
                        max = moment(defaults.chart.axes.xaxis.maxRange);

                    if (max.diff(min, 'days') === 0) {
                        defaults.metadata.columns[0].time.subfunction = "ABSMINUTE";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm:ss";
                        defaults.chart.axes.xaxis.label.text = "Time(Minutes)";
                    } else if (max.diff(min, 'days') === 1) {
                        defaults.metadata.columns[0].time.subfunction = "ABSHOUR";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Time(Hours)";
                    } else if (max.diff(min, 'days') > 1) {
                        defaults.metadata.columns[0].time.subfunction = "ABSDAY";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm:ss";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    } else if (max.diff(min, 'days') > 7) {
                        defaults.metadata.columns[0].time.subfunction = "ABSWEEK";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    } else if (max.diff(min, 'days') > 30) {
                        defaults.metadata.columns[0].time.subfunction = "ABSMONTH";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    } else {
                        defaults.metadata.columns[0].time.subfunction = "YEAR";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    }
                }

                defaults.seriesdata.chartdata = gdata;
                var fopt = defaults;
                $ZC.setLegendColorPallete("ao_Colors", colorsArr); // No I18N
                new $ZC.charts($(fopt.placeholder)[0], fopt);
            }
        }
    });
});
define('netconfig/controllers/bandwidth/udp', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            dateChanged: function dateChanged() {
                var pid = window.location.hash.split('/'),
                    self = this,
                    ftime = '',
                    ttime = '';
                switch ($('select[name="date"]').val()) {
                    case 'today':
                        {
                            ftime = moment(moment().format('YYYY-MM-DD') + ' 00:00:00', 'YYYY-MM-DD hh:mm:ss').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                    case 'last24hours':
                        {
                            ftime = moment().subtract(24, 'hours').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                    case 'last7days':
                        {
                            ftime = moment().subtract(7, 'days').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                    case 'last3days':
                        {
                            ftime = moment().subtract(3, 'days').format('x');
                            ttime = moment().format('x');
                        }
                        break;
                }

                this.store.getJSON('networkmon/udp/', {
                    pk: pid[pid.length - 1],
                    fromtime: parseInt(ftime),
                    totime: parseInt(ttime)
                }).then(function (res) {
                    self.set('content', res.data);
                    _ember['default'].run.next(function () {
                        self.send('createGraph');
                    });
                });
            },
            createGraph: function createGraph() {
                var colorsArr = ["#69bffc", "#a48ad4", "#aec785", "#fdd752", "#3acdc7", "#fa8564", "#ff5722", "#5bba8e", "#6dc0f9", "#e0be00", "#45ada9", "#b15e5e", "#59787a", "#aec785", "#3e86c6", "#4fc5ea", "#d64c1d", "#89ccbb", "#25b9ef", "#2196f3", "#3bafda", "#967adc", "#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed", "#0d47a1", "#1a237e", "#d500f9", "#ffee58", "#95332f", "#fa7872", "#7c4dff", "#8bc34a", "#880e4f", "#33691e", "#7cb342", "#673ab7", "#546e7a", "#5d4037", "#f06292", "#0097a7", "#00e5ff", "#00e676", "#80cbc4", "#ff3d00", "#ffeb3b", "#8e24aa", "#42a5f5", "#d4e157"]; // No I18N

                var dobj = {
                    'today': { sfunc: "ABSHOUR", disp: 'Time(Hours)', format: 'HH:mm:ss' },
                    'last24hours': { sfunc: "ABSHOUR", disp: 'Time(Hours)', format: 'dd-MM HH:mm:ss' },
                    'last7days': { sfunc: "ABSDAY", disp: 'Date/Time', format: 'dd-MM HH:mm' },
                    'last3days': { sfunc: "ABSDAY", disp: 'Date/Time', format: 'dd-MM HH:mm' },
                    'last90days': { sfunc: "ABSMONTH", disp: 'Date/Time', format: 'dd-MM HH:mm' }
                };
                var defaults = {
                    "metadata": { // No I18N
                        "columns": [{
                            "dataindex": 0,
                            "columnname": "Date/Time",
                            "datatype": "time",
                            "time": {
                                "format": {},
                                "inputformat": "YYYY-MM-dd HH:mm:ss"
                            }
                        }, {
                            "dataindex": 1,
                            "columnname": "Achieved Bandwidth",
                            "datatype": "numeric",
                            "numeric": { "format": { "decimalPlaces": 3 } }
                        }, {
                            "dataindex": 2,
                            "columnname": "Target Bandwidth",
                            "datatype": "ordinal"
                        }, {
                            "dataindex": 3,
                            "columnname": "Jitter",
                            "datatype": "ordinal",
                            "ordinal": {
                                "tooltipformat": {
                                    "customFormat": function customFormat(value, datatype, columnInfo, type, chartObj) {
                                        return value.toFixed(3);
                                    }
                                }
                            }
                        }, {
                            "dataindex": 4,
                            "columnname": "Lost Percent",
                            "datatype": "ordinal",
                            "ordinal": {
                                "tooltipformat": {
                                    "customFormat": function customFormat(value, datatype, columnInfo, type, chartObj) {
                                        return value.toFixed(3) + '%';
                                    }
                                }
                            }
                        }],
                        "axes": { "x": [0], "y": [[1]], "tooltip": [0, 1, 2, 3, 4] } },
                    // No I18N

                    "chart": { // No I18N
                        "axes": { "rotated": false, "xaxis": { "label": { "show": true }, "ticklabel": { "rotation": "auto" } }, "yaxis": [{ "label": { "text": "Bandwidth(Gbps)", "show": true } }] }, // No I18N
                        //"mode": "monotone",
                        "plot": { "plotoptions": { "line": { "datalabels": { "fontSize": 12 }, "marker": { "innerFillColor": "white" }, "animation": {} } } } // No I18N
                    },
                    "seriesdata": { "chartdata": [] }, // No I18N
                    "noDataHandler": { "text": 'No data available' }, // No I18N
                    "canvas": { "title": { "show": true, "text": "Readings", "fontColor": "#45B05A", "fontSize": "17" }, "border": { "show": false }, "shadow": { "show": false }, "subtitle": { "show": false } }, // No I18N
                    "placeholder": ".readings_graph"
                };

                var cdata = this.get('content'),
                    gdata = [],
                    abw = [],
                    tbw = [];
                $(cdata.readings).each(function (i, e) {
                    abw.push([e.timestamp, e.achieved_bandwidth, e.target_bandwidth, e.jitter, e.lost_percent]);
                    // tbw.push([e.timestamp, e.target_bandwidth, e.jitter, e.lost_percent]);
                });
                gdata.push({ "data": [abw], "type": 11, "yaxiscolumnorder": [0] });
                // gdata.push({"seriesname":'Target Bandwidth', "data":[tbw], "type": 11, "yaxiscolumnorder": [0]});

                if (abw.length) {
                    var min = moment(gdata[0].data[0][0][0]),
                        max = moment(defaults.chart.axes.xaxis.maxRange);

                    if (max.diff(min, 'days') === 0) {
                        defaults.metadata.columns[0].time.subfunction = "ABSMINUTE";
                        defaults.metadata.columns[0].time.format.specifier = "HH:mm:ss";
                        defaults.chart.axes.xaxis.label.text = "Time(Minutes)";
                    } else if (max.diff(min, 'days') === 1) {
                        defaults.metadata.columns[0].time.subfunction = "ABSHOUR";
                        defaults.metadata.columns[0].time.format.specifier = "HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Time(Hours)";
                    } else if (max.diff(min, 'days') > 1) {
                        defaults.metadata.columns[0].time.subfunction = "ABSDAY";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm:ss";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    } else if (max.diff(min, 'days') > 7) {
                        defaults.metadata.columns[0].time.subfunction = "ABSWEEK";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    } else if (max.diff(min, 'days') > 30) {
                        defaults.metadata.columns[0].time.subfunction = "ABSMONTH";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    } else {
                        defaults.metadata.columns[0].time.subfunction = "YEAR";
                        defaults.metadata.columns[0].time.format.specifier = "dd-MM HH:mm";
                        defaults.chart.axes.xaxis.label.text = "Date/Time";
                    }
                }

                defaults.seriesdata.chartdata = gdata;

                var fopt = defaults;
                $ZC.setLegendColorPallete("ao_Colors", colorsArr); // No I18N

                console.log(fopt);
                new $ZC.charts($(fopt.placeholder)[0], fopt);
            }
        }
    });
});
define('netconfig/controllers/bgp', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigUtilsNotify, _netconfigMixinsSetupuser) {
    exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
        appCtrl: _ember['default'].inject.controller('application'),
        isShowlst: false,
        isShowAdv: false,
        tblData: [],
        advData: {},
        dcs: [],
        isPoll: true,
        initPage: function initPage() {

            var self = this;

            _ember['default'].run.scheduleOnce('afterRender', this, function () {
                self.store.getJSON('router/').then(function (res) {
                    //console.log(res.data)
                    if (res.router == "no data") {
                        (0, _netconfigUtilsNotify.customNotify)('error', "this error");
                    } else {
                        $(self.get('allcontent')).each(function (i, e) {
                            //console.log('allcontent looop ', e)
                            $(res.data).each(function (j, b) {
                                //console.log(b.podtype)
                                if (e.podtype == b.podtype && e.host == b.host) {

                                    console.log(b.bgp_dc_status_set[0].status, b.podtype, b.host);
                                    if (b.bgp_dc_status_set[0].status == "OK") {
                                        _ember['default'].set(e, "status", true);
                                    } else {
                                        _ember['default'].set(e, "status", false);
                                    }
                                }
                            });
                        });
                        console.log(self.get('allcontent'));
                    }
                });
                console.log('onAfter Render ', self.get('allcontent'));
                this.send('changeContents');
            });
        },

        //getDcs:function(){
        //    var content = this.get('content.router'), result = ["ALL"]
        //    for(var i=0; i<content.length; i++){
        //        result.push(content[i].dc)
        //    }
        //    this.set('dcs', result)
        //},

        processWidget: function processWidget() {
            var self = this,
                c = 0;
            $(this.get('content.router')).each(function (i, e) {
                //console.log(e)
                /* if(c === 0) {
                     console.log("e")
                     console.log(i, e)
                 }*/
                //$(e.routers).each(function(f, g) {
                self.getBgpData(e);
                // })
            });
        },

        getBgpData: function getBgpData(e, isp) {
            //console.log(e)
            var self = this;

            /* if(e.wData == undefined) {
               console.log("this")
               var url = 'bgp/?host='+e.id+"&call=first"
             } else {
               var url = 'bgp/?host='+e.id+"&call=notfirst"
             }  */
            return self.store.getJSON('bgp/?host=' + e.host).then(function (res) {
                console.log("Hi", res);
                if (res.host == "no-data") {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Memcached not running!");
                } else {
                    //var tblData = self.get('tblData');
                    //Ember.set(e, 'wData', res);

                    var SortByName = function SortByName(a, b) {
                        var aName = a['peer_state'].toLowerCase();
                        var bName = b['peer_state'].toLowerCase();
                        return aName < bName ? -1 : aName > bName ? 1 : 0;
                    };

                    var bgpPeer = res['bgp-peer'].sort(SortByName).reverse();
                    _ember['default'].set(e, 'wData', res);
                    if (isp) {
                        _ember['default'].set(e, 'isShowAllAdvList', false);
                    }

                    /*$(bgpPeer).each(function(a,b){
                        b['down-peer-count'] = res['down-peer-count'];
                        b['group-count'] = res['group-count'];
                        b['peer-count'] = res['peer-count'];
                        b.host = res.host;
                        b.id = e.id;
                    });
                     if(isp) {
                        var bc = 0, bgp  = bgpPeer;
                        $(tblData).each(function(c,d){
                            if(bgp[bc] !== undefined && (d.id === bgp[bc].id && d['peer-address'] === bgp[bc]['peer-address'])) {
                                $.each(bgp[bc], function(k,v) {
                                    Ember.set(tblData[c], k, v);
                                });
                                bc++;
                            }
                        });
                    } else {
                        tblData.addObjects(bgpPeer);
                    }*/

                    _ember['default'].run.later(function () {
                        if (self.get('isPoll')) {
                            self.getBgpData(e, true);
                        }
                    }, 1000 * 60 * 2);
                }
            });
        },

        stopPoll: function stopPoll() {
            $.xhrPool.abortAll();
            clearInterval(this.get('polid'));
        },

        actions: {

            showFData: function showFData(item) {
                if (item.isShowData) {
                    _ember['default'].set(item, 'isShowData', false);
                } else {
                    _ember['default'].set(item, 'isShowData', true);
                }
            },

            showAdvData: function showAdvData(item, router, allPeers) {
                if (item.isShowAdvData) {
                    _ember['default'].set(item, 'isShowAdvData', false);
                    if (router.isShowAllAdvList) {
                        var anyOpen = false;
                        for (var i = 0; i < allPeers.length; i++) {
                            if (allPeers[i].isShowAdvData) {
                                anyOpen = true;break;
                            }
                        }
                        if (!anyOpen) _ember['default'].set(router, 'isShowAllAdvList', false);
                    }
                } else {
                    _ember['default'].set(item, 'isShowAdvData', true);
                    if (!router.isShowAllAdvList) {
                        var anyClosed = false;
                        for (var i = 0; i < allPeers.length; i++) {
                            if (!allPeers[i].isShowAdvData) {
                                anyClosed = true;break;
                            }
                        }
                        if (!anyClosed) _ember['default'].set(router, 'isShowAllAdvList', true);
                    }
                }
            },

            showAllAdvList: function showAllAdvList(item, allPeers) {
                if (item.isShowAllAdvList) {
                    _ember['default'].set(item, 'isShowAllAdvList', false);
                    for (var i = 0; i < allPeers.length; i++) {
                        _ember['default'].set(allPeers[i], 'isShowAdvData', false);
                    }
                } else {
                    _ember['default'].set(item, 'isShowAllAdvList', true);
                    for (var i = 0; i < allPeers.length; i++) {
                        _ember['default'].set(allPeers[i], 'isShowAdvData', true);
                    }
                }
            },

            showPeers: function showPeers(item) {
                console.log("Item", item);
                if (item.isShowPeer) {
                    _ember['default'].set(item, 'isShowPeer', false);
                } else {
                    _ember['default'].set(item, 'isShowPeer', true);
                }
            },

            toggleNav: function toggleNav() {
                this.toggleProperty('appCtrl.showLeft');
            },

            closeAdv: function closeAdv() {
                this.set('isShowAdv', false);
                this.set('advData', {});
            },

            /*showadvlst:function(itm, bgppeer){
                var ids = itm.host+'_'+bgppeer['peer_host'];
                this.set('advData', {host:bgppeer['peer_host'], adv:bgppeer.bgp_advertisement_set});
                this.set('isShowAdv', true);
                Ember.run.next(function(){
                    var crow = $('.table tr[ids="'+ids+'"] .bgpadv');
                    console.log(crow)
                    $('.advlst').slideDown('fast').css({top:((crow.offset().top + $('.innerContainer').scrollTop()) - 20), left:(crow.offset().left - ($('.advlst').width() - 90))});
                })
            },*/

            toggleView: function toggleView(isLst) {
                this.toggleProperty('isShowlst', isLst);
            }

        }
    });
});
/*changeDc:function(){
    var dcs = [], result = [], value = $('select[name="bgp_dc"]').val() 
    if(value == 'ALL'){
        dcs = Object.assign([], this.get('dcs'))
        dcs.splice(0,1)
    }else{
        dcs.push(value)
    }
    var allContent = this.get('allcontent')
    for(var a=0; a<dcs.length;a++){
        for(var i=0; i<allContent.length;i++){
           if(allContent[i].dc == dcs[a])
                result.push(allContent[i])
        }
    }
    this.set('content.router', result)
},*/
define('netconfig/controllers/bgpalarms', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    appCtrl: _ember['default'].inject.controller('application'),
    hasMore: true,
    pageMeta: { limit: 30, offset: 30 },
    actions: {
      fetchMore: function fetchMore(cb) {
        var data = this.get('pageMeta'),
            self = this;
        var res = this.store.getJSON("bgpalarms/", data).then(function (res) {
          self.set("pageMeta.offset", data.limit + data.offset);
          self.set('hasMore', res.results.length ? true : false);
          return res.results;
        });
        cb(res);
      },
      toggleNav: function toggleNav() {
        this.toggleProperty('appCtrl.showLeft');
      }
    }
  });
});
define('netconfig/controllers/common/confirmmodal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    title: '',
    titleNeed: true,
    msg: '',
    msgArgs: null,
    pBtn: '',
    pBtnActn: '',
    sBtnNeed: false,
    sBtn: '',
    sBtnActn: '',
    opensAnotherModal: false, // This prop is set to true if the confirm Modal is followed by another modal
    objParams: null,
    controllerInstance: "",
    showChkBox: false,
    chkBoxLabel: '',
    chkBoxValue: false,
    notes: '',
    notesArgs: null,
    disablePBtn: false,
    showIcon: true,
    handleWarningAction: false,

    performAction: function performAction(actionName) {
      var controller = this.get("controllerInstance") || this;
      this.send("closeModal");
      controller.send(actionName, this.get("objParams"), this.get('chkBoxValue'));
    },

    hideWarning: function hideWarning() {
      var _this = this;

      //Make the API call to disable the warning
      var actionURL = "/settings/warnings";
      var jsonObj = { warning_name: this.get("controllerInstance.model.warning_name"), show: !this.get('chkBoxValue') };
      var serializedJSON = JSON.stringify(jsonObj);

      this.store.ajax(actionURL, { type: "POST", data: { JSONString: serializedJSON } })['catch'](function (errorObj) {
        _this.send('showErrorMsg', errorObj.message);
      });
    },

    actions: {

      confirmAction: function confirmAction() {
        //to prevent accidental dbl-click of primary action
        this.set('disablePBtn', true);

        if (this.get('showChkBox') && this.get('handleWarningAction')) {
          this.hideWarning();
        }
        this.performAction(this.get("pBtnActn"));
      },
      secondaryAction: function secondaryAction() {
        this.performAction(this.get("sBtnActn"));
      }
    }
  });
});
define('netconfig/controllers/conf', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigUtilsValidation, _netconfigMixinsSetupuser) {
  exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {

    isShowConf: (function () {
      if (this.get('router.currentRouteName') === 'conf.index') {
        return false;
      } else {
        return true;
      }
    }).property('router.currentRouteName'),

    appCtrl: _ember['default'].inject.controller('application'),

    confIndx: _ember['default'].inject.controller('conf/index'),

    rval: null,
    connected: false,
    isSaving: false,
    isRunningTimer: true,
    isResetTimer: false,
    timerObj: { min: 0, sec: 0, timer: '10:00', duration: 60 * 10, isreset: false },

    _init: function _init() {
      this.set("rtype", this.get("confIndx.rtype"));
    },

    actions: {

      startTimer: function startTimer() {
        if (!this.get('isRunningTimer')) {
          return false;
        }
        var self = this;
        var timer = this.get('timerObj.duration'),
            minutes = this.get('timerObj.min'),
            seconds = this.get('timerObj.sec');
        _ember['default'].run.later(function () {
          minutes = parseInt(timer / 60, 10);
          seconds = parseInt(timer % 60, 10);

          minutes = minutes < 10 ? "0" + minutes : minutes;
          seconds = seconds < 10 ? "0" + seconds : seconds;
          self.set('timerObj', { timer: minutes + ':' + seconds, min: minutes, sec: seconds });

          if (String(minutes) === "00" && String(seconds) === "30") {
            (0, _netconfigUtilsValidation.customConfirm)('Hey router session is going to expire <br> Do you want to keep the connection?', function () {
              self.set('isResetTimer', true);
            }, function () {
              self.set('isResetTimer', false);
              self.set('isRunningTimer', false);
              self.send('disconnect');
            });
          }

          if (self.get('isResetTimer')) {
            timer = 60 * 10;
            self.set('isResetTimer', false);
          }
          if (--timer < 0) {
            $('.cusCnfrmBtn_no').trigger('click');
          }

          self.set('timerObj.duration', timer);
          self.send('startTimer');
        }, 1000);
      },

      disconnect: function disconnect() {
        this.set('isSaving', true);
        var self = this;
        this.set('rtype', this.get("confIndx.rtype"));
        if (this.rtype == "juniper") {
          this.disconnectJuniper();
        } else {
          this.disconnectArista();
        }
      }
    },

    disconnectJuniper: function disconnectJuniper() {
      var self = this;
      if (this.connected) {
        this.store.getJSON('cc_session/?action=disconnect&router=' + this.rval).then(function (res) {
          self.set('isSaving', false);
          if (res.data == "disconnected") {
            self.set('connected', false);
            self.set('isResetTimer', false);
            self.set('isRunningTimer', false);
            self.get('router').transitionTo('conf');
          }
        }, function (err) {
          self.set('connected', false);
          console.log(err);
          self.get('router').transitionTo('conf');
          console.log("Not success.");
        });
      }
    },

    disconnectArista: function disconnectArista() {
      var self = this;
      if (this.connected) {
        this.store.getJSON('aconf_disconnect/?action=disconnect&router=' + this.rval).then(function (res) {
          self.set('isSaving', false);
          console.log(res.data);
          if (res.data == "disconnected") {
            self.set('connected', false);
            self.set('isResetTimer', false);
            self.set('isRunningTimer', false);
            self.get('router').transitionTo('conf');
          }
        }, function (err) {
          self.set('connected', false);
          self.get('router').transitionTo('conf');
        });
      }
    }
  });
});
define('netconfig/controllers/conf/arista/accesslist/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    store: _ember['default'].inject.service('store'),
    confCtrl: _ember['default'].inject.controller('conf'),
    ShowAddPrefix: false,
    PrefixList: "",
    isProcessing: false,
    isShow: false,
    trigger: true,
    invert: false,
    isSaving: false,
    createStdAcl: [],
    createExtAcl: [],
    updateAcl: [],
    deleteAcl: [],
    commandStr: "",
    accessCommandList: [],
    showActions: false,
    setPrefixList: function setPrefixList() {
      console.log("serPrefixList");
      var self = this;
      self.set("accessCommandList", []);

      self.set("createStdAcl", []);
      self.set("createExtAcl", []);
      self.set("updateAcl", []);
      self.set("deleteAcl", []);
      self.set("commandStr", "");

      self.set("showActions", false);
      _ember['default'].run.schedule("afterRender", function () {
        var cval = "host=" + self.get('confCtrl.rval');
        self.store.getJSON("acheckacl/", cval).then(function (res) {
          self.set("model", res.data);
          self.setValueShow(self.get("model"));
          self.set("trigger", true);
          var temp = [],
              temp2 = [],
              temp3 = [];
          var flag = true;
          //d1["type"]="standard"
          //temp.push(JSON.parse(JSON.stringify(d1)))
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = Object.keys(res.data.standard)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var key = _step.value;

              if (key != "show" && res.data.standard[key]["entries"]) {
                flag = true;
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = Object.keys(res.data.standard[key]["entries"])[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var iter = _step3.value;

                    if (flag) {
                      res.data.standard[key]["entries"][iter]["name"] = key;
                      flag = false;
                    }
                    res.data.standard[key]["entries"][iter]["type"] = "standard";
                    res.data.standard[key]["entries"][iter]["show"] = true;
                    res.data.standard[key]["entries"][iter]["seqno"] = iter;
                    res.data.standard[key]["entries"][iter]["itmname"] = key;
                    res.data.standard[key]["entries"][iter]["sec_id"] = iter + key;
                    temp.push(res.data.standard[key]["entries"][iter]);
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                      _iterator3['return']();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          console.log(temp);
          self.set("stdlist", temp);
          //console.log(self.get("stdlist"))
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = Object.keys(res.data.extended)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var key = _step2.value;

              if (key != "show" && res.data.extended[key]["entries"]) {
                flag = true;
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                  for (var _iterator4 = Object.keys(res.data.extended[key]["entries"])[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var iter = _step4.value;

                    if (flag) {
                      res.data.extended[key]["entries"][iter]["name"] = key;
                      flag = false;
                    }
                    res.data.extended[key]["entries"][iter]["type"] = "extended";
                    res.data.extended[key]["entries"][iter]["itmname"] = key;
                    res.data.extended[key]["entries"][iter]["show"] = true;
                    res.data.extended[key]["entries"][iter]["seqno"] = iter;
                    res.data.extended[key]["entries"][iter]["sec_id"] = iter + key;
                    temp2.push(res.data.extended[key]["entries"][iter]);
                  }
                } catch (err) {
                  _didIteratorError4 = true;
                  _iteratorError4 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                      _iterator4['return']();
                    }
                  } finally {
                    if (_didIteratorError4) {
                      throw _iteratorError4;
                    }
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                _iterator2['return']();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          self.set("extlist", temp2);
          console.log(self.get("extlist"));
        }, function (err) {
          console.log("setup error");
          self.get('confCtrl').send("disconnect");
        });
      });
    },

    setValueShow: function setValueShow(model) {
      model.standard.show = true;
      model.extended.show = true;
    },

    actions: {

      Sendtoapproval: function Sendtoapproval() {
        var cval = this.get('confCtrl.cred');
        var arr = [];
        var self = this;
        arr.push(cval.host_plain);
        if (self.createStdAcl.length | self.createExtAcl.length | self.updateAcl.length | self.deleteAcl.length) {
          self.set("commandStr", "");
          if (self.createStdAcl.length | self.createExtAcl.length) {
            self.commandStr += "[ CREATE ]" + "<br/>";
            self.createStdAcl.forEach(function (item) {
              self.commandStr += "Standard - " + "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\", " + "address : \"" + item.addr + "/" + item.cidr + "\", " + "log : \"" + item.log + "\"<br/>";
            });
            self.createExtAcl.forEach(function (item) {
              self.commandStr += "Extended - " + "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\", " + "protocol : \"" + item.protocol + "\", " + "srcaddr : \"" + item.srcaddr + "/" + item.srccidr + "\", " + "srcoperator : \"" + item.srcoperator + "\", " + "srcport : \"" + item.srcport + "\", " + "dstaddr : \"" + item.dstaddr + "/" + item.dstcidr + "\", " + "dstoperator : \"" + item.dstoperator + "\", " + "dstport : \"" + item.dstport + "\", " + "log : \"" + item.log + "\"<br/>";
            });
          }
          if (self.updateAcl.length) {
            self.commandStr += "<br/>" + "[ UPDATE ]" + "<br/>";
            self.updateAcl.forEach(function (item) {
              if (item.type === 'updateStdAcl') {
                self.commandStr += "Standard - " + "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\", " + "address : \"" + item.srcaddr + "/" + item.srclen + "\"<br/>";
              }
              if (item.type === 'updateExtAcl') {
                self.commandStr += "Extended - " + "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\", " + "protocol : \"" + item.protocol + "\", " + "srcaddr : \"" + item.srcaddr + "/" + item.srclen + "\", " + "dstaddr : \"" + item.dstaddr + "/" + item.dstlen + "\"<br/>";
              }
            });
          }
          if (self.deleteAcl.length) {
            self.commandStr += "<br/>" + "[ DELETE ]" + "<br/>";
            self.deleteAcl.forEach(function (item) {
              if (item.type === 'deleteStdAcl') {
                self.commandStr += "Standard - " + "seqno : \"" + item.seqno + "\", " + "name : \"" + item.name + "\"<br/>";
              }
              if (item.type === 'deleteExtAcl') {
                self.commandStr += "Extended - " + "seqno : \"" + item.seqno + "\", " + "name : \"" + item.name + "\"<br/>";
              }
            });
          }
          (0, _netconfigUtilsValidation.customConfirm)("<h1>SEND TO APPROVAL ?</h1><br/><h3>- LIST OF ACTIONS -</h3>  <br/>" + self.commandStr, function () {
            var temp = [];
            temp.push(self.createStdAcl);
            temp.push(self.createExtAcl);
            temp.push(self.updateAcl);
            temp.push(self.deleteAcl);
            temp.forEach(function (element) {

              if (element.length) {
                var data = "router=" + JSON.stringify(arr) + "&config=" + JSON.stringify(element) + '&approver_email=' + cval.approver + '&approver_comment=' + cval.confComment + '&config_comment=' + cval.confComment + '&acltypewan=' + element[0].type + '&name=' + element[0].name;
                console.log(data);

                self.get('store').post('workflow/', data).then(function (resp) {
                  if (resp.data == null) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Invalid command!");
                    localStorage.setItem('status', 'error');
                    localStorage.setItem('resp', resp.data);
                  } else {

                    self.set("createStdAcl", []);
                    self.set("createExtAcl", []);
                    self.set("updateAcl", []);
                    self.set("deleteAcl", []);
                    self.set("commandStr", "");

                    self.set("showActions", false);
                    localStorage.setItem('resp', resp.data);
                    localStorage.setItem('status', 'success');
                    self.get('confCtrl').send("disconnect");
                    (0, _netconfigUtilsNotify.customNotify)("success", resp.data);
                  }
                }, function (err) {
                  (0, _netconfigUtilsNotify.customNotify)("error", "Failed to send for approval");
                });
                (0, _netconfigUtilsNotify.customNotify)('success', 'Sent to approval');
              }
            });
          });
        } else {
          (0, _netconfigUtilsNotify.customNotify)('error', 'Failed : No action is Detected');
        }
      },
      ShowAddAcc: function ShowAddAcc(param1, param2, param3) {
        console.log("ShowAddPrefix");
        var cval = this.get('confCtrl.rval');
        if (param3 !== "None") {
          this.set("Aclname", param3.name);
        } else {
          this.set("Aclname", false);
        }
        if (param1 && param2 === "standard") {
          this.set("std", true);
          this.set("ext", false);
        } else {
          this.set("std", false);
          this.set("ext", true);
        }

        var modal = document.getElementById('myModal');
        modal.style.display = 'block';
      },
      close: function close() {
        this.set("ext", false);
        this.set("std", false);
        $('form[name="prefixAdd"]')[0].reset();
        var modal = document.getElementById('myModal');
        modal.style.display = 'none';
      },

      astdacl: function astdacl() {
        //console.log("Submitting standard configuration")
        var temp = "";
        this.set('isSaving', true);
        var val = [],
            self = this;
        var cval = self.get('confCtrl.rval');
        var seqdata = [];
        seqdata.push({ 'seqno': $('input[name="seqno"]').val(),
          'action': $('select[name="action"]').val(),
          "log": $('select[name="log"]').val(),
          "addr": $('input[name="addr"]').val(),
          "cidr": $('input[name="cidr"]').val(),
          "aclname": $('input[name="aclname"]').val(),
          "acltype": $('input[name="acltype"]').val() });
        self.createStdAcl.push({ "type": "standardACL", "name": $('input[name="aclname"]').val(), "seqno": $('input[name="seqno"]').val(), "action": $('select[name="action"]').val(), "addr": $('input[name="addr"]').val(), "cidr": $('input[name="cidr"]').val(), "log": $('select[name="log"]').val() });
        self.set('isSaving', false);
        (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
        self.send('close');
        self.set("showActions", true);
        // var data = "&config="+JSON.stringify(seqdata)+"&aclname="+JSON.stringify($('input[name="aclname"]').val())+"&acltype="+JSON.stringify($('input[name="acltype"]').val());
        //console.log("Post std data:", data)
        console.log(self.createStdAcl);
        // this.get('store').post('astdacl/'+cval+'/', data).then(function(resp){
        //   self.set('isSaving', false)
        //   if(resp.data.status == "commited"){
        //     self.setPrefixList()
        //     customNotify('success', 'Configuration Applied')
        //   }else{         
        //     customNotify('error', 'Failed')
        //   }
        //   self.send('close')
        // }, function(err){
        //   self.set('isSaving', false)
        //   customNotify('error', 'Configuration failed!')
        //   self.send('close')
        // })
        // return false;
      },

      aextacl: function aextacl() {

        //console.log("Submitting extended configuration")
        var check = true;
        // $('.seqRow').each(function(i,e){
        //   if(!validateForm.validateSeq(e)){
        //     check = false
        //     return false
        //   }
        // })
        this.set('isSaving', true);
        var val = [],
            self = this;
        self.set("showActions", true);
        var seqdata = [];
        seqdata.push({ "seqno": $('input[name="seqno"]').val(),
          "action": $('select[name="action"]').val(),
          "protocol": $('select[name="protocol"]').val(),
          "srcaddr": $('input[name="srcaddr"]').val(),
          "srccidr": $('input[name="srccidr"]').val(),
          "srcoperator": $('select[name="srcoperator"]').val(),
          "srcport": $('input[name="srcport"]').val(),
          "dstaddr": $('input[name="dstaddr"]').val(),
          "dstcidr": $('input[name="dstcidr"]').val(),
          "dstoperator": $('select[name="dstoperator"]').val(),
          "dstport": $('input[name="dstport"]').val(),
          "log": $('select[name="log"]').val(),
          "acltype": $('input[name="acltype"]').val(),
          "aclname": $('input[name="aclname"]').val()
        });
        var cval = self.get('confCtrl.rval');
        var self = this,
            data = "&config=" + JSON.stringify(seqdata);
        self.createExtAcl.push({ "type": "extendedACL", "name": $('input[name="aclname"]').val(), "seqno": $('input[name="seqno"]').val(), "action": $('select[name="action"]').val(), "protocol": $('select[name="protocol"]').val(), "srcaddr": $('input[name="srcaddr"]').val(), "srccidr": $('input[name="srccidr"]').val(), "srcoperator": $('select[name="srcoperator"]').val(), "srcport": $('input[name="srcport"]').val(), "dstaddr": $('input[name="dstaddr"]').val(), "dstcidr": $('input[name="dstcidr"]').val(), "dstoperator": $('select[name="dstoperator"]').val(), "dstport": $('input[name="dstport"]').val(), "log": $('select[name="log"]').val() });
        console.log(self.createExtAcl);
        self.set('isSaving', false);
        self.set("showActions", true);
        (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
        self.send('close');
        // this.get('store').post('aextacl/'+cval+'/', data).then(function(resp){
        //   self.set('isSaving', false)
        //   if(resp.data.status == "commited"){
        //     self.setPrefixList()
        //     customNotify('success', 'Configuration Applied')
        //   }else{
        //     customNotify('error', 'Failed')
        //   }
        //   self.send('close')
        // }, function(err){
        //   self.set('isSaving', false)
        //   console.log(err)
        //   customNotify('error', 'Configuration failed!')
        //   self.send('close')
        // })
        console.log(seqdata);
        return true;
      },

      DeletePrefix: function DeletePrefix(param1, param2, param3, param4) {
        var cval = this.get('confCtrl.rval');
        var self = this;
        var data = {
          "name": param1,
          "seqno": param2,
          "method": "delete"
        };
        (0, _netconfigUtilsValidation.customConfirm)("Delete " + param1 + " seq-no:" + param2, function () {
          if (param3 === "stdlist") {
            self.deleteAcl.push({ "type": "deleteStdAcl", "name": param1, "seqno": param2 });
          } else if (param3 === "extlist") {
            self.deleteAcl.push({ "type": "deleteExtAcl", "name": param1, "seqno": param2 });
          }
          (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
          console.log(self.deleteAcl);
          document.getElementById(param4.sec_id).style.backgroundColor = "#FFFFCC";
          self.set("showActions", true);
          // self.store.post("delacl/"+cval+"/", data).then(function(res){
          //   console.log(res)
          //   if (res.data.status == "commited") {
          //       self.setPrefixList()
          //   }
          //   else {
          //     customNotify('error', res.data.status)
          //   }
          // }, function(err) {
          //   console.error(err)
          // })
        });
      },
      ShowValue: function ShowValue(param1) {
        console.log("ShowValue");
        if (param1.show) {
          _ember['default'].set(param1, "show", false);
        } else {
          _ember['default'].set(param1, "show", true);
        }
      },
      showDropDown: function showDropDown(itm) {
        if (itm.isProcessing) {
          return false;
        }
        _ember['default'].set(itm, 'isShow', itm.isShow ? false : true);
      },
      updateStatus: function updateStatus(itm, typ, acl) {
        console.log(itm);
        if (itm.action === typ) {
          (0, _netconfigUtilsNotify.customNotify)('error', 'Current action already in ' + typ + '. Please double check once.');
          _ember['default'].set(itm, 'isShow', itm.isShow ? false : true);
          return false;
        } else {
          var credentials = this.get('confCtrl.cred');
          var cval = this.get('confCtrl.rval');
          var storage_dict = {
            "seqno": itm.seqno,
            "method": "update",
            "action": typ,
            "addr": itm.srcaddr,
            "prefixlen": itm.srclen,
            "name": itm.itmname,
            "acl": acl
          },
              self = this;
          if (acl === 'ext') {
            // storage_dict["dst"]=itm.dstaddr
            // storage_dict["dstlen"]=itm.dstlen
            // storage_dict["protocol"] = itm.protocol
            var ext_temp = {};
            ext_temp = { "type": "updateExtAcl", "name": itm.itmname, "seqno": itm.seqno, "action": typ, "protocol": itm.protocol, "srcaddr": itm.srcaddr, "srclen": itm.srclen, "dstaddr": itm.dstaddr, "dstlen": itm.dstlen };
            if (itm.other === "log") {
              ext_temp["log"] = "True";
            } else {
              ext_temp["log"] = "False";
            }
            self.updateAcl.push(ext_temp);
          } else if (acl === 'std') {
            var std_temp = {};
            std_temp = { "type": "updateStdAcl", "name": itm.itmname, "seqno": itm.seqno, "action": typ, "srcaddr": itm.srcaddr, "srclen": itm.srclen };
            if (itm.log === true) {
              std_temp["log"] = "True";
            } else {
              std_temp["log"] = "False";
            }
            self.updateAcl.push(std_temp);
          }
          console.log(self.updateAcl);
          (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
          self.set("showActions", true);
          document.getElementById(itm.sec_id).style.backgroundColor = "#FFFFCC";
          // var data = JSON.parse(JSON.stringify(storage_dict));
          // data['username']=credentials.username
          // data['password']=credentials.password
          // data['enpwd']=credentials.enpwd
          _ember['default'].set(itm, 'isProcessing', false);
          _ember['default'].set(itm, 'isShow', false);
          // self.store.post("updateacl/"+cval+"/", data).then(function(res){
          //       if(res.data.status=="commited"){
          //                 customNotify('success', 'Action updated successfully');
          //                 Ember.setProperties(itm, {'action': data.action, isProcessing: false});
          //       }else{
          //                 Ember.setProperties(itm, {isProcessing: false});
          //                 customNotify('error', 'Unable to update action. Please double check once.');
          //       }
          // });
        }
      }
    }

  });
});
define('netconfig/controllers/conf/arista/armap/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({

    store: _ember['default'].inject.service('store'),
    confCtrl: _ember['default'].inject.controller('conf'),
    rmap: null,
    avalue: [{ value: "permit", label: "permit" }, { value: "deny", label: "deny" }],
    show: true,
    showInfo: false,
    prefix: [],
    commandList: [],
    flag: false,
    showActions: false,
    createRmap: [],
    updateRmap: [],
    deleteRmap: [],
    commandStr: "",

    setRouterMapList: function setRouterMapList() {
      var self = this;
      self.set("commandStr", "");
      self.set("createRmap", []);
      self.set("updateRmap", []);
      self.set("deleteRmap", []);
      self.set("commandList", []);
      self.set("showActions", false);
      _ember['default'].run.schedule("afterRender", function () {
        var cval = self.get('confCtrl.rval');
        var cred = self.get('confCtrl.cred');
        self.store.getJSON('rmlist/' + cval + '/').then(function (res) {
          for (var i = 0; i < res.data.length; i++) {
            res.data[i].show = true;
            console.log("i value");
            for (var j = 0; j < res.data[i].val.length; j++) {
              console.log(res.data[i].val[j]);
              res.data[i].val[j].show = false;
              res.data[i].prefix = [];
            }
          }
          self.set('rmap', res.data);
          console.log(self.get('rmap'));
        }, function (err) {
          self.get('confCtrl').send("disconnect");
        });
      });
    },

    getPrefixList: function getPrefixList(prefix, event) {
      console.log("getPrefixList function");
      console.log(event);
      var self = this;
      var cval = this.get('confCtrl.rval');
      var data = {
        host: cval,
        name: prefix
      };
      self.store.getJSON('aprefix/', data).then(function (res) {
        $("#prefixInfo").html(JSON.stringify(res.data));
        $('#prefixInfo').css({ left: $(event.target).offset().left - 30, top: $(event.target).offset().top - 30 }).show();
      });
    },

    setPrefix: function setPrefix(arg1) {
      if (arg1.value.match.length > 0) {
        var self = this;
        var cval = this.get('confCtrl.rval');
        var data = {
          host: cval,
          name: arg1.value.match[0].split(" ")[3]
        };
        self.store.getJSON('aprefix/', data).then(function (res) {
          _ember['default'].set(arg1, "prefix", JSON.stringify(res.data));
        }, function (err) {
          //self.get('confCtrl').send("disconnect")
        });
      }
    },

    actions: {
      DeleteRoute: function DeleteRoute(param1, param2) {
        var cval = this.get('confCtrl.rval');
        var self = this;
        console.log(param2);
        var seqdata = [];
        var data = {
          "seqno": param1.seq,
          "action": param1.action,
          "name": param2.name
        };
        // "method":"delete"
        seqdata.push(data);
        var payload = "&config=" + JSON.stringify(seqdata);
        console.log(seqdata);
        (0, _netconfigUtilsValidation.customConfirm)("Delete " + param2.name + " " + param1.seq, function () {
          self.deleteRmap.push({ "seqno": param1.seq, "action": param1.action, "name": param2.name, 'type': 'deleteRmap' });
          console.log("DELETE");
          console.log(self.deleteRmap);
          (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
          document.getElementById(param2.name).style.backgroundColor = "#FFFFCC";
          self.set("showActions", true);
          self.send("close");
          // self.store.post("addroute/"+cval+"/", payload).then(function(res){
          //   if (res.data.status == "commited") {
          //     self.setRouterMapList()
          //     self.send("close")
          //   }
          //   else {
          //     customNotify('error', res.data.status)
          //   }
          // }, function(err) {
          //   console.error(err)
          // })
        });
      },
      addRoute: function addRoute() {
        var self = this;
        var data = $('form[name="prefixAdd"]').serialize();
        var cval = this.get('confCtrl.rval');
        var seqdata = [];
        seqdata.push({ "seqno": $('input[name="seqno"]').val(),
          "action": $('select[name="action"]').val(),
          "name": $('input[name="name"]').val()
        });
        // "method": "add"
        self.createRmap.push({ 'seqno': $('input[name="seqno"]').val(), 'action': $('select[name="action"]').val(), 'name': $('input[name="name"]').val(), 'type': 'createRmap' });
        console.log(self.createRmap);
        self.send("close");
        self.set("showActions", true);
        (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
        // data = "&config="+JSON.stringify(seqdata);
        // this.store.post("addroute/"+cval+"/", data).then(function(res){
        //   if (res.data.status == "commited") {
        //     self.setRouterMapList()
        //     self.send("close")
        //   }
        //   else {
        //     customNotify('error', res.data.status)
        //   }
        // }, function(err) {
        //   console.error(err)
        // })
      },
      ShowAddRoute: function ShowAddRoute(param1, param2) {
        console.log("ShowAddPrefix");
        var cval = this.get('confCtrl.rval');
        this.set("aldname", param1);
        this.set("showname", param2);
        var modal = document.getElementById('myModal');
        modal.style.display = "block";
      },

      close: function close() {
        $('form[name="prefixAdd"]')[0].reset();
        var modal = document.getElementById('myModal');
        modal.style.display = "none";
      },

      updateARM: function updateARM(arg1, arg2) {
        var cval = this.get('confCtrl.rval');
        var self = this;
        var avalue = $('select[name="' + arg1.name + arg2.seq + '"]').val();
        var data = {
          "name": arg1.name,
          "seq": arg2.seq,
          "action": avalue,
          "router": cval
        };
        document.getElementById(arg1.name).style.backgroundColor = "#FFFFCC";
        self.updateRmap.push({ 'seqno': arg2.seq, 'action': avalue, 'name': arg1.name, 'type': 'updateRmap' });
        console.log("UPDATE");
        console.log(self.updateRmap);
        self.set("showActions", true);

        (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
        //  this.get('store').post('rmupdate/', data).then(function(res){
        //     customNotify('success', 'Updated');
        //  }, function(err){
        //     customNotify('success', err);
        //     self.get('confCtrl').send("disconnect")
        //  });
      },
      OpenPop: function OpenPop() {
        $('form[name="prefixAddNew"]')[0].reset();
        var llist = [];
        llist = this.commandList;
        this.set("applist", llist);

        var modal = document.getElementById('myModalNew');
        modal.style.display = "block";
      },
      closeApp: function closeApp() {
        $('form[name="prefixAddNew"]')[0].reset();
        var modal = document.getElementById('myModalNew');
        modal.style.display = "none";
      },
      Sendtoapprove: function Sendtoapprove() {
        var cval = this.get('confCtrl.cred');
        var arr = [];
        var self = this;
        arr.push(cval.host_plain);
        if (self.createRmap.length | self.updateRmap.length | self.deleteRmap.length) {
          self.set("commandStr", "");
          if (self.createRmap.length) {
            self.commandStr += "[ CREATE ]" + "<br/>";
            self.createRmap.forEach(function (item) {
              self.commandStr += "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\"<br/>";
            });
          }
          if (self.updateRmap.length) {
            self.commandStr += "<br/>" + "[ UPDATE ]" + "<br/>";
            self.updateRmap.forEach(function (item) {
              self.commandStr += "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\"<br/>";
            });
          }
          if (self.deleteRmap.length) {
            self.commandStr += "<br/>" + "[ DELETE ]" + "<br/>";
            self.deleteRmap.forEach(function (item) {
              self.commandStr += "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\"<br/>";
            });
          }
          (0, _netconfigUtilsValidation.customConfirm)("<h1>SEND TO APPROVAL ?</h1><br/><h3>- LIST OF ACTIONS -</h3>  <br/> <h4>" + self.commandStr + "</h4>", function () {
            var temp = [];
            temp.push(self.createRmap);
            temp.push(self.updateRmap);
            temp.push(self.deleteRmap);

            temp.forEach(function (element) {
              if (element.length) {
                var data = "router=" + JSON.stringify(arr) + "&config=" + JSON.stringify(element) + '&approver_email=' + cval.approver + '&approver_comment=' + cval.confComment + '&rmaptype=' + element[0].type + '&name=' + element[0].name + '&config_comment=' + cval.confComment;
                console.log(data);

                self.get('store').post('workflow/', data).then(function (resp) {
                  if (resp.data == null) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Invalid command!");
                    localStorage.setItem('resp', resp.data);
                    localStorage.setItem('status', 'error');
                  } else {
                    self.set("createRmap", []);
                    self.set("updateRmap", []);
                    self.set("deleteRmap", []);
                    self.set("showActions", false);
                    self.set("commandStr", "");

                    localStorage.setItem('resp', resp.data);
                    localStorage.setItem('status', 'success');
                    self.get('confCtrl').send("disconnect");
                    (0, _netconfigUtilsNotify.customNotify)("success", resp.data);
                  }
                }, function (err) {
                  (0, _netconfigUtilsNotify.customNotify)("error", "Failed to send for approval");
                });
                (0, _netconfigUtilsNotify.customNotify)('success', 'Sent to approval');
              }
            });
          });
        } else {
          (0, _netconfigUtilsNotify.customNotify)('error', 'Failed : No action is Detected');
        }
      },
      showOut: function showOut(arg1) {
        if (arg1.show) {
          _ember['default'].set(arg1, "show", false);
        } else {
          this.setPrefix(arg1);
          _ember['default'].set(arg1, "show", true);
        }
      },
      showMap: function showMap(arg1) {
        if (arg1.show) {
          _ember['default'].set(arg1, "show", false);
        } else {
          _ember['default'].set(arg1, "show", true);
        }
      }
    }
  });
});
define('netconfig/controllers/conf/arista/prefixlist/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    store: _ember['default'].inject.service('store'),
    confCtrl: _ember['default'].inject.controller('conf'),
    ShowAddPrefix: false,
    PrefixList: "",
    isProcessing: false,
    isShow: false,
    prefixCommandList: [],
    showActions: false,
    createPrefix: [],
    deletePrefix: [],
    updatePrefix: [],
    commandStr: "",
    setPrefixList: function setPrefixList() {
      console.log("serPrefixList");
      var self = this;
      self.set("prefixCommandList", []);
      self.set("createPrefix", []);
      self.set("deletePrefix", []);
      self.set("updatePrefix", []);
      self.set("commandStr", "");
      self.set("showActions", false);
      _ember['default'].run.schedule("afterRender", function () {
        var cval = self.get('confCtrl.rval');
        self.store.getJSON("aprefixlist/" + cval + "/").then(function (res) {
          self.set("model", res);
          self.setValueShow(self.get("model"));
        }, function (err) {
          console.log("setup error");
          self.get('confCtrl').send("disconnect");
        });
      });
    },

    setValueShow: function setValueShow(model) {
      for (var i = 0; i < model.data.length; i++) {
        model.data[i].show = true;
      }
    },

    actions: {
      ShowAddPrefix: function ShowAddPrefix(param1, param2) {
        console.log("ShowAddPrefix");
        var cval = this.get('confCtrl.rval');
        this.set("PrefixList", param1);
        this.set("showname", param2);
        var modal = document.getElementById('myModal');
        modal.style.display = "block";
      },
      close: function close() {
        $('form[name="prefixAdd"]')[0].reset();
        var modal = document.getElementById('myModal');
        modal.style.display = "none";
      },
      addPrefix: function addPrefix(param1) {
        var self = this;
        var data = $('form[name="prefixAdd"]').serialize();
        var cval = this.get('confCtrl.rval');
        var trigger = data.trigger;
        self.createPrefix.push({ "seqno": $('input[name="seq-no"]').val(), "name": $('input[name="name"]').val(), "action": $('select[name="action"]').val(), "prefix": $('input[name="prefix"]').val(), 'type': 'createPrefix' });
        self.send("close");
        self.set("showActions", true);
        (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
        // this.store.post("aprefixlist/"+cval+"/", data).then(function(res){
        //   if (res.data.status == "commited") {
        //     self.send("close")
        //     if(trigger==false){
        //     self.get("PrefixList.value").addObject(res.data.obj)
        //     }
        //     else{
        //       self.setPrefixList()
        //     }
        //   }
        //   else {
        //     customNotify('error', res.data.status)
        //   }
        // }, function(err) {
        //   console.error(err)
        // })
      },
      SendToApprove: function SendToApprove() {
        var cval = this.get('confCtrl.cred');
        var arr = [];
        var self = this;
        arr.push(cval.host_plain);
        if (self.createPrefix.length | self.updatePrefix.length | self.deletePrefix.length) {
          self.set("commandStr", "");
          if (self.createPrefix.length) {
            self.commandStr += "[ CREATE ]" + "<br/>";
            self.createPrefix.forEach(function (item) {
              self.commandStr += "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\", " + "prefix : \"" + item.prefix + "\"<br/>";
            });
          }
          if (self.updatePrefix.length) {
            self.commandStr += "<br/>" + "[ UPDATE ]" + "<br/>";
            self.updatePrefix.forEach(function (item) {
              self.commandStr += "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\", " + "prefix : \"" + item.prefix + "\"<br/>";
            });
          }
          if (self.deletePrefix.length) {
            self.commandStr += "<br/>" + "[ DELETE ]" + "<br/>";
            self.deletePrefix.forEach(function (item) {
              self.commandStr += "seqno : \"" + item.seqno + "\", " + "action : \"" + item.action + "\", " + "name : \"" + item.name + "\", " + "prefix : \"" + item.prefix + "\"<br/>";
            });
          }
          (0, _netconfigUtilsValidation.customConfirm)("<h1>SEND TO APPROVAL ?</h1><br/><h3>- LIST OF ACTIONS -</h3>  <br/> <h4>" + self.commandStr + "</h4>", function () {
            var temp = [];
            temp.push(self.createPrefix);
            temp.push(self.updatePrefix);
            temp.push(self.deletePrefix);
            temp.forEach(function (element) {
              if (element.length) {
                var postdata = "router=" + JSON.stringify(arr) + "&config=" + JSON.stringify(element) + '&approver_email=' + cval.approver + '&approver_comment=' + cval.confComment + '&config_comment=' + cval.confComment + '&name=' + element[0].name + '&prefixtype=' + element[0].type;
                console.log(postdata);

                self.get('store').post('workflow/', postdata).then(function (resp) {
                  if (resp.data == null) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Invalid command!");
                    localStorage.setItem('resp', resp.data);
                    localStorage.setItem('status', 'error');
                  } else {
                    self.set("createPrefix", []);
                    self.set("updatePrefix", []);
                    self.set("deletePrefix", []);
                    self.set("commandStr", "");

                    self.set("showActions", false);

                    localStorage.setItem('resp', resp.data);
                    localStorage.setItem('status', 'success');
                    self.get('confCtrl').send("disconnect");

                    (0, _netconfigUtilsNotify.customNotify)("success", resp.data);
                  }
                }, function (err) {
                  (0, _netconfigUtilsNotify.customNotify)("error", "Failed to send for approval");
                });
                (0, _netconfigUtilsNotify.customNotify)('success', 'Sent to approval');
              }
            });
          });
        } else {
          (0, _netconfigUtilsNotify.customNotify)('error', 'Failed : No action is Detected');
        }
      },
      DeletePrefix: function DeletePrefix(param1, param2) {
        var cval = this.get('confCtrl.rval');
        var self = this;
        var data = {
          "seq-no": param1.seq,
          "action": param1.action,
          "prefix": param1.prefix,
          "name": param2.name,
          "method": "delete"
        };
        (0, _netconfigUtilsValidation.customConfirm)("Delete " + param2.name + " " + param1.prefix, function () {
          self.deletePrefix.push({ "seqno": param1.seq, "name": param2.name, "action": param1.action, "prefix": param1.prefix, 'type': 'deletePrefix' });
          (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
          self.send("close");
          document.getElementById(param1.sec_id).style.backgroundColor = "#FFFFCC";
          self.set("showActions", true);
          // self.store.post("aprefixlist/"+cval+"/", data).then(function(res){
          //   console.log(res)
          //   if (res.data.status == "commited") {
          //     param2.value.removeObject(param1)
          //     if(param2.value.length==0){
          //       self.setPrefixList()
          //     }
          //   }
          //   else {
          //     customNotify('error', res.data.status)
          //   }
          // }, function(err) {
          //   console.error(err)
          // })
        });
      },
      ShowValue: function ShowValue(param1) {
        console.log("ShowValue");
        if (param1.show) {
          _ember['default'].set(param1, "show", false);
        } else {
          _ember['default'].set(param1, "show", true);
        }
      },
      showDropDown: function showDropDown(itm) {
        if (itm.isProcessing) {
          return false;
        }
        _ember['default'].set(itm, 'isShow', itm.isShow ? false : true);
      },
      updateStatus: function updateStatus(itm, typ, pre_name) {
        var self = this;
        if (itm.action === typ) {
          (0, _netconfigUtilsNotify.customNotify)('error', 'Current action already in ' + typ + '. Please double check once.');
          _ember['default'].set(itm, 'isShow', itm.isShow ? false : true);
          return false;
        } else {
          var credentials = this.get('confCtrl.cred');
          var cval = this.get('confCtrl.rval');
          var storage_dict = {
            "seq-no": itm.seq,
            "method": "delete",
            "action": itm.action,
            "prefix": itm.prefix,
            "name": pre_name
          },
              self = this;
          var data = JSON.parse(JSON.stringify(storage_dict));
          data['username'] = credentials.username;
          data['password'] = credentials.password;
          data['enpwd'] = credentials.enpwd;
          _ember['default'].setProperties(itm, { isProcessing: false });
          _ember['default'].set(itm, 'isShow', false);
          self.updatePrefix.push({ "seqno": itm.seq, "prefix": itm.prefix, "name": pre_name, "action": typ, 'type': 'updatePrefix' });
          console.log(self.updatePrefix);
          document.getElementById(itm.sec_id).style.backgroundColor = "#FFFFCC";
          (0, _netconfigUtilsNotify.customNotify)('success', 'Action added !!! Click "Check Current Actions" to view the list of actions');
          self.send("close");
          self.set("showActions", true);
          // this.store.post("aprefixlist/"+cval+"/", data).then(function(res){
          //     if(res.data.status === "not commited"){
          //         Ember.setProperties(itm, {isProcessing: false});
          //         customNotify('error', 'Internal Server Error');
          //     }else{
          //         data.method = 'add';
          //         data.action = typ;
          //         self.store.post("aprefixlist/"+cval+"/", data).then(function(res){
          //             if(res.data.status=="commited"){
          //                 customNotify('success', 'Action updated successfully');
          //                 Ember.setProperties(itm, {'action': data.action, isProcessing: false});
          //             }else{
          //                 Ember.setProperties(itm, {isProcessing: false});
          //                 customNotify('error', 'Unable to update action. Please double check once.');
          //             }
          //         });
          //     }

          // })
        }
      }
    }

  });
});
define('netconfig/controllers/conf/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Controller.extend({
    store: _ember['default'].inject.service("store"),
    confCtrl: _ember['default'].inject.controller('conf'),
    selectedValue: null,
    isSaving: false,
    confSessId: null,
    rtypes: [{ value: "arista", label: "arista" }, { value: "juniper", label: "juniper" }],
    dcs: [],
    routers: [],
    approvers: [],
    rtype: "arista",
    init: function init() {

      var self = this;
      if (localStorage.getItem('resp')) {
        (0, _netconfigUtilsNotify.customNotify)(localStorage.getItem('status'), localStorage.getItem('resp'));
      }
      localStorage.removeItem('resp');
      localStorage.removeItem('status');
      _ember['default'].run.schedule("afterRender", function () {
        var cval = $('select[name="router"]').val();
        self.set("selectedValue", cval);
      });
    },

    setDC: function setDC(arg1) {
      console.log("setdc");
      console.log(arg1);
      var temparr = [];
      var sel = this;
      arg1.data.forEach(function (a, b) {
        if (b === 0) {
          sel.set("dcname", a.attributes.name);
        }
        var temp = {};
        temp["value"] = a.attributes.name;
        temp["label"] = a.attributes.name;
        temparr.addObject(temp);
      });
      console.log(temparr);
      this.set("dcs", temparr);
      _ember['default'].run.later(function () {
        $('select[name="dc"]').trigger('chosen:updated');
      });
    },

    actions: {

      routerChange: function routerChange() {
        var cval = $('select[name="router"]').val();
        this.set("selectedValue", cval);
      },

      changeDC: function changeDC() {
        this.set('confCtrl.rtype', $('select[name="rtype"]').val());
        var dc = $('select[name="dc"]').val();
        var temp = [];
        var self = this;
        this.get('content').forEach(function (a, b) {
          if (a.dc == dc && a.deviceinfo.vendor.toLowerCase() == self.get('rtype')) {
            temp.addObject(a);
          }
        });
        this.set("routers", temp);
        _ember['default'].run.later(function () {
          $('select[name="router"]').trigger('chosen:updated');
          self.send("routerChange");
        });
      },

      changeRType: function changeRType() {
        this.set('confCtrl.rtype', $('select[name="rtype"]').val());
        this.init();
        this.set('routers', []);
        this.set('approvers', []);
        var temp = [];
        var self = this;
        this.get('content').forEach(function (a, b) {
          if (a.deviceinfo.vendor.toLowerCase() == self.get('rtype')) {
            temp.addObject(a);
          }
        });
        console.log("temp");
        console.log(temp);
        this.set("routers", temp);
        this.send("changeDC");
      },

      getNode: function getNode() {
        console.log("transition to conf/arista.");
        this.set('isSaving', true);
        $("form.conf-form .btn.btn-primary").css("width", "40%");
        var self = this;
        _ember['default'].Logger.info(this.selectedValue);
        this.set('confCtrl.rval', this.selectedValue);
        var data = $('form[name="getnode"]').serialize();

        console.log("DATA SWITCH");
        console.log(data);
        if ($('input[name="config_comment"]').val() == "" | $('input[name="username"]').val() == "" | $('input[name="password"]').val() | $('input[name="enpwd"]').val()) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter all the values to login");
          this.set('isSaving', false);
          return false;
        }
        var appusername = localStorage.getItem('appuser');

        var storage = {
          host: JSON.stringify($('select[name="router"]').val()),
          host_plain: $('select[name="router"]').val(),
          username: $('input[name="username"]').val(),
          password: $('input[name="password"]').val(),
          enpwd: $('input[name="enpwd"]').val(),
          // approver:$('select[name="approver_email"]').val(),
          confComment: $('input[name="config_comment"]').val()
        };
        self.set("confCtrl.isAdmin", self.get("isAdminAccount"));
        if (self.get("isAdminAccount")) {
          storage["approver"] = appusername;
        } else {
          storage["approver"] = $('select[name="approver_email"]').val();
        }

        this.set('confCtrl.cred', storage);
        console.log("Get node function called.");
        data = data + "&action=connect";
        this.store.post('aconf/', data).then(function (res) {
          if (res.data.status == "connected") {
            self.set('confCtrl.connected', true);
            self.set('isSaving', false);
            self.get('router').transitionTo("conf.arista.armap");
            self.setProperties({ 'confCtrl.isRunningTimer': true, 'confCtrl.timerObj.timer': '10:00', 'confCtrl.timerObj.duration': 60 * 10 });
            self.get('confCtrl').send('startTimer');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', res.data.status);
            self.set('isSaving', false);
          }
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Unable to connect.");
          self.set('isSaving', false);
        });
      },

      getConf: function getConf() {
        this.set('isSaving', true);
        $("form.conf-form .btn.btn-primary").css("width", "50%");
        var self = this;
        console.log(this.selectedValue);
        this.set('confCtrl.rval', this.selectedValue);
        var data = $('form[name="getconf"]').serialize();
        data = data + "&action=connect";
        this.store.getJSON('cc_session/', data).then(function (res) {
          if (res.data.status == "connected") {
            self.set('confSessId', res.data.conf_sessoin_id);
            self.set('confCtrl.connected', true);
            self.set('isSaving', false);
            self.get('router').transitionTo('conf.juniper.prefixlist');
            self.setProperties({ 'confCtrl.isRunningTimer': true, 'confCtrl.timerObj.timer': '10:00', 'confCtrl.timerObj.duration': 60 * 10 });
            self.get('confCtrl').send('startTimer');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', res.data);
            self.set('isSaving', false);
          }
        }, function (err) {
          console.log("Not success.");
        });
      }
    }
  });
});
define("netconfig/controllers/conf/juniper/index", ["exports"], function (exports) {});
define('netconfig/controllers/conf/juniper/policyoption/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({

        store: _ember['default'].inject.service('store'),
        confCtrl: _ember['default'].inject.controller('conf'),
        policyOption: [],

        setShow: function setShow() {
            for (var i = 0; i < this.policyOption["policy-statement"].length; i++) {
                _ember['default'].set(this.policyOption["policy-statement"][i], "show", true);
                this.setEdit(this.policyOption["policy-statement"][i]);
            }
        },

        setEdit: function setEdit(param1) {
            if (param1.term !== undefined) {
                for (var i = 0; i < param1.term.length; i++) {
                    _ember['default'].set(param1.term[i], "edit", false);
                    _ember['default'].set(param1.term[i], "show", false);
                    _ember['default'].set(param1.term[i], "info", JSON.stringify(param1.term[i], undefined, 4));
                }
            }
        },

        setPolicyOption: function setPolicyOption() {
            var self = this;
            _ember['default'].run.schedule("afterRender", function () {
                var cval = self.get('confCtrl.rval');
                self.store.getJSON('policyops/' + cval + '/').then(function (res) {
                    self.set("policyOption", res);
                    self.setShow();
                }, function (err) {
                    self.get('confCtrl').send("disconnect");
                });
            });
        },

        actions: {
            makeCommit: function makeCommit(param1, param2) {
                console.log("MakeCommit");
                console.log(param1, param2);
            }
        }

    });
});
define('netconfig/controllers/conf/juniper/prefixlist/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({

    store: _ember['default'].inject.service('store'),
    confCtrl: _ember['default'].inject.controller('conf'),
    selectedId: null,
    prefixlist: [],
    isShowData: false,
    isShowTrace: false,
    confText: "",
    diffText: "",
    isSaving: false,
    selectList: null,
    selectPrefix: null,
    isShowAddPrefix: false,
    addInput: [],
    addprefixForm: false,
    commitPrefixForm: false,
    addList: [],

    setPrefix: function setPrefix() {
      var self = this;
      _ember['default'].run.schedule("afterRender", function () {
        var cval = self.get('confCtrl.rval');
        self.store.getJSON('prefix/' + cval + '/').then(function (res) {
          self.set('prefixlist', res);
        }, function (err) {
          console.log("setup error");
          self.get('confCtrl').send("disconnect");
        });
      });
    },

    addPrefix: function addPrefix() {
      for (var i = 0; i < this.addList.length; i++) {
        this.selectList.prefixlist.addObject(this.addList[i]);
      }
    },

    actions: {

      routerChange: function routerChange() {
        this.selectedId = $('select[name="apiPrefix"]').val();
      },

      showPrefix: function showPrefix() {
        this.set('isShowData', true);
      },

      setShown: function setShown(item) {
        if (item.isShowData) {
          _ember['default'].set(item, 'isShowData', false);
        } else {
          _ember['default'].set(item, 'isShowData', true);
        }
      },

      delPrefix: function delPrefix(param, param1) {
        this.set('isShowTrace', true);
        var self = this;
        this.selectList = param1;
        this.selectPrefix = param;

        var data = {
          prefixName: param1.name,
          prefix: param,
          router: self.get('confCtrl.rval')
        };

        this.store.getJSON('prefix_del_diff/', data).then(function (res) {
          self.set('confText', res.data.ctext);
          self.set('diffText', res.data.diff);
        }, function (err) {
          console.log("del prefix error.");
          self.get('confCtrl').send("disconnect");
        });
      },

      hideTraceRoute: function hideTraceRoute() {
        this.set('isShowTrace', false);
      },

      delCommit: function delCommit() {
        this.set('isSaving', true);
        var self = this;
        var formArray = $('form[name="delPrefix"]').serializeArray();
        var data = {};

        for (var i = 0; i < formArray.length; i++) data[formArray[i].name] = formArray[i].value;

        data["confText"] = this.confText;
        data["diffText"] = this.diffText;
        data["host"] = self.get('confCtrl.rval');

        this.get('store').post('makecommit/', data).then(function (res) {
          self.set('isSaving', false);
          if (res) {
            self.set('isShowTrace', false);
            self.selectList.prefixlist.removeObject(self.selectPrefix);
          }
        }, function (err) {
          self.set('isSaving', false);
          //customNotify('success', 'Unable to add Router Profile');
          console.log(err);
        });
      },
      showAddPrefix: function showAddPrefix(list) {
        this.setProperties({ 'isShowAddPrefix': true, commitPrefixForm: false, addprefixForm: true, 'selectList': list, addInput: [] });
      },
      hideAddPrefix: function hideAddPrefix() {
        this.set('isShowAddPrefix', false);
      },

      addInputRow: function addInputRow() {
        this.get('addInput').addObject({ 'id': '2132' });
      },

      delInputRow: function delInputRow(item) {
        var inptData = this.get('addInput');
        inptData.removeObject(item);
        console.log("del row called.");
      },

      getAddDiff: function getAddDiff() {

        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="delPrefix"]'))) {
          return false;
        }

        var self = this;
        var data = {};
        var formArray = $('form[name="delPrefix"]').serializeArray();
        var pList = [];

        for (var i = 0; i < formArray.length; i++) {
          pList.addObject(formArray[i].value);
        }

        this.set('addList', pList);
        data["router"] = self.get('confCtrl.rval');
        data["prefix"] = JSON.stringify(pList);
        data["prefixName"] = this.selectList.name;

        this.store.getJSON('prefix_add_diff/', data).then(function (res) {
          if (res.data.diff != null) {
            self.set('confText', res.data.ctext);
            self.set('diffText', res.data.diff);
            self.set('addprefixForm', false);
            self.set('commitPrefixForm', true);
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "diff is null");
          }
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', err.errors);
          self.get('confCtrl').send("disconnect");
        });
      },

      addCommit: function addCommit() {
        console.log("add commit function");
        this.set('isSaving', true);
        var self = this;
        var formArray = $('form[name="delPrefix"]').serializeArray();
        var data = {};

        for (var i = 0; i < formArray.length; i++) data[formArray[i].name] = formArray[i].value;

        data["confText"] = this.confText;
        data["diffText"] = this.diffText;
        data["host"] = self.get('confCtrl.rval');
        console.log(data);

        this.get('store').post('makecommit/', data).then(function (res) {
          self.set('isSaving', false);
          self.set('commitPrefixForm', false);
          self.set('isShowAddPrefix', false);
          self.addPrefix();
        }, function (err) {
          self.set('isSaving', false);
          console.log(err);
        });
      }
    }
  });
});
define('netconfig/controllers/cvx', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        showInfo: false,
        changingPoll: false,
        cvxData: {},
        isShowloading: false,
        polid: null,
        actions: {
            stopPoll: function stopPoll() {
                $.xhrPool.abortAll();
                clearInterval(this.get('polid'));
            },
            showCMenus: function showCMenus(row) {
                console.log('heyyyy', row);
                var self = this;
                var ele = '<div class="cvx-context-menu"><ul><li data-name="show cvx">show cvx</li><li data-name="address-table received">address-table received</li><li data-name="address-table advertised">address-table advertised</li><li data-name="vni received">vni received</li><li data-name="vni advertised">vni advertised</li><li data-name="status">status</li><li data-name="terminal">Terminal</li></ul></div>';

                var cele = $('.table tr[ids="' + row.host + '"]').find('.cvx-vm');
                $('.cvx-context-menu').remove();
                $(cele).append(ele);
                $('.cvx-context-menu li').click(function () {
                    var cname = $(this).attr('data-name');
                    $('.cvx-context-menu').remove();
                    if (cname === 'terminal') {
                        var termWindow = window.open(window.APP_META.xterm_url + '/terminal?host=' + row.host + '&user=', "", "toolbar=no,scrollbars=yes,resizable=yes,top=200,left=200,width=1300,height=540");
                        termWindow.document.title = "Terminal of " + elm['name'] + "(" + elm['host'] + ")";
                    } else {
                        $('.cvx-popup').removeClass('dnoneImp');
                        self.set('isShowloading', true);
                        self.get('store').getJSON('showcvx', { host: row.host, cmd: cname }).then(function (res) {
                            var cdata = self.get('cvxData');
                            _ember['default'].setProperties(cdata, { 'data': res.data[0], name: cname });
                            self.set('isShowloading', false);
                        });
                    }
                });
            },
            closecvs: function closecvs() {
                $('.cvx-popup').addClass('dnoneImp');
            },
            showInfo: function showInfo(param1, param2) {
                console.log("showInfo");
                var row = $('.table tr[ids="' + param2 + '"]');
                this.set("showInfo", true);
                if (typeof param1 == 'string') {
                    this.set("rstatus", param1);
                } else {
                    this.set("rstatus", param1.status_msg);
                }
                _ember['default'].run.next(function () {
                    $('.advlst').slideDown('fast').css({ top: row.offset().top + 10, right: "10px" });
                });
            },
            hideInfo: function hideInfo() {
                this.set("showInfo", false);
            },
            updatePodData: function updatePodData() {
                var podname = $('select[name="podtype"]').val();
                var catgs = ['CVX'],
                    pods = [],
                    result = [];
                if (podname == 'All') {
                    pods = Object.assign([], this.get('pod'));
                    pods.splice(0, 1);
                    console.log(pods);
                } else {
                    pods.push(podname);
                }
                var allContent = this.get('allcontent');
                for (var i = 0; i < allContent.length; i++) {
                    if (catgs.indexOf(allContent[i]['category']) > -1 && pods.indexOf(allContent[i]['podtype']) > -1) {
                        result.push(allContent[i]);
                    }
                }
                this.set('content', result);
            },
            changeContents: function changeContents(value, param) {
                var self = this;
                $('body').click(function (e) {
                    if (!$(e.target).closest('.cvx-vm').length) {
                        $('.cvx-context-menu').remove();
                    }
                });

                var polid = setInterval(function () {
                    self.send('doAjaxPoll');
                }, 60 * 3 * 1000);
                this.set('polid', polid);
            },
            doAjaxPoll: function doAjaxPoll() {
                var self = this;
                self.get('store').getJSON('router').then(function (res) {
                    self.set('allcontent', res.data);
                    self.send('updatePodData');
                });
            }
        }
    });
});
define('netconfig/controllers/dashboard', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation, _netconfigMixinsSetupuser) {
    exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
        appCtrl: _ember['default'].inject.controller('application'),
        isShowlst: false,
        dtblData: [],
        isPoll: false,
        apiGeo: null,
        locationlist: [],
        selectedId: null,
        showHistory: false,
        history: "",
        dashboardSearch: false,
        beforeSearchContent: [],

        setupUser: function setupUser() {
            this.init();
        },

        initializeGeo: function initializeGeo() {
            //console.log("initializer called.")
            var self = this;
            this.get('store').getJSON('api_location_active/').then(function (res) {
                if (res.data) {
                    self.selectedId = res.data.id;
                    $('select[name="apigeo"] option[value="' + res.data.id + '"]').prop('selected', true);
                    $('select[name="apigeo"]').trigger('chosen:updated');
                }
            }, function (err) {
                console.log("could not update active geo.");
            });
        },

        populateLocation: function populateLocation() {
            var self = this;
            this.get('store').getJSON('api_location/').then(function (res) {
                if (res.data) {
                    self.set("locationlist", res.data);
                    //console.log(res.data)
                    //console.log($('select[name="apigeo"]'))
                    $('select[name="apigeo"]').trigger('chosen:updated');
                    self.initializeGeo();
                }
            }, function (err) {
                console.log("could not update active geo.");
            });
        },

        updateContent: function updateContent() {
            var self = this;
            this.store.getJSON("dashboard_m/").then(function (res) {
                var test = self.get('content.mtrprofile');
                test = res.data.dash;
            });
        },

        processWidget: function processWidget() {
            console.log("updateContent");
            this.updateContent();
            console.log("after", this.get('content.mtrprofile'));
            var self = this,
                dtblData = this.get('dtblData');
            $(this.get('content.mtrprofile')).each(function (i, e) {
                console.log("e", e);
                $(e).each(function (j, f) {
                    console.log("f", f);
                    $(f).each(function (a, b) {
                        self.getDashboardData(b);
                    });
                });
            });
            console.log("setting up poll.");
            _ember['default'].run.later(function () {
                if (self.get('isPoll')) {
                    self.processWidget();
                }
            }, 1000 * 60 * 5);
        },

        getDashboardData: function getDashboardData(ddata, isp) {

            var self = this;
            console.log("rem: new print");
            console.log(ddata);
            console.log(this.get('content.mtrprofile'));
            if (ddata.wdata == undefined) {
                var url = 'dashboard_mp/?pk=' + ddata.id + "&call=first";
            } else {
                var url = 'dashboard_mp/?pk=' + ddata.id + "&call=notfirst";
            }
            try {
                self.store.getJSON(url).then(function (res) {
                    _ember['default'].set(ddata, 'wdata', res.data);
                    var tdata = [];
                    $(res.data).each(function (a, b) {
                        b.rid = ddata.id;
                        tdata.push(b);
                    });
                    _ember['default'].set(ddata, 'tdata', tdata);
                }, function (err) {
                    self.get("content.mtrprofile").removeObject(ddata);
                    console.log("No row.");
                });
            } catch (ex) {
                console.log("error");
            }
        },

        stopPoll: function stopPoll() {
            $.xhrPool.abortAll();
            clearInterval(this.get('polid'));
        },

        actions: {
            showFData: function showFData(item) {
                if (item[0].isShowData) {
                    _ember['default'].set(item[0], 'isShowData', false);
                } else {
                    _ember['default'].set(item[0], 'isShowData', true);
                }
            },
            toggleNav: function toggleNav() {
                this.toggleProperty('appCtrl.showLeft');
            },
            toggleView: function toggleView(isLst) {
                this.toggleProperty('isShowlst', isLst);
            },

            geoChange: function geoChange() {
                self = this;
                var cval = $('select[name="apigeo"]').val();
                this.selectedId = cval;
                console.log(this.selectedId);

                this.get('store').post('api_location_active/', { id: this.selectedId }).then(function (res) {
                    self.set('isSaving', false);
                    (0, _netconfigUtilsNotify.customNotify)('success', 'MTR Profile updated successfully');
                    self.stopPoll();
                    self.processWidget();
                }, function (err) {
                    self.set('isSaving', false);
                    (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update MTR Profile');
                    console.log(err);
                });
            },
            rePoll: function rePoll() {
                this.stopPoll();
                this.processWidget();
            },
            showHistory: function showHistory(arg1) {
                console.log(arg1);
                self = this;
                this.get('store').getJSON('isp/' + arg1 + '/').then(function (res) {
                    self.set("history", res);
                    var modal = document.getElementById('myModal');
                    modal.style.display = "block";
                });
            },
            close: function close() {
                var modal = document.getElementById('myModal');
                modal.style.display = "none";
            },

            divclose: function divclose() {
                //var modal = document.getElementById('myModal');
                //modal.style.display = "none";
            },

            dashboardSearch: function dashboardSearch() {
                this.set("dashboardSearch", true);
                var searchValue = $('input[name="prefix_search"]').val();
                //console.log("Search value: "+searchValue)
                if (searchValue !== "") {
                    var result = [];
                    var allContent = this.get('beforeSearchContent');
                    for (var i = 0; i < allContent.length; i++) {
                        //data centres
                        var devices = [];
                        for (var j = 0; j < allContent[i].length; j++) {
                            //devices
                            var advList = [];
                            for (var k = 0; k < allContent[i][j].length; k++) {
                                //advertised
                                if (allContent[i][j][k].network.indexOf(searchValue) !== -1) {
                                    //console.log("Match found: "+allContent[i][j][k].network)
                                    advList.push(allContent[i][j][k]);
                                }
                            }
                            if (advList.length !== 0) devices.push(advList);
                        }
                        if (devices.length !== 0) result.push(devices);
                    }
                    this.set('content.mtrprofile', result);
                } else {
                    this.set("dashboardSearch", false);
                    this.set('content.mtrprofile', this.get('beforeSearchContent'));
                }
            },

            clearDashboardSearch: function clearDashboardSearch() {
                document.getElementsByName("prefix_search")[0].value = "";
                this.set("dashboardSearch", false);
                this.set('content.mtrprofile', this.get('beforeSearchContent'));
            },

            changeDc: function changeDc() {
                var dcs = [],
                    result = [];
                var value = $('select[name="dashboard_dc"]').val();
                if (value == 'ALL') {
                    dcs = Object.assign([], this.get('dc.mtrprofile'));
                    dcs.splice(0, 1);
                } else {
                    dcs.push(value);
                }
                var allContent = this.get('allcontent');
                for (var a = 0; a < dcs.length; a++) {
                    for (var i = 0; i < allContent.length; i++) {
                        //datacentres
                        if (allContent[i][0][0].dc == dcs[a]) {
                            result.push(allContent[i]);
                            break;
                        }
                    }
                }
                this.set('beforeSearchContent', result);
                this.send('dashboardSearch');
            }
        }
    });

    $(document).ready(function () {
        /*$(document).click(function() {
            var modal = document.getElementById('myModal');
            if ( modal.style.display != "none" ) {
                modal.style.display = "none";
            }
        });
        $("#myModal").click(function(e) {
            e.stopPropagation();
        })*/
    });
});
define('netconfig/controllers/dashboard_lan', ['exports', 'netconfig/utils/notify', 'netconfig/utils/validation', 'netconfig/mixins/setupuser'], function (exports, _netconfigUtilsNotify, _netconfigUtilsValidation, _netconfigMixinsSetupuser) {
  exports['default'] = Ember.Controller.extend({
    appCtrl: Ember.inject.controller('application'),
    actions: {
      showLeft: function showLeft() {
        this.toggleProperty('appCtrl.showLeft');
      },
      change: function change() {}
    }
  });
});
define("netconfig/controllers/dc", ["exports", "netconfig/mixins/setupuser", "netconfig/utils/notify"], function (exports, _netconfigMixinsSetupuser, _netconfigUtilsNotify) {
  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  exports["default"] = Ember.Controller.extend(_netconfigMixinsSetupuser["default"], {
    isPoll: true,
    inPage: false,
    fsStatus: false,
    showLine: false,
    showTraffic: false,
    nightMode: false,
    isEnlargedView: false,
    dcInfo: null,
    content: null,
    polling: null,
    dc_data: {},
    allContent: null,
    cvxPoll: null,
    trafficData: [],
    cvxData: [],
    pods: [],
    //dialog: false,
    confText: "",
    device: {},
    sDevice: {},
    topologyContainer: "",
    appCtrl: Ember.inject.controller('application'),
    init: function init() {
      var self = this;
      window.onresize = function (event) {
        if (self.get('inPage')) {
          console.log('eeeeee');
          self.send("dcSelect");
        }
      };
      window.toggleNightMode = function () {
        if (self.get('nightMode')) {
          self.set('nightMode', false);
          $('.maincontainer').removeClass('background-black');
          $('text[label=device]').attr('fill', 'black');
          $('.fa.fa-long-arrow-left.R').css('color', 'black');
          $('.lan-action').css('color', 'black');
          $('span.slider.round').attr('title', "Turn on Night Mode");
        } else {
          self.set('nightMode', true);
          $('.maincontainer').addClass('background-black');
          $('text[label=device]').attr('fill', 'white');
          $('.fa.fa-long-arrow-left.R').css('color', 'white');
          $('.lan-action').css('color', 'white');
          $('span.slider.round').attr('title', "Turn off Night Mode");
        }
      };
    },
    startcvxPoll: function startcvxPoll() {
      var self = this;
      var cvxpoll = setInterval(function () {
        //self.send('docvxPoll');
      }, 1000 * 60 * 1);
      self.set('cvxPoll', cvxpoll);
    },
    stopcvxPoll: function stopcvxPoll() {
      try {
        $.xhrPool.abortAll();
        clearInterval(this.get("cvxPoll"));
      } catch (err) {
        console.info("error at stop.", err);
      }
    },
    actions: {
      docvxPoll: function docvxPoll() {

        var self = this;
        self.get('store').getJSON('trafficstats').then(function (trafficRes) {

          self.get('store').getJSON('router').then(function (res) {
            self.set('cvxData', res.data);
            function getStatus(ele) {
              var isokay = true;
              var podfilter = $('select[name="pods"]').val();
              $(res.data).each(function (i, e) {

                if (podfilter != null && podfilter.length > 0) {
                  if (e.name === $(ele).attr('data-name') && e.host === $(ele).attr('data-host')) {
                    isokay = e.bgp_dc_status_set[0].status === "OK";
                    return false;
                  } else {
                    isokay = false;
                  }
                } else if (e.category === $(ele).attr('data-category') && e.podtype === $(ele).attr('data-type')) {
                  if (e.bgp_dc_status_set[0].status === "NOT OK") {
                    isokay = false;
                    return false;
                  }
                }
              });
              return isokay;
            }

            function formatBytes(bytes, decimals) {
              if (bytes == 0) return '0 Bytes';
              var k = 1024,
                  dm = decimals <= 0 ? 0 : decimals || 2,
                  sizes = ['Bps', 'Kbps', 'Mbps', 'Gbps', 'Tbps', 'PB', 'EB', 'ZB', 'YB'],
                  i = Math.floor(Math.log(bytes) / Math.log(k));
              return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            }

            function getPodTrafficGrpCount(ele) {
              var host = [];
              $(res.data).each(function (i, e) {
                if (e.category === $(ele).attr('data-category') && e.podtype === $(ele).attr('data-type')) {
                  host.push(e.host);
                }
              });
              return getTrafficCount(host);
            }

            function getTrafficCount(host) {
              var incount = 0,
                  outcount = 0;
              $(host).each(function (i, e) {
                $(trafficRes).each(function (a, b) {
                  if (e === b.host) {
                    incount += b.TotalInTraffic;
                    outcount += b.TotalOutTraffic;
                  }
                });
              });
              return { "in": incount, out: outcount };
            }

            var superSpineNodes = self.get('topologyContainer').selectAll("image");
            $(superSpineNodes._groups[0]).each(function (i, e) {
              if ($(e).attr('data-status') === "status") {
                var ctype = $(e).attr('data-type');
                $(e).attr('href', "/static/netconf/app/images/" + (getStatus(e) ? "checked" : "cancel") + ".svg");
                var podfilter = $('select[name="pods"]').val();
                var inEle = $(e).next(),
                    outEle = $(inEle).next();

                var gc = { "in": 0, out: 0 };
                if (podfilter != null && podfilter.length > 0) {
                  gc = getTrafficCount([$(e).attr('data-host')]);
                } else {
                  if ($(e).attr('data-category') === 'Super spine') {
                    gc = getTrafficCount([$(e).attr('data-host')]);
                  } else {
                    gc = getPodTrafficGrpCount(e);
                  }
                }
                $(inEle).text('RX : ' + formatBytes(gc["in"]));
                $(outEle).text('TX : ' + formatBytes(gc.out));
              }
            });
          });
        });
      },
      exportToXls: function exportToXls(filename) {
        var htmltable = document.getElementById('popuptbl');
        var html = htmltable.outerHTML;
        var anchor = document.createElement("a");
        anchor.style = "display:none !important";
        anchor.id = "downloadanchor";
        document.body.appendChild(anchor);
        if ("download" in anchor) {
          anchor.download = 'Transceiver-' + filename + "." + 'xls';
        }
        anchor.href = 'data:application/vnd.ms-excel,' + encodeURIComponent(html);
        anchor.click();
        anchor.remove();
      },
      showLeft: function showLeft() {
        this.rmGraph();
        this.toggleProperty('appCtrl.showLeft');
        //console.log('showleft called')
        this.send("dcSelect", this.get("allContent") != null ? this.get("allContent") : this.get("content"));
        if (!this.get("showLine")) {
          $(".fullContainer").find("path").css("visibility", "hidden");
        }
      },
      toggleFS: function toggleFS() {
        console.log('Toggle FS called!', this.get('fsStatus'));
        if (this.get('fsStatus')) {
          this.exitfullscreen();
        } else {
          this.enterfullscreen();
        }
      },
      toggleLinks: function toggleLinks() {
        if (this.showLine) {
          this.set("showLine", false);
          $(".fullContainer").find("path").css("visibility", "hidden");
        } else {
          this.set("showLine", true);
          $(".fullContainer").find("path").css("visibility", "visible");

          this.set("showTraffic", false);
          $('.trafIO').hide();
        }
      },
      trafficShow: function trafficShow(event) {
        if (this.showTraffic) {
          this.set("showTraffic", false);
          $('.trafIO').hide();
        } else {
          this.set("showTraffic", true);
          $('.trafIO').show();

          this.set("showLine", false);
          $(".fullContainer").find("path").css("visibility", "hidden");
        }
      },
      exitEnlargedView: function exitEnlargedView() {

        this.set('isEnlargedView', false);
        this.set('pods', []);
        $('select[name="pods"] option').prop('selected', false);
        $('select[name="pods"]').trigger('chosen:updated');
        this.set('allContent', null);
        //console.log('exitenlarged view called')
        this.send('dcSelect', this.get('content'));
      },
      refresh: function refresh(host) {
        var self = this;
        this.store.getJSON("aconfig/" + host + "/").then(function (res) {
          self.set("confText", res.data);
        });
      },
      closePopup: function closePopup() {
        $(".overlay").css("visibility", "hidden");
        $(".overlay").css("opacity", 0);
        $(".shdr").css("z-index", 1);
        $(".gAction .podSelect").css("z-index", 1);
      },
      closeTrans: function closeTrans() {
        $(".transceiver").css("visibility", "hidden");
        $(".transceiver").css("opacity", 0);
        $(".shdr").css("z-index", 1);
        $(".gAction .podSelect").css("z-index", 1);
      },
      dcSelect: function dcSelect(dcData) {
        console.log('dcSelect called ....');
        this.stopPolling();
        var self = this;
        if (!dcData) {
          //var data = this.get("allContent")
          //var dc = $('select[name="dc"]').val();
          var dc = this.get("dc");
          //$.get('http://siva-2356:3001/rest/v1/v1/dc_view').then(function (res) {
          this.store.getJSON('dc_view/?dc=' + dc).then(function (res) {
            self.rmGraph();
            self.set("content", res.data);
            self.send("podSelection");
            // self.drawLS(res.data);
            // if (!self.get("showLine")) {
            //   $(".fullContainer").find("path").css("visibility", "hidden");
            // }
          }, function (err) {
            (0, _netconfigUtilsNotify.customNotify)('error', err.message);
            return;
            // self.transitionToRoute('error.unauthorized')
          });
        } else {
            // console.log("check0")
            self.rmGraph();
            self.drawLS(dcData);
            if (!self.get("showLine")) {
              $(".fullContainer").find("path").css("visibility", "hidden");
            }

            this.send('docvxPoll');
          }
      },
      podSelection: function podSelection(p) {
        console.log('podSelection called ...');
        var data;
        this.set('pods', p == null ? this.getPods() : p);
        if (this.get('pods').length > 0) {
          var pods = this.get('pods'),
              spodDevices = [],
              lpodDevices = [];
          data = $.extend({}, this.get("content"));
          for (var i = 0; i < data.spine.length; i++) {
            if (jQuery.inArray(data.spine[i][0].podtype, pods) != -1) {
              spodDevices.addObject(data.spine[i]);
            }
          }
          data.spine = spodDevices;
          for (var i = 0; i < data.leaf.length; i++) {
            if (jQuery.inArray(data.leaf[i][0].podtype, pods) != -1) {
              lpodDevices.addObject(data.leaf[i]);
            }
          }
          data.leaf = lpodDevices;
        } else {
          this.send("exitEnlargedView");
          return 0;
        }
        this.set('isEnlargedView', true);
        this.set("allContent", data);

        this.send("dcSelect", data);
        /// this.send('docvxPoll');
      }
    },
    /*-----END OF ACTIONS-----*/
    setupNightMode: function setupNightMode() {
      $('.maincontainer').addClass('background-black');
      $('text[label=device]').attr('fill', 'white');
      $('.fa.fa-long-arrow-left.R').css('color', 'white');
      $('.lan-action').css('color', 'white');
      $('span.slider.round').attr('title', "Turn off Night Mode");
    },
    getPods: function getPods() {
      return $("select[name=pods]").val();
    },
    rmGraph: function rmGraph() {
      $(".fullContainer").remove();
      $(".tooltip").remove();
    },
    stopPolling: function stopPolling() {
      try {
        $.xhrPool.abortAll();
        var poll = this.get("polling");
        Ember.run.cancel(poll);
      } catch (err) {
        console.info("error at stop.", err);
      }
    },
    detectFS: function detectFS() {
      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement || document.mozFullScreenElement) {
        this.set('fsStatus', true);
      } else {
        this.set('fsStatus', false);
      }
    },
    enterfullscreen: function enterfullscreen() {
      if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
        if (document.documentElement.requestFullscreen) {
          document.documentElement.requestFullscreen();
        } else if (document.documentElement.msRequestFullscreen) {
          document.documentElement.msRequestFullscreen();
        } else if (document.documentElement.mozRequestFullScreen) {
          document.documentElement.mozRequestFullScreen();
        } else if (document.documentElement.webkitRequestFullscreen) {
          document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
        this.set('fsStatus', true);
      }
    },
    exitfullscreen: function exitfullscreen() {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      }
      this.set('fsStatus', false);
    },
    setupDC: function setupDC(data) {
      //dc response
      var self = this;
      this.set("dc", data[0].id);
      Ember.run.scheduleOnce("afterRender", function () {
        self.set("dcInfo", data);
        Ember.run.next(function () {
          $('select[name="dc"]').trigger('chosen:updated');
          if (self.get("dc_data")) {
            self.set("content", self.get("dc_data"));
            self.send('podSelection');
          }
          self.send("dcSelect");
        });
      });
    },
    setupContainers: function setupContainers(fullContainer, data) {
      // fullContainer.append("text")
      //   .attr("x", 20)
      //   .attr("y", 30)
      //   .text("Super Spine")
      //   .attr("font-family", "sans-serif")
      //   .attr("font-size", "20px")
      //   .attr("fill", "red")
      // if (data.superspine.length == 0) {
      //   fullContainer.append("text").attr("x", "40%")
      //     .attr("y", "10%")
      //     .text("No Device.")
      //     .attr('label', 'device')
      // }
      if (data.isPop) {
        fullContainer.append("text").attr("x", 20).attr("y", 30).text("Routers").attr("font-family", "sans-serif").attr("font-size", "20px").attr("fill", "red");
        if (data.spine.length == 0) {
          fullContainer.append("text").attr("x", "40%").attr("y", "35%").text("No Device.").attr('label', 'device');
        }

        fullContainer.append("text").attr("x", 20).attr("y", 230).text("Switches").attr("font-family", "sans-serif").attr("font-size", "20px").attr("fill", "red");
        if (data.leaf.length == 0) {
          fullContainer.append("text").attr("x", "40%").attr("y", "65%").text("No Device.").attr('label', 'device');
        }
      } else {
        fullContainer.append("text").attr("x", 20).attr("y", 30).text("Spine").attr("font-family", "sans-serif").attr("font-size", "20px").attr("fill", "red");
        if (data.spine.length == 0) {
          fullContainer.append("text").attr("x", "40%").attr("y", "35%").text("No Device.").attr('label', 'device');
        }
        fullContainer.append("text").attr("x", 20).attr("y", 230).text("Leaf").attr("font-family", "sans-serif").attr("font-size", "20px").attr("fill", "red");
        if (data.leaf.length == 0) {
          fullContainer.append("text").attr("x", "40%").attr("y", "65%").text("No Device.").attr('label', 'device');
        }
      }
    },
    drawLS: function drawLS(data) {
      var self = this;
      var containers = {};
      Ember.run.schedule("afterRender", function () {
        var fullContainer = d3.select(".topology").append("svg").attr("width", "100%").attr("height", "100%").attr("class", "fullContainer");
        self.setupContainers(fullContainer, data);
        self.set('topologyContainer', fullContainer);
        var menu = [{
          title: 'View BGP Summary',
          action: function action(elm, d) {
            console.log('Show BGP Summary clicked!');
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=bgp').then(function (res) {
              //console.log("Response data:", res.data)
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "BGP Summary of " + elm['name'] + " - " + elm['host'];
              //self.showDialog('BGP Summary of '+elm['host'], res.data)
            });
          }
        }, {
          title: 'View IPv6 BGP Summary',
          action: function action(elm, d) {
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=routebgpv6summary').then(function (res) {
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "IPv6 BGP Summary of " + elm['name'] + " - " + elm['host'];
            });
          }
        }, {
          title: 'View BGP EVPN Summary',
          action: function action(elm, d) {
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=evpnsummary').then(function (res) {
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "BGP EVPN Summary of " + elm['name'] + " - " + elm['host'];
            });
          }
        }, {
          title: 'View IP Route',
          action: function action(elm, d) {
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=route').then(function (res) {
              //console.log("Response data: ", res.data)
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "Routes of " + elm['name'] + " - " + elm['host'];
            });
          }
        }, {
          title: 'Show BGP Route',
          action: function action(elm, d) {
            console.log(elm, d);
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=routebgp').then(function (res) {
              console.log("Response data: ", res.data);
              var routeWindow = window.open("", "", "toolbar=no,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "Routes of " + elm['host'];
              return false;
            });
          }
        }, {
          title: 'Show BGP IPv6 Route',
          action: function action(elm, d) {
            console.log(elm, d);
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=routebgpv6').then(function (res) {
              console.log("Response data: ", res.data);
              var routeWindow = window.open("", "", "toolbar=no,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "Routes of " + elm['host'];
              return false;
            });
          }
        }, {
          title: 'View LACP Status',
          action: function action(elm, d) {
            console.log('Show LACP Status clicked!');
            self.get('store').getJSON('show/?ip=' + elm['host'] + '&cmd=lacp').then(function (res) {
              //console.log("Response data:", res.data)
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "LACP status of " + elm['name'] + " - " + elm['host'];
              //self.showDialog('LACP status of '+elm['host'], res.data)
            });
          }
        }, {
          title: 'View Used and Available Ports',
          action: function action(elm, d) {
            console.log('Show Used and Available Ports clicked!');
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=interfaces').then(function (res) {
              var elem = '';
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              elem += "<div style='color: red;border-bottom: 1px solid;'>USED</div>";
              elem += "<pre>" + res.data[0].used + "</pre>";
              elem += "<div style='color: green;border-bottom: 1px solid;'>AVAILABLE</div>";
              elem += "<pre>" + res.data[0].available + "</pre>";
              routeWindow.document.write(elem);
              routeWindow.document.title = "Used and Available ports of " + elm['name'] + " - " + elm['host'];
              //self.showDialog('Used and Available ports of '+elm['host'], data)
            });
          }
        }, {
          title: 'View VLAN Ports',
          action: function action(elm, d) {
            console.log('Show VLAN Ports clicked!');
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=vlan').then(function (res) {
              //console.log("Response data:", res.data)
              //self.showDialog('VLAN Ports of '+elm['host'], res.data)
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "VLAN Ports of " + elm['name'] + " - " + elm['host'];
            });
          }
        }, {
          title: 'View Transceivers',
          action: function action(elm, d) {
            console.log('View transcievers clicked!');
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=transceiver').then(function (res) {
              var routeWindow = window.open("", "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.data = res.data[0];
              routeWindow.focus();
              var csvContent = "data:text/csv;charset=utf-8,";
              csvContent += res.data[0];
              routeWindow.downloadCSV = function () {
                var encodedUri = encodeURI(csvContent);
                // window.open(encodedUri)
                var hiddenElement = document.createElement('a');
                hiddenElement.href = encodedUri;
                hiddenElement.target = '_blank';
                hiddenElement.download = elm['name'] + '.csv';
                hiddenElement.click();
              };
              routeWindow.loadFunction = function () {
                // alert("what the.")
              };
              var doc = '';
              doc += "<div><button onclick=downloadCSV()>Download</button>";
              doc += "<button id=drawTable>View</button></div>";
              doc += "<table style='border: 1px solid;' id=popuptbl></table>";
              routeWindow.document.write(doc);
              routeWindow.document.body.setAttribute("onload", "loadFunction()");
              routeWindow.document.title = "Transceivers of " + elm['name'] + " - " + elm['host'];
              routeWindow.addEventListener('load', function () {
                this.console.info("window loaded.");
              });
              var drawElem = routeWindow.document.getElementById("drawTable");
              drawElem.addEventListener('click', function () {
                routeWindow.resizeTo(routeWindow.screen.availWidth * 90 / 100, routeWindow.screen.availHeight * 90 / 100);
                var a = undefined,
                    b = [];
                a = routeWindow.data.split('\n');
                a.forEach(function (i) {
                  b.push(i.split(','));
                });
                // routeWindow.console.info(b)
                var table = routeWindow.document.getElementById('popuptbl');
                var tr1 = routeWindow.document.createElement('tr');
                b[0].forEach(function (v) {
                  var th = routeWindow.document.createElement('th');
                  var text1 = routeWindow.document.createTextNode(v);
                  th.appendChild(text1);
                  tr1.appendChild(th);
                });
                table.appendChild(tr1);
                for (var i = 1; i < b.length; i++) {
                  var tr2 = routeWindow.document.createElement('tr');
                  for (var j = 0; j < b[i].length; j++) {
                    routeWindow.console.info("j", b[i][j]);
                    var td2 = routeWindow.document.createElement('td');
                    td2.setAttribute('style', 'border: 1px solid;');
                    var text2 = routeWindow.document.createTextNode(b[i][j]);
                    td2.appendChild(text2);
                    tr2.appendChild(td2);
                  }
                  table.appendChild(tr2);
                }
              });
            });
          }
        }, { divider: true }, {
          title: 'View MAC Address Table',
          action: function action(elm, d) {
            console.log('Show MAC address table clicked!');
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=mac').then(function (res) {
              //console.log("Response data:", res.data)
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "MAC Address Table of " + elm['name'] + " - " + elm['host'];
              //self.showDialog('MAC Address Table of '+elm['host'], res.data)
            });
          }
        }, {
          title: 'View ARP Table',
          action: function action(elm, d) {
            console.log('Show ARP table clicked!');
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=arp').then(function (res) {
              //console.log("Response data:", res.data)
              //self.showDialog('ARP Address Table of '+elm['host'], res.data)
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "ARP Address Table of " + elm['name'] + " - " + elm['host'];
            });
          }
        }, {
          title: 'View VXLAN Address Table',
          action: function action(elm, d) {
            console.log('Show VXLAN address table clicked!');
            self.store.getJSON('show/?ip=' + elm['host'] + '&cmd=vxlan').then(function (res) {
              //console.log("Response data:", res.data)
              //self.showDialog('VXLAN Address Table of' +elm['host'], res.data)
              var routeWindow = window.open("", "", "toolbar=yes,scrollbars=yes,resizable=yes,top=200,left=200,width=800,height=500");
              routeWindow.document.write("<pre>" + res.data + "</pre>");
              routeWindow.document.title = "VXLAN Address Table of " + elm['name'] + "(" + elm['host'] + ")";
              console.log("Response data: ", res.data);
            });
          }
        }, { divider: true },
        // {
        //   title: 'Download Tech-Support Log',
        //   action: function(elm, d) {
        //     //console.log("Response data:", res.data)
        //     var url = window.APP_META.resturl + '/v1/techsupport/?ip='+elm['host']+'&auth_token='+localStorage.getItem('authtoken')
        //     //console.log("Url: ", url)
        //     window.open(url);
        //   }
        // },
        {
          title: 'Terminal',
          action: function action(elm, d) {
            // var h = screen.height - 20;
            // var w = screen.width - 20;
            console.log(elm);
            var termWindow = window.open(window.APP_META.xterm_url + '/terminal?host=' + elm['host'] + '&user=', "", "toolbar=no,scrollbars=yes,resizable=yes,top=200,left=200,width=1300,height=540");
            termWindow.document.title = "Terminal of " + elm['name'] + "(" + elm['host'] + ")";
            return false;
          }
        }];
        var div1 = d3.select(".topology").append("div").attr("class", "tooltip").style("opacity", 0);

        // var superSpineContainer = fullContainer.append("g")
        // superSpineContainer.append("rect")
        // .attr("x",180)
        // .attr("y",55)
        // .attr("rx",5)
        // .attr("ry",5)          
        // .attr("width",40)
        // .attr("height",20)
        // .attr("fill","green")
        // .style("text-anchor", "middle")
        // .text("ok");

        // var sample = fullContainer.append("text")
        // .attr("x",120)
        // .attr("y",50)        
        // .attr("width",5)
        // .attr("height",3)
        // .attr("fill","red");

        var superSpineNodes = fullContainer.selectAll("images").data(data.superspine).enter().append("svg:image");

        //return false;
        var sslen = data.superspine.length;
        //     var superSpineNodesAttributes = superSpineNodes
        //         .attr("xlink:href", "/static/netconf/app/images/A7280cr.png")
        //         .attr("x", function(a, b, c) {
        //           return 200 / sslen + b * 210
        //         })
        //         .attr("y", function(d) {
        //           return 60
        //         })
        //         .attr("min-x", function(a, b, c) {
        //           return b + 50
        //         })
        //         .attr("min-y", function(d) {
        //           return 60
        //         })
        //         .attr("width", "70")
        //         .attr("height", "70")
        //         .attr("cursor", "pointer")
        //         .on('mouseover',function(a, b, c, d) {
        //           var sEle = $(this).siblings('image[data-status="status"][ids='+$(this).attr('ids')+']');
        //           var inEle = $(sEle).next(), outEle = $(inEle).next()
        //           self.highlight(this.__data__.host)
        //           var xval = parseInt(d3.select(this).attr("x"))
        //           var yval = parseInt($(".topology svg").offset().top)+parseInt(d3.select(this).attr("y"))+60
        //           div1.transition().duration(200).style("opacity", 1);
        //           div1.html("Name: "+this.__data__.name+"<br/>Model: "+self.getmodel(this.__data__.deviceinfo_id)+"<br/>"+$(inEle).text()+" <br/> "+$(outEle).text()).style("left", xval+"px").style("top", yval+ "px").style("text-align","left")
        //         })
        //         .on('mouseout',function() {
        //           self.reverthighlight(this.__data__.host)
        //           div1.transition().duration(500).style("opacity", 0);
        //         })
        //         .on("click", function() {
        //           var local = this
        //           self.store.getJSON("aconfig/"+this.__data__.host+"/").then(function(res) {
        //             self.set("sDevice.name", local.__data__.name)
        //             self.set("sDevice.host", local.__data__.host)
        //             self.set("confText", res.data)
        //             $(".shdr").css("z-index", 0)
        //             $(".gAction .podSelect").css("z-index", 0)
        //             $(".overlay").css("visibility", "visible")
        //             $(".overlay").css("opacity", 1)
        //           }, function(err) {
        //             customNotify('error', "Could not fetch data.")
        //           })
        //         })
        //         .on('contextmenu', d3.contextMenu(menu, {
        //           position: function(d, i) {
        //             var elm = d3.mouse(this), topValue, leftValue;
        //             //console.log("Bounds:", elm)
        //             var windowHgt = window.innerHeight
        //             var windowWdth = window.innerWidth
        //             //console.log("Window values: ", windowHgt, windowWdth)
        //             if(windowHgt/2<elm[1]){
        //               console.log("Height - Bottom")
        //               topValue = elm[1] - 100
        //             }else{
        //               console.log("Height - Top")
        //               topValue = elm[1] + 100
        //             }
        //             if(windowWdth/2<elm[0]){
        //               console.log("Width - Right")
        //               leftValue = elm[0] - 150
        //             }else{
        //               console.log("Width - Left")
        //               leftValue = elm[0] + 75
        //             }
        //             return {
        //               top: topValue,
        //               left: leftValue
        //             }
        //           }
        //         }))
        //       for(var i=0; i<superSpineNodes._groups[0].length;i++){
        //         self.addText(fullContainer,superSpineNodes._groups[0][i], true, false)
        //         var x= parseInt(superSpineNodes._groups[0][i].attributes.x.value)-10;
        //           var mainHost=superSpineNodes._groups[0][i].__data__.host;
        //             var styleObj = { x : x, y : 125}
        //             self.addInOutTxt(fullContainer,mainHost,styleObj);
        //       }

        // var superSpineNodes = self.get('topologyContainer');
        // return false;
        var allspineNodes = [],
            allLeafNodes = [];
        var sxcoord = 0,
            lxcoord = 0;
        var spineContainer = fullContainer.append("g");
        var leafContainer = fullContainer.append("g");
        if (!self.get('isEnlargedView')) {
          /*-----SPINE-----*/
          var len = data.spine.length + 1;
          var fullLen = window.innerWidth - 300;
          for (var q = 0; q < data.spine.length; q++) {
            var spod = data.spine[q][0].podtype;
            var spinePod = fullContainer.selectAll("img").data([{ "category": data.spine[q][0].category, "pod": data.spine[q][0].podtype, host: data.spine[q][0].host, name: data.spine[q][0].name }]).enter().append("svg:image").attr("xlink:href", "/static/netconf/app/images/grp-normal.png").attr("x", sxcoord + fullLen / len).attr("y", 50).attr("width", "200").attr("height", "100").attr("cursor", "pointer").on('mouseover', function (a, b, c, d) {
              var sEle = $(this).siblings('image[data-status="status"][ids=' + $(this).attr('ids') + ']');
              var inEle = $(sEle).next(),
                  outEle = $(inEle).next();

              self.highlight(this.__data__.pod, 'spine');
              var xval = parseInt(d3.select(this).attr("x"));
              var yval = parseInt($(".topology svg").offset().top) + parseInt(d3.select(this).attr("y")) + 60;
              div1.transition().duration(200).style("opacity", 1);
              div1.html($(inEle).text() + " <br/>" + $(outEle).text()).style("left", xval + "px").style("top", yval + "px").style("text-align", "left");
            }).on('mouseout', function () {
              self.reverthighlight(this.__data__.pod, 'spine');
              div1.transition().duration(500).style("opacity", 0);
            }).on("click", function () {
              self.send("podSelection", [this.__data__.pod]);
              $('select[name="pods"]').val(this.__data__.pod).prop('selected', true);
              $('select[name="pods"]').trigger('chosen:updated');
            });
            self.addText(fullContainer, spinePod._groups[0][0], false, false);
            allspineNodes.push(spinePod._groups[0][0]);
            sxcoord = parseInt(spinePod._groups[0][0].getAttribute('x'));
            var mainHost = data.spine[q][0].host;
            var styleObj = { x: sxcoord + 50, y: 345, txtLen: "200", fontSize: 10, scalX: 0.64, scalY: 1.5 };
            self.addInOutTxt(fullContainer, mainHost, styleObj);
          }
          /*-----LEAF-----*/
          var len = data.leaf.length + 1;
          var fullLen = window.innerWidth - 300;
          for (var r = 0; r < data.leaf.length; r++) {
            var leafPod = fullContainer.selectAll("img").data([{ "category": data.leaf[r][0].category, "pod": data.leaf[r][0].podtype, host: data.leaf[r][0].host, name: data.leaf[r][0].name }]).enter().append("svg:image").attr("xlink:href", "/static/netconf/app/images/grp-normal.png").attr("x", lxcoord + fullLen / len).attr("y", 380).attr("width", "200").attr("height", "100").attr("cursor", "pointer").on('mouseover', function (a, b, c, d) {
              var sEle = $(this).siblings('image[data-status="status"][ids=' + $(this).attr('ids') + ']');
              var inEle = $(sEle).next(),
                  outEle = $(inEle).next();
              self.highlight(this.__data__.pod, 'leaf');
              var xval = parseInt(d3.select(this).attr("x"));
              var yval = parseInt($(".topology svg").offset().top) + parseInt(d3.select(this).attr("y")) + 60;
              div1.transition().duration(200).style("opacity", 1);
              div1.html($(inEle).text() + " <br/>" + $(outEle).text()).style("left", xval + "px").style("top", yval + "px").style("text-align", "left");
            }).on('mouseout', function () {
              self.reverthighlight(this.__data__.pod, 'leaf');
              div1.transition().duration(500).style("opacity", 0);
            }).on("click", function () {
              // self.send("podSelection", [this.__data__.pod])
              self.send("podSelection", [this.__data__.pod]);
              $('select[name="pods"]').val(this.__data__.pod).prop('selected', true);
              $('select[name="pods"]').trigger('chosen:updated');
            });
            self.addText(fullContainer, leafPod._groups[0][0], false, false);
            allLeafNodes.push(leafPod._groups[0][0]);
            lxcoord = parseInt(leafPod._groups[0][0].getAttribute('x'));
            var mainHost = data.leaf[r][0].host;
            var styleObj = { x: lxcoord + 50, y: 625 };
            self.addInOutTxt(fullContainer, mainHost, styleObj);
          }
          Ember.run.later(function () {
            self.drawSummaryLinks(superSpineNodes, allspineNodes, allLeafNodes, data, fullContainer);
            self.updateSummaryLinks(superSpineNodes, allspineNodes, allLeafNodes, fullContainer);
            self.set('inPage', true);
            if (!self.get("showLine")) {
              $(".fullContainer").find("path").css("visibility", "hidden");
            }
            if (self.get('nightMode')) {
              self.setupNightMode();
            }
          }, 500);
          self.runPoll(superSpineNodes, allspineNodes, allLeafNodes, fullContainer);
        } else {
          /*-----SPINE-----*/
          var spinelen = 0;
          for (var i = 0; i < data.spine.length; i++) {
            spinelen += data.spine[i].length;
          }
          spinelen == 1 ? spinelen = 2 : undefined;
          for (var q = 0; q < data.spine.length; q++) {
            var spineNodes = fullContainer.selectAll("images").data(data.spine[q]).enter().append("svg:image");
            var spineNodesAttributes = spineNodes.attr("xlink:href", "/static/netconf/app/images/A7060CX.png").attr("x", function (a, b, c) {
              return q != 0 ? sxcoord + 150 + b * 85 : window.innerWidth / spinelen + b * 85;
            }).attr("y", function (d) {
              return 50;
            }).attr("width", "70").attr("height", "70").attr("cursor", "pointer").on('mouseover', function (a, b, c, d) {
              var sEle = $(this).siblings('image[data-status="status"][ids=' + $(this).attr('ids') + ']');
              var inEle = $(sEle).next(),
                  outEle = $(inEle).next();
              self.highlight(this.__data__.host);
              var xval = parseInt(d3.select(this).attr("x"));
              var yval = parseInt($(".topology svg").offset().top) + parseInt(d3.select(this).attr("y")) + 60;
              div1.transition().duration(200).style("opacity", 1);
              div1.html("Name: " + this.__data__.name + "<br/>Model: " + self.getmodel(this.__data__.deviceinfo_id) + "<br/>" + $(inEle).text() + " <br/>" + $(outEle).text()).style("left", xval + "px").style("top", yval + "px").style("text-align", "left");
            }).on('mouseout', function () {
              self.reverthighlight(this.__data__.host);
              div1.transition().duration(500).style("opacity", 0);
            }).on("click", function () {
              var local = this;
              self.store.getJSON("aconfig/" + this.__data__.host + "/").then(function (res) {
                self.set("sDevice.name", local.__data__.name);
                self.set("sDevice.host", local.__data__.host);
                self.set("confText", res.data);
                $(".shdr").css("z-index", 0);
                $(".gAction .podSelect").css("z-index", 0);
                $(".overlay").css("visibility", "visible");
                $(".overlay").css("opacity", 1);
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data.");
              });
            }).on('contextmenu', d3.contextMenu(menu, {
              position: function position(d, i) {
                var elm = d3.mouse(this),
                    topValue,
                    leftValue;
                //console.log("Bounds:", elm)
                var windowHgt = window.innerHeight;
                var windowWdth = window.innerWidth;
                //console.log("Window values: ", windowHgt, windowWdth)
                if (windowHgt / 2 < elm[1]) {
                  console.log("Height - Bottom");
                  topValue = elm[1] - 200;
                } else {
                  console.log("Height - Top");
                  topValue = elm[1] + 100;
                }
                if (windowWdth / 2 < elm[0]) {
                  console.log("Width - Right");
                  leftValue = elm[0] - 150;
                } else {
                  console.log("Width - Left");
                  leftValue = elm[0] + 75;
                }
                return {
                  top: topValue,
                  left: leftValue
                };
              }
            }));
            for (var i = 0; i < spineNodes._groups[0].length; i++) {
              self.addText(fullContainer, spineNodes._groups[0][i], true, false);
              allspineNodes.push(spineNodes._groups[0][i]);

              var x = parseInt(spineNodes._groups[0][i].attributes.x.value);
              var y = parseInt(spineNodes._groups[0][i].attributes.y.value) + 60;

              var mainHost = data.spine[q][0].host;
              var styleObj = { x: x, y: y };
              self.addInOutTxt(fullContainer, mainHost, styleObj);
            }
            sxcoord = parseInt(spineNodes._groups[0][i - 1].getAttribute('x'));
          }

          /*-----LEAF-----*/
          var ycoord = 0;
          for (var r = 0; r < data.leaf.length; r++) {
            var leafNodes = fullContainer.selectAll("images").data(data.leaf[r]).enter().append("svg:image");
            var position = new self.Possision();
            var leafNodesAttributes = leafNodes.attr("xlink:href", function (a, b, c, d) {
              return self.getCategory(this.__data__.host) == "Leaf" ? "/static/netconf/app/images/A7060CX.png" : "/static/netconf/app/images/serviceleaf.png";
            }).attr("x", function (a, b, c) {
              return 10 + position.getX(b);
            }).attr("y", function (a, b, c) {
              return 350 + position.getY(b) + r * 70 + ycoord * 70;
            }).attr("width", "70").attr("height", "70").attr("cursor", "pointer").on('mouseover', function () {
              var sEle = $(this).siblings('image[data-status="status"][ids=' + $(this).attr('ids') + ']');
              var inEle = $(sEle).next(),
                  outEle = $(inEle).next();

              self.highlight(this.__data__.host);
              var xval = parseInt(d3.select(this).attr("x"));
              var yval = parseInt($(".topology svg").offset().top) + parseInt(d3.select(this).attr("y")) + 60;
              div1.transition().duration(200).style("opacity", 1);
              div1.html("Name: " + this.__data__.name + "<br/>Model: " + self.getmodel(this.__data__.deviceinfo_id) + "<br/>" + $(inEle).text() + " <br/>" + $(outEle).text()).style("left", xval + "px").style("top", yval + "px").style("text-align: left");
            }).on('mouseout', function () {
              self.reverthighlight(this.__data__.host);
              div1.transition().duration(500).style("opacity", 0);
            }).on("click", function () {
              var local = this;
              self.store.getJSON("aconfig/" + this.__data__.host + "/").then(function (res) {
                self.set("sDevice.name", local.__data__.name);
                self.set("sDevice.host", local.__data__.host);
                self.set("confText", res.data);
                $(".shdr").css("z-index", 0);
                $(".gAction .podSelect").css("z-index", 0);
                $(".overlay").css("visibility", "visible");
                $(".overlay").css("opacity", 1);
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data.");
              });
            }).on('contextmenu', d3.contextMenu(menu, {
              position: function position(d, i) {
                var elm = d3.mouse(this),
                    topValue,
                    leftValue;
                //console.log("Bounds:", elm)
                var windowHgt = window.innerHeight;
                var windowWdth = window.innerWidth;
                //console.log("Window values: ", windowHgt, windowWdth)
                if (windowHgt / 2 < elm[1]) {
                  console.log("Height - Bottom");
                  topValue = elm[1] - 250;
                } else {
                  console.log("Height - Top");
                  topValue = elm[1] + 100;
                }
                if (windowWdth / 2 < elm[0]) {
                  console.log("Width - Right");
                  leftValue = elm[0] - 150;
                } else {
                  console.log("Width - Left");
                  leftValue = elm[0] + 75;
                }
                return {
                  top: topValue,
                  left: leftValue
                };
              }
            }));
            for (var i = 0; i < leafNodes._groups[0].length; i++) {
              self.addText(fullContainer, leafNodes._groups[0][i], true, true);
              allLeafNodes.push(leafNodes._groups[0][i]);

              var x = parseInt(leafNodes._groups[0][i].attributes.x.value) + (i == 0 ? -10 : -5);
              var y = 90 + parseInt(leafNodes._groups[0][i].attributes.y.value);
              var mainHost = leafNodes._groups[0][i].__data__.host;
              var styleObj = { x: x, y: y };
              self.addInOutTxt(fullContainer, mainHost, styleObj);
            }
            ycoord = leafNodes._groups[0][0].getAttribute('y') == leafNodes._groups[0][i - 1].getAttribute('y') ? ycoord : ycoord + 1;
            self.addPod(fullContainer, data.leaf[r][0].podtype, leafNodes._groups[0][0].getAttribute('x') - 55, leafNodes._groups[0][0].getAttribute('y'));
          }
          //self.moveText(".leafContainer")
          Ember.run.later(function () {
            self.drawLinks(superSpineNodes, allspineNodes, allLeafNodes, data, fullContainer);
            self.updateLinks(superSpineNodes, allspineNodes, allLeafNodes, fullContainer);
            self.drawMlagLink(data, fullContainer, allLeafNodes);
            self.set('inPage', true);
            if (!self.get("showLine")) {
              $(".fullContainer").find("path").css("visibility", "hidden");
            }
            if (self.get('nightMode')) {
              self.setupNightMode();
            }
          }, 500);
          self.runPoll(superSpineNodes, allspineNodes, allLeafNodes, fullContainer);
        }
      });
      self.detectFS();
    },
    addInOutTxt: function addInOutTxt(cont, host, obj) {
      var display;
      if (this.showTraffic) {
        display = "block";
      } else {
        display = "none";
      }
      var In = 0,
          Out = 0;

      var txt = cont.append("text").text('RX :' + In).attr('class', 'trafIO').attr("x", obj.x).attr("y", obj.y + 10).attr("textLength", 80).attr("lengthAdjust", "spacingAndGlyphs").attr("style", "font-size: 20px;display:" + display + ";font-weight:bold;fill:#FF6699;");

      var txt = cont.append("text").text('TX :' + Out).attr('class', 'trafIO').attr("x", obj.x).attr("y", obj.y + 38).attr("textLength", 80).attr("lengthAdjust", "spacingAndGlyphs").attr("style", "font-size: 20px;display:" + display + ";font-weight:bold;fill:#00ccff;");
    },
    runPoll: function runPoll(superSpineNodes, spineNodes, leafNodes, fullContainer) {
      var self = this;
      var dc = $("[name=dc]").val();
      var polling = Ember.run.later(function () {
        //console.log("Updating bgp and mlag links!")

        self.send("dcSelect");
        self.runPoll(superSpineNodes, spineNodes, leafNodes, fullContainer);
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    addPod: function addPod(Container, podname, x, y) {
      var self = this;
      if (self.get("content.isPop")) {
        Container.append("text").text("").attr("x", x).attr("y", parseInt(y) + 45).attr("font-family", "sans-serif").attr("font-size", "18px").attr("fill", "red");
      } else {
        Container.append("text").text(podname).attr("x", x).attr("y", parseInt(y) + 45).attr("font-family", "sans-serif").attr("font-size", "18px").attr("fill", "red");
      }
    },
    //param1 - isDevice
    //param2 - isLeafDevice
    addText: function addText(Container, obj, isDevice, isLeafDevice) {

      function uuidv4() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = Math.random() * 16 | 0,
              v = c == 'x' ? r : r & 0x3 | 0x8;
          return v.toString(16);
        });
      }

      var txt = isDevice ? obj.__data__.name : obj.__data__.pod,
          ids = uuidv4();

      $(obj).attr('ids', ids);
      var title = Container.append("text").text(txt).attr("x", parseInt(obj.attributes.x.value) + (isDevice ? -3 : 60)).attr("y", parseInt(obj.attributes.y.value) + (isDevice ? isLeafDevice ? 70 : 10 : 10)).attr("textLength", isLeafDevice ? "75" : "80").attr("lengthAdjust", "spacingAndGlyphs").attr("style", "font-size: 2em; font-family: roboto; font-weight: bold; font-variant: all-small-caps; transform: scale(1.0,1);").attr('label', 'device');

      var cont = this.get('topologyContainer');
      var positionInfo = obj.getBoundingClientRect();
      cont.append("svg:image").attr("data-status", "status").attr("xlink:href", "/static/netconf/app/images/cancel.svg").attr("x", parseInt(obj.attributes.x.value) + positionInfo.width / 2).attr("y", parseInt(obj.attributes.y.value) + 15).attr("width", 25).attr("height", 25).attr("data-type", obj.__data__.podtype === undefined ? obj.__data__.pod : obj.__data__.podtype).attr("data-name", obj.__data__.name).attr("data-category", obj.__data__.category).attr("data-host", obj.__data__.host).attr('ids', ids);
      //console.log("x now is", obj.attributes.x.value)
    },
    // moveText: function(cssClass) {
    //   $(cssClass).prepend($(cssClass).find("text"))
    // },
    getmodel: function getmodel(id) {
      var model = "";
      var data = this.get("content.model");
      for (var i = 0; i < data.length; i++) {
        if (data[i][0] == id) {
          model = data[i][1] + data[i][2];
          break;
        }
      }
      return model;
    },
    getCategory: function getCategory(host) {
      var category = "";
      var data = this.get("content.leaf");
      for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
          if (data[i][j]['host'] == host) {
            category = data[i][j]['category'];
            i = data.length;break;
          }
        }
      }
      return category;
    },
    Possision: (function () {
      function Possision() {
        _classCallCheck(this, Possision);

        this.x = 50;
        this.y = 50;
        this.count = 0;
      }

      _createClass(Possision, [{
        key: "getX",
        value: function getX(a) {
          if (a % 20 === 0) {
            this.count = 0;
          }
          var val = this.x + this.count * 80;
          this.count++;
          return val;
        }
      }, {
        key: "getY",
        value: function getY(a) {
          if (a % 20 === 0) {
            this.y += 70;
          }
          return this.y;
        }
      }]);

      return Possision;
    })(),
    drawSummaryLinks: function drawSummaryLinks(superSpineNodes, spineNodes, leafNodes, data, container) {
      for (var ss = 0; ss < data.ssConn.length; ss++) {
        // For each superspine
        var ssdev = this.getNode(superSpineNodes._groups[0], 'host', data.ssConn[ss].source.host);
        if (ssdev) {
          for (var d = 0; d < data.ssConn[ss].destinations.length; d++) {
            // For each destn of superspine
            var sdev = this.getNode(spineNodes, 'pod', data.ssConn[ss].destinations[d].neighbor_pod);
            if (sdev) {
              var link = document.getElementById(data.ssConn[ss].source.host + "_" + data.ssConn[ss].destinations[d].neighbor_pod);
              if (link == null) {
                //Drawing ss link for first time
                this.drawLine(container, ssdev, sdev, data.ssConn[ss].destinations[d].status ? "#b7c9b7" : "#FFD700", ssdev.__data__.host);
              } else if (!data.ssConn[ss].destinations[d].status) {
                //checking if status is false for already existing link
                link.setAttribute('stroke', "#FFD700");
              }
            }
          }
        }
      }
      for (var sp = 0; sp < data.slConn.length; sp++) {
        var sdev = this.getNode(spineNodes, 'pod', data.slConn[sp].source.podtype);
        if (sdev) {
          for (var d = 0; d < data.slConn[sp].destinations.length; d++) {
            // For each destn of superspine
            var ldev = this.getNode(leafNodes, 'pod', data.slConn[sp].destinations[d].neighbor_pod);
            if (ldev) {
              var link = document.getElementById(data.slConn[sp].source.podtype + "_" + data.slConn[sp].destinations[d].neighbor_pod);
              if (data.slConn[sp].destinations[d].neighbor_pod !== 'Super spine' && link == null) {
                this.drawLine(container, sdev, ldev, data.slConn[sp].destinations[d].status ? "#b7c9b7" : "#FFD700", sdev.__data__.pod);
              } else if (!data.slConn[sp].destinations[d].status) {
                link.setAttribute('stroke', '#FFD700');
              }
            }
          }
        }
      }
    },
    getNode: function getNode(nodes, key, value) {
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].__data__[key] === value) {
          return nodes[i];
        }
      }
    },
    updateSummaryLinks: function updateSummaryLinks(superSpineNodes, spineNodes, leafNodes, container, param) {
      var self = this;
      //dc = $('select[name="dc"]').val()
      var dc = this.get("dc");
      self.store.getJSON('bgpstats/?dc=' + dc).then(function (resp) {
        //console.log("Bgp stats response:", resp)
        for (var ss = 0; ss < resp.data.sspine.length; ss++) {
          var ssdev = self.getNode(superSpineNodes._groups[0], 'host', resp.data.sspine[ss].host.host);
          if (ssdev) {
            for (var p = 0; p < resp.data.sspine[ss].peers.length; p++) {
              var sdev = self.getNode(spineNodes, 'pod', resp.data.sspine[ss].peers[p].peer_pod);
              if (sdev) {
                var link = document.getElementById(resp.data.sspine[ss].host.host + "_" + resp.data.sspine[ss].peers[p].peer_pod);
                //console.log("Sspine link data:", resp.data.sspine[ss].host.host, resp.data.sspine[ss].peers[p].peer_pod)
                //console.log("SSPine link", link, link.getAttribute("stroke"))
                if (link) {
                  if (link.getAttribute("stroke") != 'red') {
                    if (resp.data.sspine[ss].peers[p].peer.peer_state === 'Established') {
                      link.setAttribute('stroke', "#90EE90");
                    } else {
                      //console.log("Not established! Sspine summary path:", link)
                      link.setAttribute('stroke', "red");
                      self.getNode(spineNodes, 'pod', resp.data.sspine[ss].peers[p].peer_pod).setAttribute("href", "/static/netconf/app/images/grp-red.png");
                    }
                  }
                }
              }
            }
          }
        }
        for (var sp = 0; sp < resp.data.spine.length; sp++) {
          var sdev = self.getNode(spineNodes, 'pod', resp.data.spine[sp].host.podtype);
          if (sdev) {
            for (var p = 0; p < resp.data.spine[sp].peers.length; p++) {
              var ldev = self.getNode(leafNodes, 'pod', resp.data.spine[sp].peers[p].peer_pod);
              if (ldev) {
                var link = document.getElementById(resp.data.spine[sp].host.podtype + "_" + resp.data.spine[sp].peers[p].peer_pod);
                if (resp.data.spine[sp].peers[p].peer_pod != 'Super spine' && link && link.getAttribute("stroke") != 'red') {
                  if (resp.data.spine[sp].peers[p].peer.peer_state === 'Established') {
                    link.setAttribute('stroke', "#90EE90");
                  } else {
                    console.log("Not established! Spine summary path:", link, resp.data.spine[sp].host, resp.data.spine[sp].peers[p]);
                    link.setAttribute('stroke', "red");
                    self.getNode(spineNodes, 'pod', resp.data.spine[sp].peers[p].peer_pod).setAttribute("href", "/static/netconf/app/images/grp-red.png");
                    self.getNode(leafNodes, 'pod', resp.data.spine[sp].peers[p].peer_pod).setAttribute("href", "/static/netconf/app/images/grp-red.png");
                  }
                }
              }
            }
          }
        }
        for (var l = 0; l < resp.data.leafG.length; l++) {
          try {
            if (resp.data.leafG[l].stat.peer_state != "Established") {
              self.getNode(leafNodes, 'pod', resp.data.leafG[l].host.podtype).setAttribute("href", "/static/netconf/app/images/grp-red.png");
            }
          } catch (err) {
            console.error("No BGP in " + resp.data.leafG[l].host.host);
          }
        }
      });
    },
    drawLinks: function drawLinks(superSpineNodes, spineNodes, leafNodes, data, lineC) {
      for (var i = 0; i < data.slConn.length; i++) {
        for (var j = 0; j < spineNodes.length; j++) {
          if (data.slConn[i].source.host === spineNodes[j].__data__.host) {
            for (var k = 0; k < data.slConn[i].destinations.length; k++) {
              for (var l = 0; l < leafNodes.length; l++) {
                if (data.slConn[i].destinations[k].neighbor_ip === leafNodes[l].__data__.host) {
                  var color = data.slConn[i].destinations[k].status ? "#b7c9b7" : "#FFD700";
                  this.drawLine(lineC, spineNodes[j], leafNodes[l], color, data.slConn[i].destinations[k].port, data.slConn[i].destinations[k].neighbor_port);
                }
              }
            }
          }
        }
      }

      for (var i = 0; i < data.ssConn.length; i++) {
        for (var j = 0; j < superSpineNodes._groups[0].length; j++) {
          if (data.ssConn[i].source.host === superSpineNodes._groups[0][j].__data__.host) {
            for (var k = 0; k < data.ssConn[i].destinations.length; k++) {
              for (var l = 0; l < spineNodes.length; l++) {
                if (data.ssConn[i].destinations[k].neighbor_ip === spineNodes[l].__data__.host) {
                  var allLinks = document.querySelectorAll('[id*="' + superSpineNodes._groups[0][j].__data__.host + "_" + spineNodes[l].__data__.host + '"]');
                  var eLink = allLinks.length;
                  var color = data.ssConn[i].destinations[k].status ? "#b7c9b7" : "#FFD700";
                  this.drawLine(lineC, superSpineNodes._groups[0][j], spineNodes[l], color, data.ssConn[i].destinations[k].port, data.ssConn[i].destinations[k].neighbor_port, eLink);
                }
              }
            }
          }
        }
      }
    },
    drawLine: function drawLine(Container, obj1, obj2, color, port, nport, eLink) {
      var linePoints = [],
          self = this;
      var tooltip = d3.select(".tooltip");
      var resp = Container.append("path").attr("stroke", color).attr("stroke-width", 2.5).attr("fill", "none");
      if (nport == null) {
        var type = port.indexOf("Pod") != -1 ? "leaf" : "spine";
        if (type == 'spine') {
          linePoints.addObject({ "x": obj1.getBBox().x, "y": obj1.getBBox().y });
        } else {
          linePoints.addObject({ "x": obj1.getBBox().x + 70, "y": obj1.getBBox().y + 25 });
        }
        linePoints.addObject(type == 'spine' ? { "x": obj2.getBBox().x + 70, "y": obj2.getBBox().y - 25 } : { "x": obj2.getBBox().x + 70, "y": obj2.getBBox().y - 25 });
        var line = d3.svg.line().x(function (d) {
          return d.x + 35;
        }).y(function (d) {
          return d.y + 45;
        }).interpolate("linear");
        resp = resp.attr("id", port + "_" + obj2.__data__.pod).attr("d", line(linePoints)).attr("source", port).attr("dest", obj2.__data__.pod).attr("type", type);
      } else {
        //linePoints.addObject({"x": obj1.getBBox().x, "y": obj1.getBBox().y})
        if (eLink) {
          linePoints.addObject({ "x": obj1.getBBox().x + 15, "y": obj1.getBBox().y });
        } else {
          linePoints.addObject({ "x": obj1.getBBox().x, "y": obj1.getBBox().y });
        }
        if (eLink) {
          linePoints.addObject({ "x": obj2.getBBox().x + 15, "y": obj2.getBBox().y - 20 });
        } else {
          linePoints.addObject({ "x": obj2.getBBox().x, "y": obj2.getBBox().y - 20 });
        }
        var line = d3.svg.line().x(function (d) {
          return d.x + 35;
        }).y(function (d) {
          return d.y + 45;
        }).interpolate("linear");
        resp = resp.attr("id", obj1.__data__.host + "_" + obj2.__data__.host + "_" + port + "_" + nport).attr("d", line(linePoints)).attr("source", obj1.__data__.host).attr("dest", obj2.__data__.host).attr("cursor", "pointer").on("click", function () {
          self.store.getJSON('dc_link/?ips=' + obj1.__data__.host + "_" + obj2.__data__.host + '&ethernet=' + port + '_' + nport).then(function (res) {
            var data = res.data['sport'] + "(" + res.data['sAddress'] + ") to " + res.data['dport'] + "(" + res.data['dAddress'] + ")";
            var elem = document.getElementById(obj1.__data__.host + '_' + obj2.__data__.host + '_' + port + '_' + nport).getBoundingClientRect();
            var xval = elem.left - 70;
            var yval = elem.top + 50;
            tooltip.transition().duration(200).style("opacity", 1);
            tooltip.html(data).style("left", xval + "px").style("top", yval + "px");
          });
        }).on("mouseout", function () {
          tooltip.transition().duration(500).style("opacity", 0);
        });
      }
      return resp;
    },
    updateLinks: function updateLinks(superSpineNodes, spineNodes, leafNodes, lineC) {
      var self = this;
      //var dc = $("[name=dc]").val()
      var dc = this.get("dc");
      //$.get('http://siva-2356:3001/rest/v1/bgpstats/').then(function (res) {
      self.store.getJSON('bgpstats/?dc=' + dc).then(function (res) {
        for (var i = 0; i < res.data.spine.length; i++) {
          for (var j = 0; j < spineNodes.length; j++) {
            if (res.data.spine[i].host.host === spineNodes[j].__data__.host) {
              for (var k = 0; k < res.data.spine[i].peers.length; k++) {
                for (var l = 0; l < leafNodes.length; l++) {
                  if (res.data.spine[i].peers[k].peer_ip === leafNodes[l].__data__.host) {
                    var doc = self.getLinkForBgpUpdate(spineNodes[j].__data__.host, leafNodes[l].__data__.host, res.data.spine[i].peers[k].host_ethernet, res.data.spine[i].peers[k].peer_ethernet);
                    if (doc) {
                      if (res.data.spine[i].peers[k].peer.peer_state != "Established") {
                        console.log("Not established! Spine Path:", doc);
                        doc.setAttribute("stroke", "red");
                        //self.updateLink(spineNodes[j].__data__.host, leafNodes[l].__data__.host, "red", res.data.spine[i].peers[k].host_ethernet, res.data.spine[i].peers[k].peer_ethernet)
                      }
                      if (res.data.spine[i].peers[k].peer.peer_state == "Established") {
                        doc.setAttribute("stroke", "#90EE90");
                        //self.updateLink(spineNodes[j].__data__.host, leafNodes[l].__data__.host, "#90EE90", res.data.spine[i].peers[k].host_ethernet, res.data.spine[i].peers[k].peer_ethernet)
                      }
                    }
                  }
                }
              }
            }
          }
        }

        for (var i = 0; i < res.data.sspine.length; i++) {
          for (var j = 0; j < superSpineNodes._groups[0].length; j++) {
            if (res.data.sspine[i].host.host === superSpineNodes._groups[0][j].__data__.host) {
              for (var k = 0; k < res.data.sspine[i].peers.length; k++) {
                for (var l = 0; l < spineNodes.length; l++) {
                  if (res.data.sspine[i].peers[k].peer_ip === spineNodes[l].__data__.host) {
                    //console.log(res.data.sspine[i].peers[k].peer_ip)
                    var doc = self.getLinkForBgpUpdate(superSpineNodes._groups[0][j].__data__.host, spineNodes[l].__data__.host, res.data.sspine[i].peers[k].host_ethernet, res.data.sspine[i].peers[k].peer_ethernet);
                    if (doc) {
                      if (res.data.sspine[i].peers[k].peer.peer_state != "Established") {
                        //console.log("Not established! SSPine Path:", doc)
                        doc.setAttribute("stroke", "red");
                        //self.updateLink(superSpineNodes._groups[0][j].__data__.host, spineNodes[l].__data__.host, "red", res.data.sspine[i].peers[k].host_ethernet, res.data.sspine[i].peers[k].peer_ethernet)
                      } else if (res.data.sspine[i].peers[k].peer.peer_state == "Established") {
                          doc.setAttribute("stroke", "#90EE90");
                          //self.updateLink(superSpineNodes._groups[0][j].__data__.host, spineNodes[l].__data__.host, "#90EE90", res.data.sspine[i].peers[k].host_ethernet, res.data.sspine[i].peers[k].peer_ethernet)
                        }
                    }
                  }
                }
              }
            }
          }
        }
        for (var i = 0; i < res.data.leafG.length; i++) {
          var doc = self.getLinkForBgpUpdate(res.data.leafG[i].host.host, res.data.leafG[i].peer.host);
          if (doc) {
            try {
              if (res.data.leafG[i].stat.peer_state == "Established") {
                doc.setAttribute('stroke', "#90EE90");
              } else if (res.data.leafG[i].stat.peer_state != "Established") {
                doc.setAttribute('stroke', "red");
              }
            } catch (err) {
              console.error('No bgp between ' + res.data.leafG[i].host.host + '<->' + res.data.leafG[i].peer.host);
            }
          }
        }
      });
    },
    getLinkForBgpUpdate: function getLinkForBgpUpdate(param1, param2, host_ethernet, peer_ethernet) {
      return host_ethernet == null ? document.getElementById(param1 + "_" + param2) : document.getElementById(param1 + "_" + param2 + "_" + host_ethernet + "_" + peer_ethernet);
    },
    drawMlagLink: function drawMlagLink(data, lineC, leafNodes) {
      for (var i = 0; i < data.leafG.length; i++) {
        var temp1 = [];
        for (var j = 0; j < data.leafG[i].length; j++) {
          for (var l = 0; l < leafNodes.length; l++) {
            if (leafNodes[l].__data__.host === data.leafG[i][j].host) {
              temp1.addObject(leafNodes[l]);
            }
          }
        }
        if (temp1.length == 2) {
          this.drawLineNormal(lineC, temp1[0], temp1[1], "#b7c9b7");
        }
      }
    },
    drawLineNormal: function drawLineNormal(Container, obj1, obj2, color) {
      var linePoints = [];
      linePoints.addObject({ "x": obj1.getBBox().x, "y": obj1.getBBox().y });
      linePoints.addObject({ "x": obj2.getBBox().x - 50, "y": obj2.getBBox().y });
      var line = d3.svg.line().x(function (d) {
        return d.x + 60;
      }).y(function (d) {
        return d.y + 40;
      }).interpolate("linear");
      return Container.append("path").attr("d", line(linePoints)).attr("stroke", color).attr("stroke-width", 2).attr("fill", "none").attr("id", obj1.__data__.host + "_" + obj2.__data__.host).attr("ip", obj1.__data__.host);
    },
    highlight: function highlight(param1, type) {
      //console.log("Highlight called!", param1, type)
      var docs = type ? type == 'leaf' ? $("[dest='" + param1 + "'][type='leaf']") : $("[source='" + param1 + "'][type='leaf'], [dest='" + param1 + "'][type='spine']") : $("[source='" + param1 + "'],[dest='" + param1 + "']");
      for (var i = 0; i < docs.length; i++) {
        docs[i].setAttribute("stroke-width", "5");
        if (docs[i].style.visibility == "" || docs[i].style.visibility == "hidden") {
          docs[i].style.visibility = "visible";
        }
        if (docs[i].getAttribute("stroke") === "#90EE90") {
          docs[i].setAttribute("stroke", "green");
        }
      }
    },
    reverthighlight: function reverthighlight(param1, type) {
      //console.log("Revert highlight called!")
      var docs = $("[source='" + param1 + "'],[dest='" + param1 + "']");
      for (var i = 0; i < docs.length; i++) {
        docs[i].setAttribute("stroke-width", "2.5");
        if (docs[i].style.visibility == "visible") {
          docs[i].style.visibility = this.get("showLine") ? "" : "hidden";
        }
        if (docs[i].getAttribute("stroke") === "green") {
          docs[i].setAttribute("stroke", "#90EE90");
        }
      }
    },
    createTableDataForPopUp: function createTableDataForPopUp(resp, keys) {
      $('#popuptbl').empty();
      var table = document.getElementById('popuptbl');
      var tr1 = document.createElement('tr');
      $.each(keys, function (k, v) {
        var th = document.createElement('th');
        var text1 = document.createTextNode(v);
        th.appendChild(text1);
        tr1.appendChild(th);
      });
      table.appendChild(tr1);
      for (var i = 0; i < resp.length; i++) {
        var tr2 = document.createElement('tr');
        $.each(keys, function (k, v) {
          var td2 = document.createElement('td');
          var text2 = document.createTextNode(resp[i][v]);
          td2.appendChild(text2);
          tr2.appendChild(td2);
        });
        table.appendChild(tr2);
      }
    }
  });
});
define('netconfig/controllers/inlinefilterview', ['exports', 'ember', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigMixinsSetupuser) {
    exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
        appCtrl: _ember['default'].inject.controller('application'),
        isShowNmap: false,
        nmapData: {},
        actions: {

            showFData: function showFData(item) {
                if (item.isShowData) {
                    _ember['default'].set(item, 'isShowData', false);
                } else {
                    _ember['default'].set(item, 'isShowData', true);
                }
            },

            toggleNav: function toggleNav() {
                this.toggleProperty('appCtrl.showLeft');
            },

            hideTraceRoute: function hideTraceRoute() {
                this.set('isShowNmap', false);
                this.set('nmapData', {});
            },

            getNmapData: function getNmapData(e) {
                _ember['default'].set(e, 'nmap', []);
                _ember['default'].set(e, 'isShowData', true);
                _ember['default'].set(e, 'isFetchingData', true);
                this.store.getJSON('nmap/?pk=' + e.id).then(function (res) {
                    _ember['default'].set(e, 'isFetchingData', false);
                    _ember['default'].set(e, 'nmap', res.data);
                });
            },

            shownmap: function shownmap(item) {
                var self = this;
                if (item.data) {
                    _ember['default'].set(item, 'isShowData', true);
                    $(item.data).each(function (i, e) {
                        self.send('getNmapData', e);
                    });
                } else {
                    this.send('getNmapData', item);
                }
            }
        }
    });
});
define('netconfig/controllers/interfaces', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigUtilsNotify, _netconfigMixinsSetupuser) {
    exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
        appCtrl: _ember['default'].inject.controller('application'),
        queryParams: ['routerip'],
        routerip: null,
        isPoll: false,
        'interface': {},
        processWidget: function processWidget(id) {
            var self = this;
            console.log("check1");
            self.store.getJSON('interface/?host=' + id).then(function (res) {
                console.log("Test");
                console.log(res);
                if (res['interface'] == "no-data") {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Memcached not running!");
                } else {
                    /*Ember.run.later(function(){
                        if(self.get('isPoll')){
                            self.processWidget(id);
                        }
                    }, (1000*60*5));*/

                    self.set('content.interface', res.data);
                }
            });
        },
        stopPoll: function stopPoll() {
            $.xhrPool.abortAll();
            clearInterval(this.get('polid'));
        },
        actions: {
            toggleNav: function toggleNav() {
                this.toggleProperty('appCtrl.showLeft');
            },
            routerchanged: function routerchanged() {
                this.processWidget($('select[name="router"]').val());
            },

            showInterface: function showInterface(param1) {
                self = this;
                self.store.getJSON('interface_info/' + param1 + '/').then(function (res) {
                    self.set("interface", res.data);
                    var modal = document.getElementById('myModal');
                    modal.style.display = "block";
                });
            },
            close: function close() {
                var modal = document.getElementById('myModal');
                modal.style.display = "none";
            }
        }
    });
});
define('netconfig/controllers/lanbgp', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigUtilsNotify, _netconfigMixinsSetupuser) {
  exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
    appCtrl: _ember['default'].inject.controller('application'),
    isShowlst: false,
    isShowAdv: false,
    tblData: [],
    advData: {},
    dcs: [],
    isPoll: true,
    pod: [],
    initPage: function initPage() {

      var self = this;

      _ember['default'].run.scheduleOnce('afterRender', this, function () {
        self.store.getJSON('router/').then(function (res) {
          //console.log(res.data)
          if (res.router == "no data") {
            (0, _netconfigUtilsNotify.customNotify)('error', "this error");
          } else {
            $(self.get('allcontent')).each(function (i, e) {
              //console.log('allcontent looop ', e)
              $(res.data).each(function (j, b) {
                //console.log(b.podtype)
                if (e.podtype == b.podtype && e.host == b.host) {

                  console.log(b.bgp_dc_status_set[0].status, b.podtype, b.host);
                  if (b.bgp_dc_status_set[0].status == "OK") {
                    _ember['default'].set(e, "status", true);
                  } else {
                    _ember['default'].set(e, "status", false);
                  }
                }
              });
            });
            console.log(self.get('allcontent'));
          }
        });

        console.log('onAfter Render ', self.get('allcontent'));
        this.send('changeContents');
      });
    },

    populatePod: function populatePod(param) {
      var routers = param[0].routers;
      var temp = [];
      for (var i = 0; i < routers.length; i++) {
        temp.addObject(routers[i].podtype);
      }
      temp.pop();
      temp.sort();
      var lastObj = temp.pop();
      temp.unshift(lastObj);
      this.set('pod', temp);
    },

    processWidget: function processWidget() {
      var self = this,
          c = 0;
      $(this.get('content.router')).each(function (i, e) {
        //console.log("Praveen", e)
        /* if(c === 0) {  
             console.log("e")
             console.log(i, e)
         }*/
        $(e.routers).each(function (f, g) {
          //console.log("Sreejan", g)
          self.getBgpData(g);
        });
      });
    },

    getBgpData: function getBgpData(e, isp) {
      var self = this;

      /* if(e.wData == undefined) {
         console.log("this")
         var url = 'bgp/?host='+e.id+"&call=first"
       } else {
         var url = 'bgp/?host='+e.id+"&call=notfirst"
       }  */
      return self.store.getJSON('bgp/?host=' + e.host).then(function (res) {
        if (res.host == "no-data") {
          (0, _netconfigUtilsNotify.customNotify)('error', "Memcached not running!");
        } else {
          //var tblData = self.get('tblData');
          //Ember.set(e, 'wData', res);

          var SortByName = function SortByName(a, b) {
            // console.log("sortbyname")
            // console.log(a['peer_state'])
            var aName = a['peer_state'].toLowerCase();
            var bName = b['peer_state'].toLowerCase();
            return aName < bName ? -1 : aName > bName ? 1 : 0;
          };

          var bgpPeer = res['bgp-peer'].sort(SortByName).reverse();
          _ember['default'].set(e, 'wData', res);
          if (isp) {
            _ember['default'].set(e, 'isShowAllAdvList', false);
          }

          /*$(bgpPeer).each(function(a,b){
              b['down-peer-count'] = res['down-peer-count'];
              b['group-count'] = res['group-count'];
              b['peer-count'] = res['peer-count'];
              b.host = res.host;
              b.id = e.id;
          });
           if(isp) {
              var bc = 0, bgp  = bgpPeer;
              $(tblData).each(function(c,d){
                  if(bgp[bc] !== undefined && (d.id === bgp[bc].id && d['peer-address'] === bgp[bc]['peer-address'])) {
                      $.each(bgp[bc], function(k,v) {
                          Ember.set(tblData[c], k, v);
                      });
                      bc++;
                  }
              });
          } else {
              tblData.addObjects(bgpPeer);
          }*/

          _ember['default'].run.later(function () {
            if (self.get('isPoll')) {
              self.getBgpData(e, true);
            }
          }, 1000 * 60 * 2);
        }
      });
    },

    stopPoll: function stopPoll() {
      $.xhrPool.abortAll();
      clearInterval(this.get('polid'));
    },

    actions: {

      changeContents: function changeContents(value, param) {
        var podname = $('select[name="podtype"]').val();
        var pods = [],
            result = [];

        if (podname == 'All') {
          pods = Object.assign([], this.get('pod'));
          pods.splice(0, 1);
        } else {
          pods.push(podname);
        }
        var allContent = this.get('allcontent');
        for (var i = 0; i < allContent.length; i++) {
          if (pods.indexOf(allContent[i]['podtype']) > -1) {
            result.push(allContent[i]);
          }
        }
        console.log("Content result:", result);
        this.set('content.router', [{ "routers": result }]);
        console.log("Final", this.get("content"));
        //this.pollingStatus()
      },

      showFData: function showFData(item) {
        if (item.isShowData) {
          _ember['default'].set(item, 'isShowData', false);
        } else {
          _ember['default'].set(item, 'isShowData', true);
        }
      },

      showAdvData: function showAdvData(item, router, allPeers) {
        if (item.isShowAdvData) {
          _ember['default'].set(item, 'isShowAdvData', false);
          if (router.isShowAllAdvList) {
            var anyOpen = false;
            for (var i = 0; i < allPeers.length; i++) {
              if (allPeers[i].isShowAdvData) {
                anyOpen = true;break;
              }
            }
            if (!anyOpen) _ember['default'].set(router, 'isShowAllAdvList', false);
          }
        } else {
          _ember['default'].set(item, 'isShowAdvData', true);
          if (!router.isShowAllAdvList) {
            var anyClosed = false;
            for (var i = 0; i < allPeers.length; i++) {
              if (!allPeers[i].isShowAdvData) {
                anyClosed = true;break;
              }
            }
            if (!anyClosed) _ember['default'].set(router, 'isShowAllAdvList', true);
          }
        }
      },

      showAllAdvList: function showAllAdvList(item, allPeers) {
        if (item.isShowAllAdvList) {
          _ember['default'].set(item, 'isShowAllAdvList', false);
          for (var i = 0; i < allPeers.length; i++) {
            _ember['default'].set(allPeers[i], 'isShowAdvData', false);
          }
        } else {
          _ember['default'].set(item, 'isShowAllAdvList', true);
          for (var i = 0; i < allPeers.length; i++) {
            _ember['default'].set(allPeers[i], 'isShowAdvData', true);
          }
        }
      },

      showPeers: function showPeers(item) {
        if (item.isShowPeer) {
          _ember['default'].set(item, 'isShowPeer', false);
        } else {
          _ember['default'].set(item, 'isShowPeer', true);
        }
      },

      toggleNav: function toggleNav() {
        this.toggleProperty('appCtrl.showLeft');
      },

      closeAdv: function closeAdv() {
        this.set('isShowAdv', false);
        this.set('advData', {});
      },

      /*showadvlst:function(itm, bgppeer){
          var ids = itm.host+'_'+bgppeer['peer_host'];
          this.set('advData', {host:bgppeer['peer_host'], adv:bgppeer.bgp_advertisement_set});
          this.set('isShowAdv', true);
          Ember.run.next(function(){
              var crow = $('.table tr[ids="'+ids+'"] .bgpadv');
              console.log(crow)
              $('.advlst').slideDown('fast').css({top:((crow.offset().top + $('.innerContainer').scrollTop()) - 20), left:(crow.offset().left - ($('.advlst').width() - 90))});
          })
      },*/

      toggleView: function toggleView(isLst) {
        this.toggleProperty('isShowlst', isLst);
      }

    }
  });
});
/*changeDc:function(){
  var dcs = [], result = [], value = $('select[name="bgp_dc"]').val()
  if(value == 'ALL'){
    dcs = Object.assign([], this.get('dcs'))
    dcs.splice(0,1)
  }else{
    dcs.push(value)
  }
  var allContent = this.get('allcontent')
  for(var a=0; a<dcs.length;a++){
    for(var i=0; i<allContent.length;i++){
      if(allContent[i].dc == dcs[a])
        result.push(allContent[i])
    }
  }
  this.set('content.router', result)
},*/
define('netconfig/controllers/lanconf', ['exports', 'ember', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigMixinsSetupuser) {
    exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
        sub: false,
        connected: false,
        accessLstData: {},
        ltog: true,
        wtog: true,
        appCtrl: _ember['default'].inject.controller('application'),
        actions: {
            disconnect: function disconnect() {
                //console.log("Disconnect from routers while reload or logout called!!")
                var self = this,
                    deldata = "&router=" + JSON.stringify(this.get('accessLstData')['router']);
                //console.log("Calling delete multiple http connectn:", deldata)
                this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
                    self.set('connected', false);
                    if ("notdisconnected" in resp['data']) {
                        customNotify("Error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
                    } else {
                        console.log("Successfully closed all connections!");
                    }
                    self.set('connected', false);
                    //self.get('router').transitionTo('lanconf')
                }, function (err) {
                    self.set('connected', false);
                    //self.get('router').transitionTo('lanconf')
                });
            },
            changeSub: function changeSub() {
                this.toggleProperty('sub');
            },
            ltoggle: function ltoggle() {
                this.toggleProperty('ltog');
            },
            wtoggle: function wtoggle() {
                this.toggleProperty('wtog');
            }

        }
    });
});
define('netconfig/controllers/lanconf/accesslist/extended', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    protocols: null,
    isSaving: false,
    extendedCtrl: _ember['default'].inject.controller('lanconf'),
    operators: [{ value: "None", label: "None" }, { value: "gt", label: "Greater than" }, { value: "eq", label: "Equal" }, { value: "lt", label: "Lesser than" }, { value: "neq", label: "Not equal" }, { value: "range", label: "Range" }],
    configurationData: {},
    isShowConfig: false,
    setdefault: function setdefault() {
      var data = this.get('extendedCtrl.accessLstData');
      //this.set('hidepcl', true)
      this.set("hostwithname", data['hostwithName']);
      this.set("hostwithacl", data['acl-present']);
      this.set("aclconfig", data['acl-config']);
      this.set("hostwithoutacl", data['acl-not-present']);
      _ember['default'].run.next(function () {
        $('input[name=aclname]').val(data['aclname']);
        $('input[name="approver_email"]').val(data['approver_email_name']);
        $('input[name="config_comment"]').val(data['config_comment']);
        $('.extdAcl tr[ids="1"]').find('.seqprotocol').chosen();
      });
      this.setHostsName();
    },
    setHostsName: function setHostsName() {
      var rwh = this.get("hostwithname");
      var present = this.get("hostwithacl");
      var absent = this.get("hostwithoutacl");
      var temp1 = [],
          temp2 = [];
      for (var i = 0; i < rwh.length; i++) {
        if (present.indexOf(rwh[i][1]) != -1) {
          temp1.addObject(rwh[i]);
        } else if (absent.indexOf(rwh[i][1]) != -1) {
          temp2.addObject(rwh[i]);
        }
      }
      this.set("hostwithacl", temp1);
      this.set("hostwithoutacl", temp2);
    },
    actions: {
      closePopup: function closePopup() {
        this.set('isShowConfig', false);
      },
      showConfiguration: function showConfiguration(itm) {
        var data = {};
        var acldata = this.get('extendedCtrl.accessLstData');
        $(acldata['acl-config']).each(function (i, e) {
          if (e.host === itm[1]) {
            data.name = itm[0] + ' [' + itm[1] + ']';
            data.output = e.result.output;
            return false;
          }
        });
        this.set('configurationData', data);
        this.set('isShowConfig', true);
      },
      checkprotocol: function checkprotocol(id) {
        // var pcl = $("select[name='protocol']").val()
        // this.set('hidepcl', (pcl == "icmp" || pcl == "ip")?false:true)
        var pcl = $($('.extdAcl tr[ids="' + id + '"]')).find('select[name="protocol"]').val();
        _ember['default'].set(this.get('config').find(function (obj) {
          return obj.id === id;
        }), 'hidepcl', pcl == "icmp" || pcl == "ip" ? false : true);
        _ember['default'].run.next(function () {
          $('.extdAcl tr[ids="' + id + '"]').find('.seqprotocol').chosen();
        });
      },
      checksrcopr: function checksrcopr(id) {
        var opr = $($('.extdAcl tr[ids="' + id + '"]')).find('select[name="srcoperator"]').val();
        if (opr == 'None') {
          var sport = $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="srcport"]');
          sport.prop('disabled', true);
          sport.val('');
        } else {
          $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="srcport"]').prop('disabled', false);
        }
      },
      checkdstopr: function checkdstopr(id) {
        var opr = $($('.extdAcl tr[ids="' + id + '"]')).find('select[name="dstoperator"]').val();
        if (opr == 'None') {
          var dport = $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="dstport"]');
          dport.prop('disabled', true);
          dport.val('');
        } else {
          $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="dstport"]').prop('disabled', false);
        }
      },
      willcancel: function willcancel() {
        var present = Array.from(this.get("hostwithacl"), function (_, i) {
          return _[1];
        });
        var absent = Array.from(this.get("hostwithoutacl"), function (_, i) {
          return _[1];
        });
        var hosts = present.concat(absent);
        var self = this,
            deldata = "&router=" + JSON.stringify(hosts);
        //console.log("Delele get data", deldata)
        this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
          if ("notdisconnected" in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)("Error", "Unable to close connection! Please manually disconnect for devices " + resp['data']['notdisconnected'].join(", "));
          } else {
            console.log("Successfully closed all connections!");
          }
          self.set('extendedCtrl.connected', false);
        });
      },
      cancel: function cancel() {
        self.get('router').transitionTo('lanconf');
        return false;
      },
      aextacl: function aextacl() {
        //console.log("Submitting extended configuration")
        if ($(':checkbox:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one device!");
          return false;
        }
        var check = true;
        $('.seqRow').each(function (i, e) {
          if (!_netconfigUtilsValidation.validateForm.validateSeq(e)) {
            check = false;
            return false;
          }
        });
        if (!check) {
          return false;
        }
        this.set('isSaving', true);
        var val = [],
            self = this;
        $(':checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        var data = this.get('extendedCtrl.accessLstData');
        var seqdata = [];
        $('.seqRow').each(function (i, e) {
          seqdata.push({ "name": data["aclname"],
            "seqno": $(e).find('input[name="seqno"]').val(),
            "action": $(e).find('select[name="action"]').val(),
            "protocol": $(e).find('select[name="protocol"]').val(),
            "srcaddr": $(e).find('input[name="srcaddr"]').val(),
            "srccidr": $(e).find('input[name="srccidr"]').val(),
            "srcoperator": $(e).find('select[name="srcoperator"]').val(),
            "srcport": $(e).find('input[name="srcport"]').val(),
            "dstaddr": $(e).find('input[name="dstaddr"]').val(),
            "dstcidr": $(e).find('input[name="dstcidr"]').val(),
            "dstoperator": $(e).find('select[name="dstoperator"]').val(),
            "dstport": $(e).find('input[name="dstport"]').val(),
            "log": $(e).find('select[name="log"]').val()
          });
        });
        var self = this,
            data = "aclname=" + $('input[name="aclname"]').val() + "&acltype=" + $('input[name="acltype"]').val() + "&router=" + JSON.stringify(val) + "&config=" + JSON.stringify(seqdata) + '&approver_email=' + $('input[name="approver_email"]').val() + '&config_comment=' + $('input[name="config_comment"]').val();
        //console.log("Post extd data:", data)
        this.get('store').post('workflow/', data).then(function (resp) {
          self.set('isSaving', false);
          if (typeof resp['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Successfully sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', 'Failed to Send the configuration for Approval');
          }
          self.send('cancel');
        }, function (err) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('error', 'Configuration failed!');
          self.send('cancel');
        });
        return false;
      },
      addSeqRow: function addSeqRow() {
        var c = this.get('config');
        var newid = c.length > 0 ? c[c.length - 1]['id'] : 0;
        c.addObject({ id: newid + 1, hidepcl: true });
        _ember['default'].run.next(function () {
          $('.extdAcl tr[ids="' + (newid + 1) + '"]').find('.seqprotocol').chosen();
        });
      },
      delSeqRow: function delSeqRow(delitem) {
        if (this.get('config').length == 1) {
          return false;
        }
        var c = this.get('config');
        c.removeObject(delitem);
      }
    }
  });
});
define('netconfig/controllers/lanconf/accesslist/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    pods: [],
    podhosts: [],
    lanconfRouter: [],
    hostwithName: [],
    isLoading: false,
    isPodTypeSelected: false,
    lanCtrl: _ember['default'].inject.controller('lanconf'),

    actions: {
      onLoad: function onLoad() {
        $('.formContainer').on('change', 'input[type="checkbox"]', function () {
          if ($(this).attr('name') === "routername") {
            if ($(this).is(':checked')) {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
            } else {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
            }
          } else {
            if ($(this).is(':checked')) {
              if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
              } else {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
              }
            } else {
              $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
            }
          }
        });
      },
      setdc: function setdc() {
        var dc = $('select[name="dc"]').val();
        //console.log("Selected dc: ", dc)
        if (dc) {
          var pods = [];
          for (var key in this.get("content").routers[dc]) {
            pods.push(key);
          }
          this.set('pods', pods);
          this.send('fetchhosts');
          _ember['default'].run.next(function () {
            $('select[name="podtype"]').trigger('chosen:updated');
          });
        }
      },
      fetchhosts: function fetchhosts() {
        var pod = $('select[name="podtype"]').val();
        //console.log("Note: Setting Pod hosts !! Pod type:", pod)
        if (pod) {
          var devices = this.get("content").routers[$('select[name="dc"]').val()][pod];
          if (pod != 'Super spine') {
            this.set('isSspine', false);
            var data = {};
            for (var i = 0; i < devices.length; i++) {
              if (devices[i].category in data) {
                data[devices[i].category].push(devices[i]);
              } else {
                data[devices[i].category] = [devices[i]];
              }
            }
            this.set("podhosts", data);
          } else {
            this.set('isSspine', true);
            this.set("podhosts", devices);
          }
          this.set("isPodTypeSelected", true);
        } else {
          this.set("isPodTypeSelected", false);
        }
      },
      getlogin: function getlogin() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="alconf"]'))) {
          return false;
        }
        if ($('input[name="router"]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var val = [],
            hostNameArray = [];
        $('input[name="router"]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });
        this.set('lanconfRouter', val);
        this.set('hostwithName', hostNameArray);
        var modal = document.getElementById('logindiv');
        if (this.get('lanCtrl.credentials') !== undefined) {
          var self = this;
          _ember['default'].run.next(function () {
            console.log("Set login values!");
            $("input[name='username']").val(self.get('lanCtrl.credentials')[0].value);
            $("input[name='password']").val(self.get('lanCtrl.credentials')[1].value);
            $("input[name='enpwd']").val(self.get('lanCtrl.credentials')[2].value);
          });
        }
        modal.style.display = "block";
      },
      close_popup: function close_popup() {
        this.set('isLoading', false);
        //document.forms[1].reset()
        var modal = document.getElementById('logindiv');
        modal.style.display = "None";
      },
      login: function login() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
          return false;
        }
        var self = this;
        this.set('isLoading', true);
        var credentials = $('form[name=loginform]');
        var acheckacldata = credentials.serialize() + "&router=" + JSON.stringify(this.get('lanconfRouter')) + "&" + $('form[name=alconf]').serialize();
        //console.log("Login data:", acheckacldata)
        this.get('store').post('acheckacl/', acheckacldata).then(function (resp) {
          //console.log("Response for check acl call:", resp)
          if ('Session open' in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
            self.send('close_popup');
            return false;
          } else if ('acl-other-type' in resp['data']) {
            var type = $('select[name=acltype]').val() == "standardACL" ? "extendedACL" : "standardACL";
            (0, _netconfigUtilsNotify.customNotify)("error", "Routers " + resp['data']['acl-other-type'] + " have access list with same name but type " + type + ". Please provide a different name.");
            self.send('close_popup');
            return false;
          }
          var approver_name = "";
          if (self.get("content.isAdminAccount") == true) {
            approver_name = localStorage.getItem('appuser');
          } else {
            approver_name = $('select[name="approver_email"] option:selected').text();
          }
          var alformdata = { 'aclname': $('input[name=aclname]').val(), 'acltype': $('select[name=acltype]').val(), 'hostwithName': self.get('hostwithName'), approver_email_id: $('select[name="approver_email"]').val(), config_comment: $('input[name="config_comment"]').val() };
          alformdata['approver_email_name'] = approver_name;
          alformdata['acl-not-present'] = 'acl-not-present' in resp['data'] ? resp['data']['acl-not-present'] : [];
          alformdata['acl-present'] = 'acl-present' in resp['data'] ? resp['data']['acl-present'] : [];
          alformdata['acl-config'] = 'acl-config' in resp['data'] ? resp['data']['acl-config'] : [];
          alformdata['acl-name'] = 'acl-name' in resp['data'] ? resp['data']['acl-name'] : '';

          self.set('isLoading', false);
          self.set('lanCtrl.credentials', credentials.serializeArray());
          self.set('lanCtrl.accessLstData', alformdata);
          self.set('lanCtrl.connected', true);
          if ($('select[name=acltype]').val() == 'standardACL') {
            self.get('router').transitionTo('lanconf/accesslist.standard');
          } else if ($('select[name=acltype]').val() == 'extendedACL') {
            self.get('router').transitionTo('lanconf/accesslist.extended');
          }
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
          self.set('isLoading', false);
        });
      }
    }
  });
});
define('netconfig/controllers/lanconf/accesslist/standard', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    isSaving: false,
    standardCtrl: _ember['default'].inject.controller('lanconf'),
    configurationData: {},
    isShowConfig: false,
    setdefault: function setdefault() {
      var data = this.get('standardCtrl.accessLstData');
      this.set("hostwithname", data['hostwithName']);
      this.set("hostwithacl", data['acl-present']);
      this.set("aclconfig", data['acl-config']);
      this.set("hostwithoutacl", data['acl-not-present']);
      _ember['default'].run.next(function () {
        $('input[name="aclname"]').val(data['aclname']);
        $('input[name="approver_email"]').val(data['approver_email_name']);
        $('input[name="config_comment"]').val(data['config_comment']);
      });
      this.setHostsName();
    },
    setHostsName: function setHostsName() {
      var rwh = this.get("hostwithname");
      var present = this.get("hostwithacl");
      var absent = this.get("hostwithoutacl");
      var temp1 = [],
          temp2 = [];
      for (var i = 0; i < rwh.length; i++) {
        if (present.indexOf(rwh[i][1]) != -1) {
          temp1.addObject(rwh[i]);
        } else if (absent.indexOf(rwh[i][1]) != -1) {
          temp2.addObject(rwh[i]);
        }
      }
      this.set("hostwithacl", temp1);
      this.set("hostwithoutacl", temp2);
    },
    actions: {
      closePopup: function closePopup() {
        this.set('isShowConfig', false);
      },
      showConfiguration: function showConfiguration(itm) {
        var data = {};
        var acldata = this.get('standardCtrl.accessLstData');
        $(acldata['acl-config']).each(function (i, e) {
          if (e.host === itm[1]) {
            data.name = itm[0] + ' [' + itm[1] + ']';
            data.output = e.result.output;
            return false;
          }
        });
        this.set('configurationData', data);
        this.set('isShowConfig', true);
      },
      willcancel: function willcancel() {
        var present = Array.from(this.get("hostwithacl"), function (_, i) {
          return _[1];
        });
        var absent = Array.from(this.get("hostwithoutacl"), function (_, i) {
          return _[1];
        });
        var hosts = present.concat(absent);
        var self = this,
            deldata = "&router=" + JSON.stringify(hosts);
        //console.log("Delele get data", deldata)
        this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
          //console.log("Response of delete multiple connection:", resp)
          if ("notdisconnected" in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)("Error", "Unable to close connection! Please manually disconnect for devices " + resp['data']['notdisconnected'].join(", "));
          } else {
            console.log("Successfully closed all connections!");
          }
          self.set('standardCtrl.connected', false);
        });
      },

      cancel: function cancel() {
        self.get('router').transitionTo('lanconf');
        return false;
      },
      astdacl: function astdacl() {
        //console.log("Submitting standard configuration")
        if ($(':checkbox:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one device!");
          return false;
        }
        var check = true;
        $('.seqRow').each(function (i, e) {
          if (!_netconfigUtilsValidation.validateForm.validateSeq(e)) {
            check = false;
            return false;
          }
        });
        if (!check) {
          return false;
        }
        this.set('isSaving', true);
        var val = [],
            self = this;
        $(':checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        var data = this.get('standardCtrl.accessLstData');
        var seqdata = [];
        $('.seqRow').each(function (i, e) {
          seqdata.push({ 'name': data["aclname"], 'seqno': $(e).find('input[name="seqno"]').val(), 'action': $(e).find('select[name="action"]').val(), "log": $(e).find('select[name="log"]').val(), "addr": $(e).find('input[name="addr"]').val(), "cidr": $(e).find('input[name="cidr"]').val() });
        });
        var data = $('form[name=stdconf]').serialize() + "&router=" + JSON.stringify(val) + "&config=" + JSON.stringify(seqdata);
        //console.log("Post std data:", data)
        this.get('store').post('workflow/', data).then(function (resp) {
          self.set('isSaving', false);
          //console.log("Post std config result:",resp)
          if (typeof resp['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Successfully sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', 'Failed to Send the configuration for Approval');
          }
          self.send('cancel');
        }, function (err) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('error', 'Configuration failed!');
          self.send('cancel');
        });
        return false;
      },

      addSeqRow: function addSeqRow() {
        var c = this.get('config');
        var newid = c.length > 0 ? c[c.length - 1]['id'] : 0;
        c.addObject({ id: newid + 1 });
      },

      delSeqRow: function delSeqRow(delitem) {
        if (this.get('config').length == 1) {
          return false;
        }
        var c = this.get('config');
        c.removeObject(delitem);
      }
    }
  });
});
define('netconfig/controllers/lanconf/cicd/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  exports['default'] = _ember['default'].Controller.extend({
    appCtrl: _ember['default'].inject.controller('application'),
    resObj: {},
    count: 0,
    indArr: [],
    nameArr: [],
    imp_key: '',
    sessionCheck: false,
    isLoading: false,
    sDevice: {},
    tempDict: {},
    showCustomDiv: false,
    template_data: "",
    aux_dict: {},
    tog: false,
    form_dict: {},
    jinjaEditor: {},
    yamlEditor: {},
    disableEbr: false,
    actions: {
      onLoad: function onLoad() {
        var self = this;
        self.set("imp_key", this.get("content").imp);
        self.set("showCustomDiv", false);
        self.set("tog", false);

        var temp_name = $('input[name="template_name"]');
        temp_name.prop('disabled', false);

        $('input[name="router"]').prop('disabled', false);
        $('input[name="routername"]').prop('disabled', false);
        $('.innerContainer').on('change', 'input[type="checkbox"]', function () {
          if ($(this).attr('name') === "routername") {
            if ($(this).is(':checked')) {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
            } else {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
            }
          } else {
            if ($(this).is(':checked')) {
              if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
              } else {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
              }
            } else {
              $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
            }
          }
        });

        $('.form-container').on('click', '.del-icon-img', function () {
          self.actions.delFields.call(self, event);
        });
        $('.form-container').on('click', '.del-group-icon-img', function () {
          self.actions.delFields.call(self, event);
        });

        $('.form-container').on('click', '.add-icon-img', function () {
          self.actions.addFields.call(self, event);
        });

        _ember['default'].run.schedule("afterRender", function () {

          ace.config.set("basePath", "js/ace");

          var editor = ace.edit("container");
          editor.setTheme("ace/theme/chrome");
          editor.session.setMode("ace/mode/yaml");
          self.set("yamlEditor", editor);

          var editor2 = ace.edit("container2");
          editor2.setTheme("ace/theme/chrome");
          editor2.session.setMode("ace/mode/django");
          self.set("jinjaEditor", editor2);
        });
      },
      onTypeChange: function onTypeChange() {
        var type = $('select[name="type"]').val();
        var self = this;
        var data = "";
        if (self.form_dict[type] == undefined && type != "") {
          this.store.getJSON('getForm/?type=' + type).then(function (res) {
            data = res.data.commands;
            self.form_dict[type] = data;
            self.set('showCustomDiv', false);
            self.actions.createForm.call(self, data);
            self.resObj = JSON.parse(JSON.stringify(data));
            console.log(self.resObj);
          });
        } else {
          if (type != "") {
            data = self.form_dict[type];
            self.set('showCustomDiv', false);
            self.actions.createForm.call(self, data);
            self.resObj = JSON.parse(JSON.stringify(data));
            console.log(self.resObj);
          }
        }
      },

      onTemplateChange: function onTemplateChange() {
        var filename = $('select[name="template_name_list"]').val();
        var self = this;
        if (filename == "None") {
          self.get("jinjaEditor").setValue("");
          self.get("jinjaEditor").setReadOnly(false);

          var temp_name = $('input[name="template_name"]');
          temp_name.prop('disabled', false);
        } else {
          if (self.aux_dict[filename] == undefined) {
            this.store.getJSON('getForm/?type=template&filename=' + filename).then(function (res) {
              var glob_data = res.data.file_content;
              self.aux_dict[filename] = glob_data;
              self.set('template_data', atob(glob_data));

              self.get("jinjaEditor").setValue(atob(glob_data));
              self.get("jinjaEditor").setReadOnly(true);
            });
          } else {
            self.set('template_data', atob(self.aux_dict[filename]));

            self.get("jinjaEditor").setValue(atob(self.aux_dict[filename]));
            self.get("jinjaEditor").setReadOnly(true);
          }
          var temp_name = $('input[name="template_name"]');
          temp_name.prop('disabled', true);
        }
      },
      setdc: function setdc() {
        var dc = $('select[name="dc"]').val();

        if (dc) {
          var pods = [];
          for (var key in this.get("content").routers[dc]) {
            pods.push(key);
          }
          this.set('pods', pods);
          this.send('fetchhosts');
          _ember['default'].run.next(function () {
            $('select[name="podtype"]').trigger('chosen:updated');
          });
        }
      },
      fetchhosts: function fetchhosts() {
        var pod = $('select[name="podtype"]').val();
        if (pod) {
          var devices = this.get("content").routers[$('select[name="dc"]').val()][pod];
          if (pod != 'Super spine') {
            this.set('isSspine', false);
            var data = {};
            for (var i = 0; i < devices.length; i++) {
              if (devices[i].category in data) {
                data[devices[i].category].push(devices[i]);
              } else {
                data[devices[i].category] = [devices[i]];
              }
            }
            this.set("podhosts", data);
          } else {
            this.set('isSspine', true);
            this.set("podhosts", devices);
          }
          this.set("isPodTypeSelected", true);
        } else {
          this.set("isPodTypeSelected", false);
        }
      },
      parseObj: function parseObj(res, i) {
        var self = this;
        var formData = '';

        $.each(res, function (k, v) {
          var temp = k.replace(/_/g, " ");
          var label_disp = temp.replace(/(^\w{1})|(\s+\w{1})/g, function (letter) {
            return letter.toUpperCase();
          });
          if (jQuery.type(v) === "array" || v.array != undefined) {

            if (v.array) {
              v = v.array;
            }

            var arr = self.actions.parseArr.call(self, v, k);
            var type = $('select[name="type"]').val();

            if (arr.length === 0) {

              if (v.length >= 1) {
                var html = v.map(function (val) {
                  return '<option value=' + val + '>' + val + '</option>';
                });
                formData += '<div class="formRow"><label class="key-box" data-val=' + k + ' >' + label_disp + '</label>' + '<select class="val-option-box value-box">' + html + '</select>' + '</div>';
              } else {
                formData += '<div class="formRow"><input type="text" placeholder=' + k + ' class="input-box">' + arr + '</input></div>';
              }
            } else {
              formData += '<div inx="' + i + '" class="form-sub-group" data-key="' + k + '">' + arr + '</div>';
            }
          } else {
            jQuery.type(v.name) === 'object' ? formData += '' : formData += '<div class="formRow"><label class="key-box" data-val=' + k + '>' + label_disp + '</label><input type="text" class="value-box"/></div>';
          };
        });
        return formData;
      },
      parseArr: function parseArr(arr, name) {
        var self = this;
        var data = '';
        var obj = '';
        var check_obj = true;
        if (jQuery.type(arr) === "array") {

          arr.every(function (ele) {
            if (jQuery.type(ele) === 'string') {
              check_obj = false;
            }
          });
        }
        if (check_obj) {
          $(arr).each(function (i, e) {
            if (name) {
              var temp_2 = name.replace(/_/g, " ");
              var label_disp_arr = temp_2.replace(/(^\w{1})|(\s+\w{1})/g, function (letter) {
                return letter.toUpperCase();
              });

              // OLD
              // if (arr.length > 1) {
              //   obj += (i == 0 && name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>' :'');
              // } else {
              //   obj += (name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>': '');
              // }

              if (arr.length > 1) {
                obj += i == 0 && name !== undefined ? '<h3 class="group-title" >' + name + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>' + '<div class="formgroup"><span class="del-group-icon-img"><img class="del-group-icon" src="/static/netconf/app/images/delete.png" style="cursor:pointer" alt="del-icon"></span>' + self.actions.parseObj.call(self, e, i) + '</div>' : '<div class="formgroup"><span class="del-group-icon-img"><img class="del-group-icon" src="/static/netconf/app/images/delete.png" style="cursor:pointer" alt="del-icon"></span>' + self.actions.parseObj.call(self, e, i) + '</div>';
              } else {
                obj += name !== undefined ? '<h3 class="group-title" >' + name + '<span class="add-icon-img text" >add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3><div class="formgroup"><span class="del-group-icon-img"><img class="del-group-icon" src="/static/netconf/app/images/delete.png" style="cursor:pointer" alt="del-icon"></span>' + self.actions.parseObj.call(self, e, i) + '</div>' : '';
              }
            } else {
              obj += self.actions.parseObj.call(self, e, i);
            }
          });
        }
        data = obj;
        return data;
      },

      createForm: function createForm(res) {
        var self = this;
        var data = self.actions.parseArr.call(self, res);
        $('.form-container').html(data);

        var isValid = true;
        var type = $('select[name="type"]').val();
        var dataName = self.imp_key[type];
        if (dataName === undefined) {
          dataName = [];
        }
        for (var i = 0; i < dataName.length; i++) {

          var _row = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));

          var star = jQuery("<span>", {
            "class": "mandatory"
          });
          $(star).text('*');
          $(_row).append(star);
          $(_row).parent().children('.value-box').addClass("required");

          var row = '';
          var dataName = self.imp_key[type];
          if (dataName === undefined) {
            dataName = [];
          }

          var _loop = function (_i) {

            if (jQuery.type(dataName[_i]) === 'object') {
              k = Object.keys(dataName[_i]);
              val = Object.values(dataName[_i]);
              subg = $('.form-container').find('div[data-key="' + k + '"]');

              _row = $(subg).find($('label[data-val="' + val + '"]'));
            }

            var star = jQuery("<span>", {
              "class": "mandatory"
            });
            $(star).text('*');

            $(_row).each(function (i, e) {
              if (!$(e).find('span').length) {
                $(e).append(star);
                $(e).parent().children('.value-box').addClass("required");
              }
            });
          };

          for (var _i = 0; _i < dataName.length; _i++) {
            var k;
            var val;
            var subg;

            _loop(_i);
          }
        }
      },

      createAnotherForm: function createAnotherForm(res, ele) {
        var self = this;
        var name = $(ele).parent().attr('class');
        var data = $(self.actions.parseArr.call(self, res));
        console.log(data, "data");
        var formGroup = jQuery("<div>", {
          "class": "formgroup"
        });
        $(formGroup).html(data);
        $(formGroup).children('.formRow').addClass('can-del');
        $(ele).append(formGroup);

        var delIcon = jQuery('<span>', {
          "class": 'del-group-icon-img'
        });
        var del = jQuery('<img>', {
          "class": "del-group-icon",
          "src": "/static/netconf/app/images/delete.png",
          "alt": "del-icon"
        });
        $(delIcon).append(del);
        $(formGroup).prepend(delIcon);
        $(formGroup).addClass('can-del');
        $(formGroup).children('.formRow').addClass('can-del');
        // $(formGroup).find('.formgroup').show();
      },
      delFields: function delFields(e) {
        var del = $(e.target).closest('.can-del');
        var parent = $(e.target).closest('.form-sub-group');
        var formsubgroup = $(parent).children('h3');
        var addIcon = $(formsubgroup).children('.add-icon-img');
        var delParent = $(e.target).closest('.formgroup');
        console.log(delParent);
        var form_row = $(delParent).children('> .formRow');
        // let formSubGroup = $(delParent).children('.form-sub-group')
        // if (form_row.length === 0 && formSubGroup.length===0) {
        // $(delParent).closest('.form-sub-group').remove();
        $(delParent).remove();
        // }
        if (form_row.length === 0 || $(parent).children('> .formgroup').length < 5) {
          $(addIcon).removeClass('reach-limit');
        }
      },
      addFields: function addFields(e) {
        var self = this;
        var ele = $(e.target).closest('.form-sub-group');
        var key = $(ele).attr('data-key');
        var ind = $(ele).attr('inx');
        self.indArr.push(ind);
        self.nameArr.push(key);

        self.actions.loopFunction.call(self, ele);
        var nameRev = self.nameArr.reverse();
        var indRev = self.indArr.reverse();
        var dataObj = self.resObj[0];
        self.set('count', 0);
        for (var i = 0; i < nameRev.length; i++) {
          dataObj[nameRev[i]].length > 1 ? dataObj = dataObj[nameRev[i]] : dataObj = dataObj[nameRev[i]][indRev[i]];
        }
        self.actions.createAnotherForm.call(self, dataObj, ele);
        self.set("indArr", []);
        self.set("nameArr", []);
        var formgroup = $(ele).find('>.formgroup.can-del').length;
        if (formgroup >= 5) {
          $(e.target).addClass('reach-limit');
        }

        var data = $(ele).find('.formgroup.can-del');
        for (var i = 0; i < data.length; i++) {
          data[i].scrollIntoView({
            behavior: "smooth"
          });
        }

        var type = $('select[name="type"]').val();
        var row = '';
        var dataName = self.imp_key[type];
        if (dataName === undefined) {
          dataName = [];
        }

        var _loop2 = function (i) {

          if (jQuery.type(dataName[i]) === 'object') {
            k = Object.keys(dataName[i]);
            val = Object.values(dataName[i]);
            subg = $('.form-container').find('div[data-key="' + k + '"]');

            row = $(subg).find($('label[data-val="' + val + '"]'));
          }

          var star = jQuery("<span>", {
            "class": "mandatory"
          });
          $(star).text('*');

          $(row).each(function (i, e) {
            if (!$(e).find('span').length) {
              $(e).append(star);
              $(e).parent().children('.value-box').addClass("required");
            }
          });
        };

        for (var i = 0; i < dataName.length; i++) {
          var k;
          var val;
          var subg;

          _loop2(i);
        }
      },
      loopFunction: function loopFunction(el) {
        var self = this;
        var ele = el.parent();
        if ($(ele.parent().attr('class') === 'form-sub-group')) {
          var key = $(ele).attr('data-key');
          var ind = $(ele).attr('inx');
          if (key !== undefined && ind !== undefined) {
            self.indArr.push(ind);
            self.nameArr.push(key);
          }
          if ($(ele).attr('class') === 'form-container') {
            return;
          } else {
            self.actions.loopFunction.call(self, ele);
          }
          if (self.count === 10) {
            console.log('maxcall stack');
            return;
          }
          self.count++;
        }
      },
      close_popup: function close_popup() {
        this.set('isLoading', false);
        //document.forms[1].reset()
        $('#submit_btn_cicd').prop('disabled', false);
        var modal = document.getElementById('logindivcicd');
        modal.style.display = "None";
      },
      login: function login() {
        if ($('input[name="router"]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }

        var val = [],
            hostNameArray = [];
        $('input[name="router"]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });

        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
          return false;
        }
        var self = this;
        this.set('isLoading', true);
        var getData = $('form[name=loginform]').serialize() + "&routers=" + JSON.stringify(val);
        this.store.post('acommand_session/', getData).then(function (resp) {

          if ('Session open' in resp['data']) {
            $('#submit_btn_cicd').prop('disabled', false);
            (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
            self.send('close_popup');
            return false;
          } else {
            (0, _netconfigUtilsNotify.customNotify)('info', "Credentials Verified !!! <br> Configuration is being added in pipeline. Please wait....", 120000);
            $('input[name="router"]').prop('disabled', true);
            $('input[name="routername"]').prop('disabled', true);
            $('#submit_btn_cicd').prop('disabled', true);
            self.set("sessionCheck", true);
            self.set('isLoading', false);
            self.send('convertToJson');
          }
          self.send('close_popup');
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
          self.send('close_popup');
          $('#submit_btn_cicd').prop('disabled', false);
          self.set('isLoading', false);
        });
      },
      customToggle: function customToggle() {

        var self = this;
        if (self.get("tog") == false) {
          self.set("tog", true);

          //$('div[name="conf_type"]').css("visibility", "hidden")
          self.actions.createForm.call(self, '');

          $('select[name="type"]').prop("disabled", true);

          self.set('showCustomDiv', true);
        } else {
          self.set("tog", false);

          // $('div[name="conf_type"]').css("visibility", "visible")
          self.send('onTypeChange');

          $('select[name="type"]').prop("disabled", false);

          self.get("jinjaEditor").setValue("");
          self.get("jinjaEditor").setReadOnly(false);

          self.set('showCustomDiv', false);
        }
      },
      closePopupCicd: function closePopupCicd() {
        $(".cicd_config").css("visibility", "hidden");
      },
      refresh: function refresh(host) {
        var self = this;
        this.store.getJSON("aconfig/" + host + "/").then(function (res) {
          self.tempDict[host] = res.data;
          self.set("confText", res.data);
        });
      },
      showConfig: function showConfig(name, host) {
        var self = this;
        if (self.tempDict[host] == undefined) {
          self.store.getJSON("aconfig/" + host + "/").then(function (res) {
            self.set("sDevice.host", host);
            self.tempDict[host] = res.data;
            self.set("confText", res.data.trim());
            $(".cicd_config").css("visibility", "visible");
          }, function (err) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data.");
          });
        } else {
          self.set("sDevice.host", host);
          self.set("confText", self.tempDict[host]);
          $(".cicd_config").css("visibility", "visible");
        }
      },
      convertToJson: function convertToJson() {
        var self = this;
        var type = $('select[name="type"]').val();
        var finalArr = [];
        var customArr = [];
        var template_name = '';

        if (self.get("tog") == true) {
          type = "custom";
          var custom_template_select = $('select[name="template_name_list"]').val();
          if (custom_template_select == "None") {
            template_name = $('input[name="template_name"]').val().trim();
            if (template_name == '') {
              var input = $('input[name="template_name"]');
              $(input).focus();
              (0, _netconfigUtilsNotify.customNotify)("error", "Enter template name !!!");
              return false;
            }
            if (self.get("content").custom_template.includes(template_name)) {
              var input = $('input[name="template_name"]');
              $(input).focus();
              (0, _netconfigUtilsNotify.customNotify)("error", "Template name already exitsts !!!");
              return false;
            }
            template_name = template_name + "_new";
          } else {
            template_name = custom_template_select;
          }
        }

        if ($('input[name="router"]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }

        var val = [],
            hostNameArray = [];
        $('input[name="router"]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });

        var config_comment = $('input[name="config_comment"]').val().trim();
        if (config_comment.length == 0) {
          var input = $('input[name="config_comment"]');
          $(input).focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Select enter configuration comment");
          return false;
        }

        var approver = $('select[name="approver_email"]').val().trim();
        if (approver.length == 0) {
          var input = $('select[name="approver_email"]');
          $(input).focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Select an approver email");
          return false;
        }

        var v = document.getElementsByClassName('value-box');
        var re = /[a-zA-Z0-9\.\/:_\-]/g;
        var flag = true;

        $(v).each(function (i, e) {
          var temp = $(e).val().trim();

          if (temp.length > 300) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please make sure inputs are less than 300 characters");
            flag = false;
          }

          var ne = temp.replace(re, '').trim();
          if (ne != '') {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please avoid special character except \".\" and \"/\"");
            flag = false;
          }
        });

        if (type.length == 0 && self.get("tog") == false) {
          var input = $('select[name="type"]');
          $(input).focus();
          var toggle_check = $('input[name="cusTogg"]');
          $(toggle_check).focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Please select a congifuration type or custom config checkbox");
          flag = false;
        }

        var arr = [];
        var fullObj = {};
        var rowObject = {};
        var subRowObject = {};
        var container = $('.form-container').children();
        $(container).each(function (i, e) {
          if ($(e).attr('class') === 'formRow') {
            rowObject = self.actions.parseFormRow.call(self, e);
          }
          if ($(e).attr('class') === 'form-sub-group') {
            subRowObject = self.actions.parseFormSubGroup.call(self, e);
          }
          Object.assign(fullObj, rowObject, subRowObject);
        });
        var isValid = true;
        var dataName = self.imp_key[type];

        if (dataName === undefined) {
          dataName = [];
        }

        for (var i = 0; i < dataName.length; i++) {
          var not_filed = true;
          if (jQuery.type(dataName[i]) === 'object') {
            var key;
            var len;
            var len;

            (function () {
              key = Object.keys(dataName[i]);

              var val = Object.values(dataName[i]);
              var formSubGroup = $('.form-container').find($('.form-sub-group[data-key="' + key + '"]'));
              var subgroup = $(formSubGroup).find($('label[data-val="' + val + '"]'));
              if ($(formSubGroup).attr('data-key') === 'peer_group') {
                var _parent = $(formSubGroup).children('.formgroup');
                var box = $(_parent).find('.value-box');
                len = box.filter(function () {
                  return $.trim($(this).val()).length > 0;
                });

                if (len.length === 0) {
                  not_filed = false;
                }
                if (len.length > 0) {
                  not_filed = true;
                }
              }
              if ($(formSubGroup).attr('data-key') === 'peer_group_ip') {
                var _parent2 = $(formSubGroup).children('.formgroup');
                var box = $(_parent2).find('.value-box');
                len = box.filter(function () {
                  return $.trim($(this).val()).length > 0;
                });

                if (len.length === 0) {
                  not_filed = false;
                }
                if (len.length > 0) {
                  not_filed = true;
                }
              }
              if (not_filed) {

                $(subgroup).each(function (i, e) {

                  if ($(e).parent().children('.value-box').val().trim() === '') {
                    var eleParent = $(e).parent();
                    console.log(eleParent);
                    $('.innerContainer').animate({
                      scrollTo: $(eleParent).offset().top
                    }, 2000);
                    var input = $(eleParent).children('.value-box');
                    $(input).focus();
                    (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + val);
                    isValid = false;
                  }
                });
              }
            })();
          }
          if (type === 'classmap') {
            var filled = true;
            var _row2 = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));
            if ($('.formRow').find($('label[data-val="' + dataName[0] + '"]')).siblings('.value-box').val() !== '' || $('.formRow').find($('label[data-val="' + dataName[1] + '"]')).siblings('.value-box').val() !== '') {
              isValid = true;
              filled = false;
              break;
            }
            if (filled) {
              if ($(_row2).parent().children('.value-box').val().trim() === '') {
                var ele = $(_row2).parent();
                $('.innerContainer').animate({
                  scrollTo: $(ele).offset().top
                }, 2000);
                var input = $(ele).children('.value-box');
                $(input).focus();
                (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + dataName[i]);
              }
            }
          }
          var row = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));
          if ($(row).parent().children('.value-box').val() === '') {
            var ele = $(row).parent();
            $('.innerContainer').animate({
              scrollTo: $(ele).offset().top
            }, 2000);
            var input = $(ele).children('.value-box');
            $(input).focus();
            (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + dataName[i]);
            isValid = false;
          }
        }
        if (!isValid) {
          return false;
        }
        if (type == "custom") {

          var editor = self.get("jinjaEditor");
          var jinja = editor.getValue().trim();
          if (jinja == "") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter text for JINJA TEMPLATE !!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }

          var editor = self.get("yamlEditor");
          var yaml_data = editor.getValue().trim();
          if (yaml_data == "") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter text for YAML DATA !!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }

          console.log(yaml_data);
          console.log(jinja);
          var regularExpression = /\boperation\b|\bswitches\b|\bcommands\b|\bmeta\b/g;
          if (regularExpression.test(yaml_data.toLowerCase()) == true || regularExpression.test(jinja.toLowerCase()) == true) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please avoid words - \"operation , switches , meta , commands\"");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }
          var regEx = /[a-zA-Z0-9\.\/:_\-}!{%"',)(<>=+*&)]/g;
          var yam = yaml_data.replace(regEx, '').trim();
          var jin = jinja.replace(regEx, '').trim();
          if (yam != '') {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter valid data for YAML!!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }
          if (jin != '') {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter valid data for JINJA!!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }

          customArr.push({ "yaml": yaml_data, "jinja": jinja });
          finalArr = customArr;
          console.log(customArr);
        } else {
          arr.push(fullObj);
          finalArr = arr;
          console.log(arr);
        }

        $('#submit_btn_cicd').prop('disabled', true);
        //       if(self.get("sessionCheck")==false)
        //       {
        //         if(flag)
        //         {     
        //         $('#submit_btn_cicd').prop('disabled',true)     
        //         this.store.post('pipelinePush/',{host:JSON.stringify(val)}).then(function(res){

        //         if(res.data.status==='success')
        //         {
        //           customNotify("success", "Active session exists !!!")
        //           this.set("sessionCheck",true)
        //         }
        //         if(res.data.status==='failed')
        //         {
        //           customNotify("error", "There is no existing session")

        //           if(flag){
        //             var modal = document.getElementById('logindivcicd')
        //             modal.style.display = "block";
        //             }
        //         }
        //         });
        //       }

        //  }
        //   else{

        if (flag) {
          if (self.get("sessionCheck") == false) {
            (0, _netconfigUtilsNotify.customNotify)('info', "Please Wait While Checking For Existing Session !!!", 120000);
          }
          self.store.post('pipelinePush/', { commit_msg: config_comment, host: JSON.stringify(val), type: type, commands: JSON.stringify(finalArr), approver_email: approver, template_name: template_name }).then(function (res) {

            if (res.data.status === 'success') {

              (0, _netconfigUtilsNotify.customNotify)("success", "Sent Successfully !!!");
              $('input').val('');
              $('input[name="config_comment"]').val('');
              self.set("isPodTypeSelected", false);
              $('.value-box').val('').trigger('chosen:updated');
              $('.selected').val('').trigger('chosen:updated');
              self.set('showCustomDiv', false);
              self.set("tog", false);
              $('.form-container').empty();
              var Data = "&router=" + JSON.stringify(val);

              self.store.getJSON('amultipleconf/', Data).then(function (resp) {
                if ("notdisconnected" in resp['data']) {
                  (0, _netconfigUtilsNotify.customNotify)("error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
                } else {
                  self.set("sessionCheck", false);
                  self.get('router').transitionTo("testflow.pipeline");
                  (0, _netconfigUtilsNotify.customNotify)("success", "Added the configuration in pipeline!!!");
                  console.log("Successfully closed all connections!");
                }
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data");
              });
            }
            if (res.data.status === 'failed') {
              if (res.data.msg == 'No Existing Connection') {
                if (flag) {
                  var modal = document.getElementById('logindivcicd');
                  (0, _netconfigUtilsNotify.customNotify)("error", "No Existing Connection");
                  modal.style.display = "block";
                }
              } else {
                (0, _netconfigUtilsNotify.customNotify)("error", res.data.msg);
                $('#submit_btn_cicd').prop('disabled', false);
              }
            }
          }, function (err) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data");
          });
        }

        // }
        $('input[name="router"]').prop('disabled', false);
        $('input[name="routername"]').prop('disabled', false);
      },

      parseFormRow: function parseFormRow(ele) {
        var self = this;
        var obj = {};
        var label = undefined;
        var value = undefined;
        $(ele).each(function (i, e) {
          label = $(e).children(".key-box").attr('data-val');
          console.log($(e).children(".key-box").attr('data-val'));
          value = $(e).children('.value-box').val();
          label === '' ? label = $(e).children('.input-box').attr('placeholder') : label;
          var arr = [];
          arr.push($(e).children('.input-box').val());
          value === undefined ? value = arr : value;
          obj = _defineProperty({}, label, value);
        });
        return obj;
      },

      parseFormSubGroup: function parseFormSubGroup(ele) {
        var self = this;
        var obj = {};
        var arrLabel = $(ele).attr('data-key');
        var tempArr = [];
        $(ele).find('> .formgroup').each(function (i, e) {
          var tempObj = {};
          $(e).children().each(function (i, e) {
            if ($(e).attr('class') === 'formRow') {
              var label = $(e).children(".key-box").attr('data-val');
              var value = $(e).find('.value-box').val();
              label === '' ? label = $(e).find('.input-box').attr('placeholder') : label;
              var arr = [];
              arr.push($(e).find('.input-box').val());
              value === undefined ? value = arr : value;
              tempObj[label] = value;
            }
            if ($(e).attr('class') === 'formRow can-del') {
              var label = $(e).children(".key-box").attr('data-val');
              var value = $(e).find('.value-box').val();
              label === '' ? label = $(e).find('.input-box').attr('placeholder') : label;
              var arr = [];
              arr.push($(e).find('.input-box').val());
              value === undefined ? value = arr : value;
              tempObj[label] = value;
            }
            if ($(e).attr('class') === 'form-sub-group') {
              var temp = self.actions.parseFormSubGroup.call(self, e);
              Object.assign(tempObj, temp);
            }
          });
          tempArr.push(tempObj);
        });
        obj[arrLabel] = tempArr;
        return obj;
      }
    }
  });
});
define('netconfig/controllers/lanconf/command/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        pods: [],
        podhosts: [],
        userRouter: [],
        routerwithHost: [],
        isShowApprove: false,
        approver_name: "",
        isSaving: false,
        isLoading: false,
        isPodTypeSelected: false,
        isRouterConnected: false,
        editor: {},
        cmdResultShow: false,
        sugRouter: null,

        initEditor: function initEditor() {
            var self = this;
            this.set('isRouterConnected', false);
            this.set('isPodTypeSelected', false);
            this.set('cmdResultShow', false);
            this.set('podhosts', []);
            _ember['default'].run.schedule("afterRender", function () {
                self.set("cmdResult", "");
                var langTools = ace.require("ace/ext/language_tools");
                var editor = ace.edit("editor");
                self.set("editor", editor);
                editor.setOptions({
                    enableBasicAutocompletion: true,
                    enableLiveAutocompletion: true
                });
                var cmdCompleter = {
                    getCompletions: function getCompletions(editor, session, pos, prefix, callback) {
                        console.log("check0");
                        if (prefix.length === 0) {
                            callback(null, []);return;
                        }
                        var router = self.get("sugRouter");
                        var lineText = session.getLine(pos.row).substring(0, pos.column);
                        self.get('store').getJSON("acommand/?router=" + router + "&cmd=" + lineText).then(function (res) {
                            callback(null, res.data.result.map(function (word) {
                                return { name: word, value: word, score: 10, meta: "CLI autocomplete" };
                            }));
                        });
                    }
                };
                $('.formContainer').on('change', 'input[type="checkbox"]', function () {
                    if ($(this).attr('name') === "routername") {
                        if ($(this).is(':checked')) {
                            $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
                        } else {
                            $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
                        }
                    } else {
                        if ($(this).is(':checked')) {
                            if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
                            } else {
                                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
                            }
                        } else {
                            $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
                        }
                    }
                });
                //langTools.setCompleter(cmdCompleter);
            });
        },
        actions: {
            setdc: function setdc() {
                var dc = $('select[name="dc"]').val();
                if (dc) {
                    var pods = [];
                    for (var key in this.get("content").routers[dc]) {
                        pods.push(key);
                    }
                    this.set('pods', pods);
                    this.send('fetchhosts');
                    _ember['default'].run.next(function () {
                        $('select[name="podtype"]').trigger('chosen:updated');
                    });
                }
            },
            fetchhosts: function fetchhosts() {
                var pod = $('select[name="podtype"]').val();
                if (pod) {
                    var devices = this.get("content").routers[$('select[name="dc"]').val()][pod];
                    if (pod != 'Super spine') {
                        this.set('isSspine', false);
                        var data = {};
                        for (var i = 0; i < devices.length; i++) {
                            if (devices[i].category in data) {
                                data[devices[i].category].push(devices[i]);
                            } else {
                                data[devices[i].category] = [devices[i]];
                            }
                        }
                        this.set("podhosts", data);
                    } else {
                        this.set('isSspine', true);
                        this.set("podhosts", devices);
                    }
                    this.set("isPodTypeSelected", true);
                } else {
                    this.set("isPodTypeSelected", false);
                }
            },
            getlogin: function getlogin() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="auser"]'))) {
                    return false;
                }
                if ($('input[name="router"]:checked').length == 0) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
                    return false;
                }
                var val = [],
                    val1 = [];
                console.log($('input[name="router"]:checked').val());
                $('input[name="router"]:checked').each(function (i) {
                    val[i] = $(this).val().split(",")[1];
                    val1[i] = $(this).val().split(",");
                });
                this.set('userRouter', val);
                this.set('routerwithHost', val1);
                var modal = document.getElementById('logindiv');
                modal.style.display = "block";
            },
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
                    return false;
                }
                var self = this;
                this.set('isLoading', true);
                var getData = $('form[name=loginform]').serialize() + "&routers=" + JSON.stringify(this.get('userRouter')) + "&name=" + $('input[name="name"]').val();
                this.get('store').post('acommand_session/', getData).then(function (resp) {
                    if ('Session open' in resp['data']) {
                        (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
                        self.send('close_popup');
                        return false;
                    }
                    var dcname = $('select[name="dc"]').val(),
                        podtype = $('select[name="podtype"]').val(),
                        uname = $('input[name="name"]').val();
                    self.set("userAbsent", self.get('routerwithHost'));
                    self.set('isRouterConnected', true);
                    _ember['default'].run.next(function () {
                        $('input[name="dcname"]').val(dcname);
                        $('input[name="pdtype"]').val(podtype);
                    });
                    $(".cmd_form").css("visibility", "visible");
                    self.get("editor").focus();
                    self.set("cmdResultShow", true);
                    self.send('close_popup');
                }, function (err) {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
                    self.set('isLoading', false);
                });
            },
            close_popup: function close_popup() {
                this.set('isLoading', false);
                //document.forms[1].reset()
                var modal = document.getElementById('logindiv');
                modal.style.display = "None";
            },
            approve: function approve() {
                var editor = this.get("editor");
                var cmds = editor.getValue().split("\n").removeObject("");
                var val = [],
                    self = this;
                $(':checkbox:checked').each(function (i) {
                    val[i] = $(this).val();
                });
                if ($('input[name="config_comment"]').val() === "") {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Please enter config comment.");
                    return false;
                }
                var approver = "";
                if (this.get("content.isAdminAccount") === true) {
                    approver = localStorage.getItem("appuser");
                } else {
                    approver = $('select[name="approver_email"]').val();
                }
                self.set('approver_name', approver);
                var postdata = "routers=" + JSON.stringify(val) + "&cmds=" + JSON.stringify(cmds) + '&approver_email=' + self.get("approver_name") + '&config_comment=' + $('input[name="config_comment"]').val();
                self.set('isSaving', true);
                this.get('store').post('workflow/', postdata).then(function (resp) {
                    self.set('isSaving', false);
                    if (resp.data == null) {
                        (0, _netconfigUtilsNotify.customNotify)("error", "Invalid command!");
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)("success", resp.data);
                        self.set('isShowApprove', false);
                        self.send('reloadPage');
                    }
                }, function (err) {
                    self.set('isSaving', false);
                    self.send('cancel');
                });
            },
            submit: function submit() {
                var editor = this.get("editor");
                var cmds = editor.getValue().split("\n").removeObject("");
                if (cmds == "") {
                    (0, _netconfigUtilsNotify.customNotify)("error", "No Command input found.");
                    return false;
                }
                if ($(':checkbox:checked').length == 0) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
                    return false;
                }
                var val = [],
                    self = this;
                $(':checkbox:checked').each(function (i) {
                    val[i] = $(this).val();
                });
                var isValid = true;
                $(cmds).each(function (i, e) {
                    if (!/^sh/.test(e)) {
                        isValid = false;
                        return false;
                    }
                });

                if (!isValid) {
                    if (this.get("content.isAdminAccount") === false) {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Click Sumbmit and Get Approval for Configuration Commands.');
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Enter Configuration Comment Before Executing');
                    }
                    this.set('isShowApprove', true);
                    return false;
                } else {
                    this.set('isShowApprove', false);
                }
                this.set("isSaving", true);

                console.log(cmds);
                var approver1 = "";
                if (this.get("content.isAdminAccount") === true) {
                    approver1 = localStorage.getItem("appuser");
                } else {
                    approver1 = $('select[name="approver_email"]').val();
                }
                var self = this;
                self.set('approver_name', approver1);
                var postdata = "routers=" + JSON.stringify(val) + "&cmds=" + JSON.stringify(cmds) + '&approver_email=' + self.get("approver_name") + '&config_comment=' + $('input[name="config_comment"]').val();
                console.log("postdata: ", postdata);

                this.get('store').post('acommand/', postdata).then(function (resp) {
                    self.set('isSaving', false);
                    if (resp.data == null) {
                        (0, _netconfigUtilsNotify.customNotify)("error", "Invalid command!");
                    } else {
                        self.set("cmdResult", resp.data.replace(/\s+$/g, ''));
                    }
                }, function (err) {
                    self.set('isSaving', false);
                    self.send('cancel');
                });
            },
            cancel: function cancel() {
                var self = this,
                    deldata = "&router=" + JSON.stringify(this.get('userRouter'));
                this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
                    if ("notdisconnected" in resp['data']) {
                        (0, _netconfigUtilsNotify.customNotify)("error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
                    } else {
                        console.log("Successfully closed all connections!");
                    }
                    // $("form[name=auser]")[0].reset()
                    self.set('isRouterConnected', false);
                    self.set('isPodTypeSelected', false);
                    self.set('pods', []);
                    $(".cmd_form").css("visibility", "hidden");
                    self.set("cmdResult", "");
                    self.set("cmdResultShow", false);
                    self.get("editor").setValue("");
                });
            }
        }
    });
});
define('netconfig/controllers/lanconf/configuser/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        pods: [],
        podhosts: [],
        userRouter: [],
        userPresent: [],
        userAbsent: [],
        routerwithHost: [],
        isSaving: false,
        isLoading: false,
        isPodTypeSelected: false,
        isRouterConnected: false,
        init: function init() {
            this.set('isPodTypeSelected', false);
            this.set('isRouterConnected', false);
            this.set('podhosts', []);
        },
        actions: {
            onLoad: function onLoad() {
                $('.formContainer').on('change', 'input[type="checkbox"]', function () {
                    if ($(this).attr('name') === "routername") {
                        if ($(this).is(':checked')) {
                            $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
                        } else {
                            $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
                        }
                    } else {
                        if ($(this).is(':checked')) {
                            if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
                            } else {
                                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
                            }
                        } else {
                            $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
                        }
                    }
                });
            },
            setdc: function setdc() {
                var dc = $('select[name="dc"]').val();
                if (dc) {
                    var pods = [];
                    for (var key in this.get("content").routers[dc]) {
                        pods.push(key);
                    }
                    this.set('pods', pods);
                    this.send('fetchhosts');
                    _ember['default'].run.next(function () {
                        $('select[name="podtype"]').trigger('chosen:updated');
                    });
                }
            },
            fetchhosts: function fetchhosts() {
                var pod = $('select[name="podtype"]').val();
                if (pod) {
                    var devices = this.get("content").routers[$('select[name="dc"]').val()][pod];
                    if (pod != 'Super spine') {
                        this.set('isSspine', false);
                        var data = {};
                        for (var i = 0; i < devices.length; i++) {
                            if (devices[i].category in data) {
                                data[devices[i].category].push(devices[i]);
                            } else {
                                data[devices[i].category] = [devices[i]];
                            }
                        }
                        this.set("podhosts", data);
                    } else {
                        this.set('isSspine', true);
                        this.set("podhosts", devices);
                    }
                    this.set("isPodTypeSelected", true);
                } else {
                    this.set("isPodTypeSelected", false);
                }
            },
            getlogin: function getlogin() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="auser"]'))) {
                    return false;
                }
                if ($('input[name="router"]:checked').length == 0) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
                    return false;
                }

                var val = [],
                    val1 = [];
                $('input[name="router"]:checked').each(function (i) {
                    val[i] = $(this).val().split(",")[1];
                    val1[i] = $(this).val().split(",");
                });
                this.set('userRouter', val);
                this.set('routerwithHost', val1);
                var modal = document.getElementById('logindiv');
                modal.style.display = "block";
            },
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
                    return false;
                }

                var self = this;
                this.set('isLoading', true);
                var getData = $('form[name=loginform]').serialize() + "&routers=" + JSON.stringify(this.get('userRouter')) + "&name=" + $('input[name="name"]').val();
                //console.log("Login data:", getData)
                this.get('store').post('userlogin/', getData).then(function (resp) {
                    //console.log("Response for check acl call:", resp)
                    if ('Session open' in resp['data']) {
                        (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
                        self.send('close_popup');
                        return false;
                    }
                    var dcname = $('select[name="dc"]').val(),
                        podtype = $('select[name="podtype"]').val(),
                        uname = $('input[name="name"]').val();
                    var present = 'user-present' in resp['data'] ? resp['data']['user-present'] : [];
                    var absent = 'user-absent' in resp['data'] ? resp['data']['user-absent'] : [];
                    var temp1 = [],
                        temp2 = [],
                        rwh = self.get('routerwithHost');
                    for (var i = 0; i < rwh.length; i++) {
                        if (present.indexOf(rwh[i][1]) != -1) {
                            temp1.addObject(rwh[i]);
                        } else if (absent.indexOf(rwh[i][1]) != -1) {
                            temp2.addObject(rwh[i]);
                        }
                    }
                    self.set("userPresent", temp1);
                    self.set("userAbsent", temp2);
                    self.set('isRouterConnected', true);
                    _ember['default'].run.next(function () {
                        $('input[name="dcname"]').val(dcname);
                        $('input[name="pdtype"]').val(podtype);
                        $('input[name="name"]').val(uname);
                    });
                    self.send('close_popup');
                }, function (err) {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
                    self.set('isLoading', false);
                });
            },
            close_popup: function close_popup() {
                this.set('isLoading', false);
                //document.forms[1].reset()
                var modal = document.getElementById('logindiv');
                modal.style.display = "None";
            },
            submit: function submit() {
                //console.log("Creating/editing users!")
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="auser"]'))) {
                    return false;
                }
                if ($(':checkbox:checked').length == 0) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
                    return false;
                }
                var val = [],
                    self = this;
                $(':checkbox:checked').each(function (i) {
                    val[i] = $(this).val();
                });
                this.set("isSaving", true);
                var postdata = $('form[name=auser]').serialize() + "&routers=" + JSON.stringify(val);
                //console.log("Post data:", postdata)
                this.get('store').post('user/', postdata).then(function (resp) {
                    //console.log("Response of post user data", resp)
                    self.set('isSaving', false);
                    if ('creation-failed' in resp['data']) {
                        (0, _netconfigUtilsNotify.customNotify)('error', "User create/edit failed in " + resp['data']['creation-failed'].join(", "));
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('success', "User successfully created/edited!");
                    }
                    self.send('cancel');
                }, function (err) {
                    self.set('isSaving', false);
                    self.send('cancel');
                });
            },
            cancel: function cancel() {
                //console.log("Cancelling all connections!")
                var self = this,
                    deldata = "&router=" + JSON.stringify(this.get('userRouter'));
                //console.log("Delele connections data in config user: ", deldata)
                this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
                    //console.log("Response of delete multiple connection:", resp)
                    if ("notdisconnected" in resp['data']) {
                        (0, _netconfigUtilsNotify.customNotify)("Error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
                    } else {
                        console.log("Successfully closed all connections!");
                    }
                    $("form[name=auser]")[0].reset();
                    self.set('isRouterConnected', false);
                    self.set('isPodTypeSelected', false);
                    self.set('pods', []);
                });
            }
        }
    });
});
define('netconfig/controllers/lanconf/interfaces/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    appCtrl: _ember['default'].inject.controller('application'),
    pods: [],
    podhosts: [],
    lanconfRouter: [],
    validRouter: [],
    isLoading: false,
    isPodTypeSelected: false,
    showForm0: true,
    interfaceNumber: null,
    interfaceType: null,
    portChannel: false,
    approver_email: '',
    config_comment: '',
    vlan: false,
    present: [],
    absent: [],
    inttypes: [],
    formName: null,
    routerWithHost: [],
    channelGroup: true,
    l2Vlan: false,
    showVlan: true,

    init: function init() {
      $('textarea[name="vlan"]').tagsInput({
        width: '100%',
        defaultText: 'id',
        onAddTag: function onAddTag(a, b) {},
        onRemoveTag: function onRemoveTag(a, b, c) {}
      });
    },

    actions: {

      onLoad: function onLoad() {
        $('.innerContainer').on('change', 'input[type="checkbox"]', function () {
          if ($(this).attr('name') === "routername") {
            if ($(this).is(':checked')) {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
            } else {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
            }
          } else {
            if ($(this).is(':checked')) {
              if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
              } else {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
              }
            } else {
              $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
            }
          }
        });
      },
      disconnect: function disconnect() {
        var present = Array.from(this.get("present"), function (_, i) {
          return _[1];
        });
        var absent = Array.from(this.get("absent"), function (_, i) {
          return _[1];
        });
        var hosts = (present ? present : []).concat(absent ? absent : []);
        var self = this,
            deldata = "&router=" + JSON.stringify(hosts);
        this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
          if ("notdisconnected" in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)("Error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
          } else {
            console.log("Successfully closed all connections!");
          }
        });
      },

      setdc: function setdc() {
        var dc = $('select[name="dc"]').val();
        console.log("Selected dc: ", dc);
        if (dc) {
          var pods = [];
          for (var key in this.get("content").routers[dc]) {
            pods.push(key);
          }
          this.set('pods', pods);
          this.send('fetchhosts');
          _ember['default'].run.next(function () {
            $('select[name="podtype"]').trigger('chosen:updated');
          });
        }
      },
      fetchhosts: function fetchhosts() {
        var pod = $('select[name="podtype"]').val();
        if (pod) {
          var devices = this.get("content").routers[$('select[name="dc"]').val()][pod];
          if (pod != 'Super spine') {
            this.set('isSspine', false);
            var data = {};
            for (var i = 0; i < devices.length; i++) {
              if (devices[i].category in data) {
                data[devices[i].category].push(devices[i]);
              } else {
                data[devices[i].category] = [devices[i]];
              }
            }
            this.set("podhosts", data);
          } else {
            this.set('isSspine', true);
            this.set("podhosts", devices);
          }
          this.set("isPodTypeSelected", true);
        } else {
          this.set("isPodTypeSelected", false);
        }
      },
      getlogin: function getlogin() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="alconf"]'))) {
          return false;
        }

        if ($('form[name=alconf]')[0].interfacetype.value === "Vlan" || $('form[name=alconf]')[0].interfacetype.value == "Vxlan") {

          if ($('input[type="checkbox"][name="router"][data-router="Spine"]:checked').length || $('input[type="checkbox"][name="router"][data-router="CVX"]:checked').length) {
            (0, _netconfigUtilsNotify.customNotify)("error", $('form[name=alconf]')[0].interfacetype.value + " cannot be created on Spine and CVX");
            $('input[type="checkbox"][data-router="Spine"]:checked').prop('checked', false);
            $('input[type="checkbox"][data-router="CVX"]:checked').prop('checked', false);
            return false;
          }

          if ($('select[name="podtype"]').val() === "Super spine") {
            $('input[type="checkbox"][name="router"], input[type="checkbox"][name="routername"]').prop('checked', false);
            (0, _netconfigUtilsNotify.customNotify)("error", $('form[name=alconf]')[0].interfacetype.value + " cannot be created on SuperSpine");
            return false;
          }
        }

        if ($('form[name=alconf]')[0].interfacetype.value == "Ethernet") {
          //console.log("Inside ethernet!")
          if (!this.ValidateEthernet($('form[name=alconf]')[0].interfacenumber.value)) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid interface number/range!");
            return false;
          }
        } else {
          //console.log("Inside not ethernet!")
          if (!this.ValidateIntfAddress($('form[name=alconf]')[0].interfacenumber.value)) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid interface number/range!");
            return false;
          }
        }
        if ($('form[name=alconf] input[name=router]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var val = [],
            hostNameArray = [];
        $('form[name=alconf] input[name=router]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });
        this.set('lanconfRouter', val);
        this.set('routerWithHost', hostNameArray);
        this.set("type", $('form[name=alconf]')[0].type.value);
        this.set("interfaceType", $('form[name=alconf]')[0].interfacetype.value);
        this.set("interfaceNumber", $('form[name=alconf]')[0].interfacenumber.value);
        var approver_name = "";
        if (this.get("content.isAdminAccount") == true) {
          approver_name = localStorage.getItem("appuser");
        } else {
          approver_name = $('select[name="approver_email"]').val();
        }
        this.set('approver_email', approver_name);
        this.set('config_comment', $('input[name="config_comment"]').val());

        var modal = document.getElementById('logindiv');
        modal.style.display = "block";
      },
      close_popup: function close_popup() {
        console.log("close function called.");
        this.set('isLoading', false);
        //document.forms[1].reset()
        var modal = document.getElementById('logindiv');
        modal.style.display = "None";
      },

      login: function login() {
        var self = this;
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
          return false;
        }
        this.set('isLoading', true);
        var acheckacldata = $('form[name=loginform]').serialize() + "&routers=" + JSON.stringify(this.get('lanconfRouter')) + "&" + $('form[name=alconf]').serialize();

        this.get('store').post('acheckint/', acheckacldata).then(function (resp) {
          if ('Session open' in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
            self.send('close_popup');
            return false;
          }
          self.set("present", resp.data["interface-present"]);
          self.set("absent", resp.data["interface-absent"]);
          self.setPresent();
          if (self.get("type") == "L3") {
            self.set("formName", "Form4");
            self.toggleForm4();
          } else if (self.get("interfaceType") == "Vxlan") {
            self.set("formName", "Form3");
            self.toggleForm3();
          } else if (self.get("interfaceType") == "Vlan") {
            self.set("formName", "Form2");
            self.toggleForm2();
          } else {
            self.set("formName", "Conf");
            self.toggleForm1();
          }
          self.toggleForm0();
          self.send("close_popup");
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
          self.set('isLoading', false);
        });
      },
      confFormSubmit: function confFormSubmit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="ConfForm"]'))) {
          return false;
        }
        var spType = $("form[name=ConfForm] select[name=switchport_type]").val();
        var vlan = $("form[name=ConfForm] textarea[name=vlan]").val();
        if (spType == "access" || spType == "trunk") {
          if (vlan == "") {
            (0, _netconfigUtilsNotify.customNotify)('error', "Enter Vlan Value.");
            return false;
          }
        }
        if (vlan != "") {
          if (spType == "" || spType == " ") {
            (0, _netconfigUtilsNotify.customNotify)('error', "Select Switchport Type.");
            return false;
          }
        }
        if (spType == "access") {
          if (vlan.split(",").length > 1) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Switchport type access can't have more than one vlan.");
            return false;
          }
        }
        var val = [];
        $('form[name=ConfForm] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=ConfForm]").serialize() + "&interfacetype=" + this.get("interfaceType") + "&interfacenumber=" + this.get("interfaceNumber") + "&routers=" + JSON.stringify(val) + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {

          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelConf");
        }, function (err) {
          self.set("isLoading", false);
          console.log(err);
        });
      },
      form2Submit: function form2Submit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="Form2"]'))) {
          return false;
        }
        var val = [];
        $('form[name=Form2] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=Form2]").serialize() + "&routers=" + JSON.stringify(val) + "&vlan=" + this.get("interfaceNumber") + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {
          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelForm2");
        }, function (err) {
          self.set("isLoading", false);
          (0, _netconfigUtilsNotify.customNotify)('error', err);
          console.log(err);
        });
      },
      form3Submit: function form3Submit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="Form3"]'))) {
          return false;
        }
        var val = [];
        $('form[name=Form3] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=Form3]").serialize() + "&interfacetype=" + this.get("interfaceType") + "&interfacenumber=" + this.get("interfaceNumber") + "&routers=" + JSON.stringify(val) + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {
          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelForm3");
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', err);
          self.set("isLoading", false);
          console.log(err);
        });
      },
      form4Submit: function form4Submit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="Form4"]'))) {
          return false;
        }
        var ipaddr = $("input[name=ipaddr]").val();

        if (ipaddr != "" && !this.ValidateIPaddress(ipaddr)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid ip address with mask.");
          return false;
        }
        var aclName = $("form[name='Form4'] input[name='acl']").val();
        var aclDirection = $("form[name='Form4'] select[name='acl_direction']").val();
        if (aclName != "") {
          if (aclDirection == "" || aclDirection == " ") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Select Access List Direction.");
            return false;
          }
        }
        if (aclDirection != "" && aclDirection != " ") {
          if (aclName == "" || aclName == undefined) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Provide Access List name.");
            return false;
          }
        }

        var val = [];
        $('form[name=Form4] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=Form4]").serialize() + "&interfacetype=" + this.get("interfaceType") + "&interfacenumber=" + this.get("interfaceNumber") + "&routers=" + JSON.stringify(val) + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {
          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelForm4");
        }, function (err) {
          self.set("isLoading", false);
          console.log(err);
        });
      },
      cancelConf: function cancelConf() {
        this.toggleForm1();
        this.toggleForm0();
        this.set("channelGroup", true);
        this.set("pods", []);
        this.set("formName", null);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        self.set("isLoading", false);
      },
      cancelForm2: function cancelForm2() {
        this.toggleForm2();
        this.toggleForm0();
        this.set("pods", []);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        this.set("formName", null);
        self.set("isLoading", false);
      },
      cancelForm3: function cancelForm3() {
        this.toggleForm3();
        this.toggleForm0();
        this.set("pods", []);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        this.set("formName", null);
        self.set("isLoading", false);
      },
      cancelForm4: function cancelForm4() {
        this.toggleForm4();
        this.toggleForm0();
        this.set("pods", []);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        this.set("formName", null);
        self.set("isLoading", false);
      },
      updateType: function updateType() {
        this.send("l2VlanCheck");
        if ($("select[name=type]").val() == "L2") {
          this.set("inttypes", ["Ethernet", "Port-Channel", "Vlan", "Vxlan"]);
        } else {
          this.set("inttypes", ["Ethernet", "Port-Channel", "Vlan"]);
        }
        _ember['default'].run.next(function () {
          $("select[name=interfacetype]").trigger('chosen:updated');
        });
      },
      hideChannelGroup: function hideChannelGroup() {
        var val = $('select[name="switchport_type"]').val();
        if (val == " ") {
          this.set("channelGroup", true);
          $('textarea[name="vlan"]')[0].value = "";
          $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2) {
            param2.remove();
          });
          $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
          $('textarea[name="vlan"]').next('.tagsinput').find('input').attr("disabled", true);
        } else {
          this.set("channelGroup", false);
          $('textarea[name="vlan"]').next('.tagsinput').find('input').attr("disabled", false);
        }
      },
      l2VlanCheck: function l2VlanCheck() {
        var type = $('select[name="type"]').val();
        var intType = $('select[name="interfacetype"]').val();
        if (type == "L2" && intType == "Vlan") {
          this.set("l2Vlan", true);
        } else {
          this.set("l2Vlan", false);
        }
      }
    },
    toggleForm0: function toggleForm0() {
      if (this.get("showForm0")) {
        this.set("showForm0", false);
      } else {
        this.set("showForm0", true);
      }
    },
    toggleForm1: function toggleForm1() {
      if (this.get("interfaceType") == "Port-Channel") {
        this.set("portChannel", true);
      } else {
        this.set("portChannel", false);
      }
      if ($(".LanIntConf").css("visibility") == "hidden") {
        this.init();
        $(".LanIntConf").css("visibility", "visible");
      } else {
        $("form[name=ConfForm]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2, param3) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=ConfForm] select').trigger('chosen:updated');
        $(".LanIntConf").css("visibility", "hidden");
      }
    },
    toggleForm2: function toggleForm2() {
      if ($(".LanVlanConf").css("visibility") == "hidden") {
        this.init();
        $(".LanVlanConf").css("visibility", "visible");
      } else {
        $("form[name=Form2]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2, param3) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=Form2] select').trigger('chosen:updated');
        $(".LanVlanConf").css("visibility", "hidden");
      }
    },
    toggleForm3: function toggleForm3() {
      if ($(".LanVxlanConf").css("visibility") == "hidden") {
        this.init();
        $(".LanVxlanConf").css("visibility", "visible");
      } else {
        $("form[name=Form3]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2, param3) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=Form3] select').trigger('chosen:updated');
        $(".LanVxlanConf").css("visibility", "hidden");
      }
    },
    toggleForm4: function toggleForm4() {
      if (this.get("interfaceType") == "Vlan") {
        this.set("vlan", true);
      } else {
        this.set("vlan", false);
      }
      if ($(".LanL3Conf").css("visibility") == "hidden") {
        $(".LanL3Conf").css("visibility", "visible");
      } else {
        $("form[name=Form4]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=Form4] select').trigger('chosen:updated');
        $(".LanL3Conf").css("visibility", "hidden");
      }
    },

    setPresent: function setPresent() {
      var rwh = this.get("routerWithHost");
      var present = this.get("present");
      var absent = this.get("absent");
      var temp1 = [];
      var temp2 = [];
      for (var i = 0; i < rwh.length; i++) {
        if (present) for (var j = 0; j < present.length; j++) {
          if (present[j] == rwh[i][1]) {
            temp1.addObject(rwh[i]);
          }
        }
        if (absent) for (var k = 0; k < absent.length; k++) {
          if (absent[k] == rwh[i][1]) {
            temp2.addObject(rwh[i]);
          }
        }
      }
      this.set("present", temp1);
      this.set("absent", temp2);
    },
    ValidateIPaddress: function ValidateIPaddress(ipaddress) {
      if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\/[0-9]{2})$/.test(ipaddress)) {
        return true;
      }
      return false;
    },
    ValidateIP: function ValidateIP(ipaddress) {
      if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
        return true;
      }
      return false;
    },
    ValidateEthernet: function ValidateEthernet(intfNumber) {
      return (/^\d+(\/[1-4])?(-\d+(\/[1-4])?)?$/g.test(intfNumber)
      );
    },
    ValidateIntfAddress: function ValidateIntfAddress(intfnumber) {
      return (/^\d+(-\d+)?$/g.test(intfnumber)
      );
    }
  });
});
define('netconfig/controllers/lanconf/osupdate/index', ['exports', 'netconfig/utils/notify', 'netconfig/utils/validation', 'netconfig/utils/ajax'], function (exports, _netconfigUtilsNotify, _netconfigUtilsValidation, _netconfigUtilsAjax) {
  exports['default'] = Ember.Controller.extend({
    uploadForm: false,
    session_id: null,
    leaf: [],
    spine: [],
    superSpine: [],
    fLeaf: [],
    CVX: [],
    imgFiles: [],
    showLeaf: true,
    showSpine: true,
    showSSpine: true,
    showCVX: true,
    isUpdating: false,
    statusMes: [],

    appCtrl: Ember.inject.controller('application'),

    pageFunctions: function pageFunctions() {
      var self = this;
      window.showLog = function (device) {
        var logList = self.get("statusMes");
        for (var i = 0; i < logList.length; i++) {
          if (logList[i].device == device) {
            $('.log-popup-overlay').css('visibility', 'visible');
            $('.log-popup-overlay').css('z-index', '10');
            $('.log-popup-overlay .content pre').text(logList[i].log);
          }
        }
      };
      Ember.run.scheduleOnce('afterRender', this, function () {
        var input = document.getElementById('arista-swi-input');
        input.addEventListener('change', showFileName);
      });
      window.showFileName = function (event) {
        var input = event.target;
        console.info(input, event);
        var fileName = input.files[0].name;
        var infoArea = document.getElementById('arista-swi-name');
        infoArea.textContent = 'File name: ' + fileName;
      };
    },

    actions: {
      showTabs: function showTabs(type) {
        $('.tab-content').addClass('dnoneImpl');
        $('.tab-content[data-name="' + type + '"]').removeClass('dnoneImpl');
        $('.image-copy-tabs > ul li').removeClass('active');
        $('.image-copy-tabs > ul li[data-name="' + type + '"]').addClass('active');
      },
      showUploadForm: function showUploadForm() {
        $('#uploadPopup').removeClass('dnoneImpl');
      },
      close: function close() {
        $('.log-popup-overlay').css('visibility', 'hidden');
        $('.log-popup-overlay').css('z-index', '');
        $("form[name=imageUpload]")[0].reset();
        var infoArea = document.getElementById('arista-swi-name');
        infoArea.textContent = '';
        $('#uploadPopup').addClass('dnoneImpl');
      },
      showCopyForm: function showCopyForm() {
        var self = this;
        this.get('store').getJSON('copy-lock/').then(function (res) {
          if (!(res instanceof Array)) if (res.lock.status) {
            var user = self.get('appCtrl.user');
            if (user.username == res.app_user) {
              self.set("session_id", res.session_id);
              self.updateImageVar();
              $('#copyPopup').removeClass('dnoneImpl');
              self.updateStatus();
              return 0;
            } else {
              (0, _netconfigUtilsNotify.customNotify)('error', res.app_user + " running copy task.");
              return 0;
            }
          }
          self.updateImageVar();
          $('#copyPopup').removeClass('dnoneImpl');
        }, function (err) {});
      },
      closeCopyForm: function closeCopyForm() {
        $('#copyPopup').addClass('dnoneImpl');
      },
      uploadImage: function uploadImage(param1, param2) {
        var self = this;
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name=imageUpload]'))) {
          return false;
        }
        var filename = $("form[name=imageUpload] input[name=file]").val().split('\\').pop();
        var data = new FormData($('form').get(0));
        if (!filename) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one device.");
          return false;
        }
        if (!this.validateFile(filename)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "file type not supported.");
          return false;
        }
        this.set('isUploading', true);
        (0, _netconfigUtilsAjax['default'])('eosupload/' + filename, {
          type: 'post',
          data: data,
          processData: false,
          contentType: false
        }).then(function (res) {
          self.set('isUploading', false);
          (0, _netconfigUtilsNotify.customNotify)("success", filename + " successfully uploaded .");
          self.send('close');
        }, function (err) {
          self.set('isUploading', false);
          (0, _netconfigUtilsNotify.customNotify)("error", "error in uploading file: " + filename);
        });
      },
      startCopy: function startCopy() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="mlag-osupdate"]'))) {
          return false;
        }
        console.log("vali");
        var devices = [];
        this.set('devices', devices);
        $("input[name=mlag-devices]:checked").each(function () {
          devices.addObject($(this).val());
        });
        if (devices.length < 1) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select least one device to copy image.");
          return false;
        }
        var data = $("form[name=mlag-osupdate]").serialize() + "&devices=" + JSON.stringify(devices);
        var self = this;
        this.get('store').post('aeoscopy/', data).then(function (res) {
          self.set('isUpdating', true);
          self.set('session_id', res.session_id);
          for (var i = 0; i < devices.length; i++) {
            $('[ipid="' + devices[i] + '"]').html('<i class="fa fa-spinner fa-spin" style="font-size:24px"></i>');
          }
          setTimeout(function () {
            self.updateStatus();
          }, 10000);
        }, function (err) {
          console.log('error');
          (0, _netconfigUtilsNotify.customNotify)('error', "Something went wrong.");
        });
      },
      toggleLeaf: function toggleLeaf(param1) {
        $(".leaf.row").slideToggle(100);
        $(".mlag-table.podSelect").toggle(100);
        if (this.get('showLeaf')) {
          this.set('showLeaf', false);
        } else {
          this.set('showLeaf', true);
        }
      },
      toggleSpine: function toggleSpine(param1) {
        $(".spine.row").slideToggle(100);
        if (this.get('showSpine')) {
          this.set('showSpine', false);
        } else {
          this.set('showSpine', true);
        }
      },
      toggleSSpine: function toggleSSpine(param1) {
        $(".superSpine.row").slideToggle(100);
        if (this.get('showSSpine')) {
          this.set('showSSpine', false);
        } else {
          this.set('showSSpine', true);
        }
      },
      toggleSSpine: function toggleSSpine(param1) {
        $(".CVX.row").slideToggle(100);
        if (this.get('showCVX')) {
          this.set('showCVX', false);
        } else {
          this.set('showCVX', true);
        }
      },
      podSelection: function podSelection() {
        var leaf = this.get('leaf');
        var fLeaf = this.get('fLeaf');
        fLeaf = [];
        var pods = $("select[name=pods]").val();
        if (pods.length > 0) {
          for (var i = 0; i < leaf.length; i++) {
            if (jQuery.inArray(leaf[i].podtype, pods) != -1) {
              fLeaf.addObject(leaf[i]);
            }
          }
          this.set('fLeaf', fLeaf);
        } else {
          for (var i = 0; i < leaf.length; i++) {
            $($('[ipid="' + leaf[i].host + '"]').parents()[0]).find("input").prop('checked', false);
          }
          this.set('fLeaf', leaf);
        }
      }
    },
    startPolling: function startPolling() {
      var self = this;
      var polling = Ember.run.later(function () {
        self.updateStatus();
      }, 1000 * 5 * 1);
      this.set("polling", polling);
    },
    stopPolling: function stopPolling() {
      this.set('isUpdating', false);
      var poll = this.get('polling');
      Ember.run.cancel(poll);
    },
    updateStatus: function updateStatus() {
      var self = this;
      var devices = this.get('devices');
      console.log(devices);
      var stopPoll = false;
      this.get('store').getJSON('aeoscopy/?' + "session_id=" + this.get('session_id')).then(function (res) {
        self.set("statusMes", res);
        if (devices == undefined) {
          devices = [];
          console.log('data', res);
          for (var i = 0; i < res.length; i++) {
            devices[i] = res[i].device;
          }
        }
        for (var i = 0; i < res.length; i++) {

          if (res[i].status == "failed") {
            $('[ipid="' + res[i].device + '"]').html('<span style="color: red;cursor: pointer;" onclick=showLog("' + res[i].device + '")>failed</span>');
          } else if (res[i].status == "success") {
            $('[ipid="' + res[i].device + '"]').html('<span style="color: green;cursor: pointer;" onclick=showLog("' + res[i].device + '")>success</span>');
          } else {
            $('[ipid="' + res[i].device + '"]').html('<i class="fa fa-spinner fa-spin" style="font-size:24px"></i>');
          }
        }
        if (res.length == devices.length) {
          if (!res.find(function (i) {
            return i.status == 'started';
          })) {
            console.log('going to stop polling');
            stopPoll = true;
            self.stopPolling();
            self.unSelect(res);
          }
        }
        if (!stopPoll) {
          self.startPolling();
        }
      }, function (err) {
        console.log(err);
      });
    },
    setDevices: function setDevices() {
      var devices = this.get('content');
      var spine = this.get('spine');
      var superSpine = this.get('superSpine');
      var leaf = this.get('leaf');
      var fLeaf = this.get('fLeaf');
      var cvx = this.get('CVX');
      for (var i = 0; i < devices.length; i++) {
        if (devices[i].category == "Super spine") {
          superSpine.addObject(devices[i]);
        } else if (devices[i].category == "Spine") {
          spine.addObject(devices[i]);
        } else if (devices[i].category == "CVX") {
          cvx.addObject(devices[i]);
        } else {
          leaf.addObject(devices[i]);
          fLeaf.addObject(devices[i]);
        }
      }
    },
    updateImageVar: function updateImageVar() {
      var self = this;
      this.get('store').getJSON('downFileList/').then(function (res) {
        self.set('imgFiles', res);
      }, function (err) {
        console.error(err);
      });
    },
    validateFile: function validateFile(filename) {
      if (/^(.*.swix?)$/.test(filename)) {
        return true;
      }
      return false;
    },
    unSelect: function unSelect(res) {
      for (var i = 0; i < res.length; i++) {
        $($('[ipid="' + res[i].device + '"]').parents()[0]).find("input").prop('checked', false);
      }
    }
  });
});
define('netconfig/controllers/lanconf/osupdate/mlag', ['exports', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = Ember.Controller.extend({
    isUpdating: false,
    polling: null,
    devices: null,
    imgFiles: [],
    session_id: null,
    statusMes: [],
    appCtrl: Ember.inject.controller('application'),

    pageFunctions: function pageFunctions() {
      var self = this;
      window.showLog = function () {
        var logList = self.get("statusMes");
        $('.log-popup-overlay').css('visibility', 'visible');
        $('.log-popup-overlay .content pre').text(logList[0].log);
      };
    },

    actions: {
      showUpdateForm: function showUpdateForm() {
        if ($("input[name=mlag-devices]:checked").val() == undefined) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one pair.");
          return false;
        }
        if ($("input[name=mlag-devices]:checked").length > 1) {
          (0, _netconfigUtilsNotify.customNotify)("error", "You have selected more than devices.");
          return false;
        }
        $('.popup-overlay').removeClass('dnoneImp');
      },
      close: function close() {
        $('.popup-overlay').addClass('dnoneImp');
        $('.log-popup-overlay').css('visibility', 'hidden');
        $('form[name=mlag-osupdate]')[0].reset();
      },
      startUpdate: function startUpdate() {
        var self = this;
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="mlag-osupdate"]'))) {
          return false;
        }
        if (!this.validateFile()) {
          (0, _netconfigUtilsNotify.customNotify)("error", "image not valid.");
          return false;
        }
        var devices = [];
        this.set('devices', devices);
        $("input[name=mlag-devices]:checked").each(function () {
          devices.addObject($(this).val().split(","));
        });
        if (devices.length > 1) {
          (0, _netconfigUtilsNotify.customNotify)("info", "You have selected more than devices.");
          return false;
        }
        var data = $("form[name=mlag-osupdate]").serialize() + "&devices=" + JSON.stringify(devices);
        this.get('store').post('mlagosupdate/', data).then(function (res) {
          self.set('isUpdating', true);
          self.set('session_id', res.session_id);
          console.log('lag devices', devices);
          for (var i = 0; i < devices.length; i++) {
            $('[ipid="' + devices[i][0] + "_" + devices[i][1] + '"]').html('<i class="fa fa-spinner fa-spin" style="font-size:24px"></i>');
          }
          self.send('close');
          setTimeout(function () {
            self.updateStatus();
          }, 10000);
        }, function (err) {
          console.log('error');
          (0, _netconfigUtilsNotify.customNotify)('error', "Something went wrong.");
        });
      },
      podSelection: function podSelection() {
        var allcontent = this.get("allcontent");
        var temp = [];
        var pods = $("select[name=pods]").val();
        if (pods.length > 0) {
          for (var i = 0; i < allcontent.length; i++) {
            if (jQuery.inArray(allcontent[i][0].podtype, pods) != -1) {
              temp.addObject(allcontent[i]);
            }
          }
          this.set("content", temp);
        } else {
          for (var i = 0; i < allcontent.length; i++) {
            $($('[ipid="' + allcontent[i][0].host + "_" + allcontent[i][1].host + '"]').parents()[0]).find("input").prop('checked', false);
          }
          this.set("content", allcontent);
        }
      }
    },
    active: function active() {
      var self = this;
      Ember.run.scheduleOnce('afterRender', function () {
        $('.lan-sub .item.mlag').addClass('active');
      });
    },
    startPolling: function startPolling() {
      var self = this;
      var polling = Ember.run.later(function () {
        self.updateStatus();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    stopPolling: function stopPolling() {
      this.set('isUpdating', false);
      var poll = this.get('polling');
      Ember.run.cancel(poll);
    },
    updateStatus: function updateStatus() {
      var self = this;
      var devices = this.get('devices');
      var stopPoll = false;
      this.get('store').getJSON('mlagosupdate/?' + "session_id=" + this.get('session_id')).then(function (res) {
        console.log("devices :: ", devices);
        self.set("statusMes", res);
        if (devices == undefined) {
          devices = [];
          for (var i = 0; i < res.length; i++) {
            devices.addObject(res[i].devices.replace(/[' ' ']/g, "").slice(1, -1).split(","));
          }
          console.log("devices: ", devices);
        }
        for (var i = 0; i < res.length; i++) {
          if (res[i].status == "failed") {
            $('[ipid="' + devices[i][0] + "_" + devices[i][1] + '"]').html('<span style="color: red; cursor: pointer;" onclick="showLog()">failed</span>');
          } else if (res[i].status == "running") {
            $('[ipid="' + devices[i][0] + "_" + devices[i][1] + '"]').html('<i class="fa fa-spinner fa-spin" style="font-size:24px"></i>');
          } else if (res[i].status == "success") {
            $('[ipid="' + devices[i][0] + "_" + devices[i][1] + '"]').html('<span style="color: green; cursor: pointer;" onclick="showLog()">success</span>');
          }
        }
        if (res.length == devices.length) {
          if (!res.find(function (i) {
            return i.status == 'running';
          })) {
            console.log('going to stop polling');
            stopPoll = true;
            self.stopPolling();
            self.unSelect(devices);
          }
        }
        if (!stopPoll) {
          self.startPolling();
        }
      }, function (err) {
        console.log(err);
      });
    },
    updateImageVar: function updateImageVar() {
      var self = this;
      this.get('store').getJSON('downFileList/').then(function (res) {
        self.set('imgFiles', res);
      }, function (err) {
        console.error(err);
      });
    },
    unSelect: function unSelect(res) {
      for (var i = 0; i < res.length; i++) {
        $($('[ipid="' + res[i][0] + "_" + res[i][1] + '"]').parents()[0]).find("input").prop('checked', false);
      }
    },
    validateFile: function validateFile() {
      try {
        var file = $("form[name=mlag-osupdate] select[name=imgname]").val().split('\\').pop();
      } catch (err) {
        console.log("caught error.");
        (0, _netconfigUtilsNotify.customNotify)("error", err);
      }
      if (file == "") {
        return false;
      } else if (!/^(.*.swix?)$/.test(file)) {
        return false;
      } else {
        return true;
      }
    }
  });
});
define('netconfig/controllers/lanconf/osupdate/spine', ['exports', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = Ember.Controller.extend({
    isUpdating: false,
    polling: null,
    devices: null,
    spine: [],
    superSpine: [],
    CVX: [],
    imgFiles: [],
    session_id: null,
    appCtrl: Ember.inject.controller('application'),

    pageFunctions: function pageFunctions() {
      var self = this;
      window.showLog = function () {
        var logList = self.get("statusMes");
        $('.log-popup-overlay').css('visibility', 'visible');
        $('.log-popup-overlay .content pre').text(logList[0].log);
      };
    },

    actions: {
      showUpdateForm: function showUpdateForm() {
        if ($("input[name=mlag-devices]:checked").val() == undefined) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one device.");
          return false;
        }
        if ($("input[name=mlag-devices]:checked").length > 1) {
          (0, _netconfigUtilsNotify.customNotify)("error", "You have selected more than devices.");
          return false;
        }
        $('.popup-overlay').removeClass('dnoneImp');
      },
      close: function close() {
        $('.popup-overlay').addClass('dnoneImp');
        $('.log-popup-overlay').css('visibility', 'hidden');
        $('form[name=mlag-osupdate]')[0].reset();
      },
      startUpdate: function startUpdate() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="mlag-osupdate"]'))) {
          return false;
        }
        if (!this.validateFile()) {
          (0, _netconfigUtilsNotify.customNotify)("error", "image not valid.");
          return false;
        }
        var devices = [];
        this.set('devices', devices);
        $("input[name=mlag-devices]:checked").each(function () {
          devices.addObject($(this).val());
        });
        if (devices.length > 1) {
          (0, _netconfigUtilsNotify.customNotify)("info", "You have selected more than devices.");
          return false;
        }
        var data = $("form[name=mlag-osupdate]").serialize() + "&devices=" + JSON.stringify(devices);
        var self = this;
        this.get('store').post('mlagosupdate/', data).then(function (res) {
          self.set('isUpdating', true);
          self.set('session_id', res.session_id);
          for (var i = 0; i < devices.length; i++) {
            $('[ipid="' + devices[i] + '"]').html('<i class="fa fa-spinner fa-spin" style="font-size:24px"></i>');
          }
          self.send('close');
          setTimeout(function () {
            self.updateStatus();
          }, 10000);
        }, function (err) {
          console.log('error');
          (0, _netconfigUtilsNotify.customNotify)('error', "Something went wrong.");
        });
      }
    },
    active: function active() {
      var self = this;
      Ember.run.scheduleOnce('afterRender', function () {
        $('.lan-sub .item.spine').addClass('active');
      });
    },
    startPolling: function startPolling() {
      var self = this;
      var polling = Ember.run.later(function () {
        self.updateStatus();
      }, 1000 * 60 * 1);
      this.set("polling", polling);
    },
    stopPolling: function stopPolling() {
      this.set('isUpdating', false);
      var poll = this.get('polling');
      Ember.run.cancel(poll);
    },
    updateStatus: function updateStatus() {
      var self = this;
      var devices = this.get('devices');
      var stopPoll = false;
      console.log("devices", devices);
      this.get('store').getJSON('mlagosupdate/?' + "session_id=" + this.get('session_id')).then(function (res) {
        self.set("statusMes", res);
        if (devices == undefined) {
          console.log("device null");
          devices = [];
          for (var i = 0; i < res.length; i++) {
            devices.addObject(res[i].devices.replace(/[' ' ']/g, "").split(","));
          }
        }
        for (var i = 0; i < res.length; i++) {
          if (res[i].status == "failed") {
            $('[ipid="' + devices[i] + '"]').html('<span style="color: red; cursor: pointer" onclick="showLog()">failed</span>');
          } else if (res[i].status == "success") {
            $('[ipid="' + devices[i] + '"]').html('<span style="color: green; cursor: pointer" onclick="showLog()">success</span>');
          } else if (res[i].status == "running") {
            $('[ipid="' + devices[i] + '"]').html('<i class="fa fa-spinner fa-spin" style="font-size:24px"></i>');
          }
        }
        if (res.length == devices.length) {
          if (!res.find(function (i) {
            return i.status == 'running';
          })) {
            console.log('going to stop polling');
            stopPoll = true;
            self.stopPolling();
            self.unSelect(devices);
          }
        }
        if (!stopPoll) {
          self.startPolling();
        }
      }, function (err) {
        console.log(err);
      });
    },
    deviceType: function deviceType() {
      var devices = this.get('content');
      var spine = this.get('spine');
      var superSpine = this.get('superSpine');
      var cvx = this.get('CVX');
      for (var i = 0; i < devices.length; i++) {
        if (devices[i].category == "Super spine") {
          superSpine.addObject(devices[i]);
        } else if (devices[i].category == "Spine") {
          spine.addObject(devices[i]);
        } else if (devices[i].category == "CVX") {
          cvx.addObject(devices[i]);
        }
      }
    },
    updateImageVar: function updateImageVar() {
      var self = this;
      this.get('store').getJSON('downFileList/').then(function (res) {
        self.set('imgFiles', res);
      }, function (err) {
        console.error(err);
      });
    },
    unSelect: function unSelect(res) {
      for (var i = 0; i < res.length; i++) {
        $($('[ipid="' + res[i] + '"]').parents()[0]).find("input").prop('checked', false);
      }
    },
    validateFile: function validateFile() {
      try {
        var file = $("form[name=mlag-osupdate] select[name=imgname]").val().split('\\').pop();
      } catch (err) {
        console.log("caught error.");
        (0, _netconfigUtilsNotify.customNotify)("error", err);
      }
      if (file == "") {
        return false;
      } else if (!/^(.*.swix?)$/.test(file)) {
        return false;
      } else {
        return true;
      }
    }
  });
});
define('netconfig/controllers/lanconf/osupdate/updatelist', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Controller.extend({
    c_search: false,
    pageMeta: { limit: 30, offset: 30 },

    actions: {
      csvdownld: function csvdownld() {
        var self = this;

        self.store.getBinary('csv_osupdates/').then(function (res) {

          var link = document.createElement('a');
          link.href = window.URL.createObjectURL(res);
          link.download = 'OS_Upgrade_History.zip';
          document.body.appendChild(link);
          link.click();
        }, function (err) {

          (0, _netconfigUtilsNotify.customNotify)('error', "No Updates found!!");
        });
      },
      fetchMore: function fetchMore(cb) {
        var data = this.get('pageMeta');
        var res = this.search(data);
        cb(res);
      },
      search: function search() {
        this.set("c_search", true);
        this.search({ limit: 30, offset: 0 }, true);
      },
      c_search: function c_search() {
        this.set("c_search", false);
        $("#cmmt_s").val('');
        this.search({ limit: 30, offset: 0 }, true);
      }
    },

    search: function search(data, setcontent) {
      console.log(data, setcontent);
      var ip = $("#cmmt_s").val();
      var self = this;
      if (ip != '') {
        console.log("inside if");
        return this.store.getJSON("osupdatelist" + "?search=" + ip, data).then(function (res) {
          if (setcontent) {
            self.set('pageMeta.offset', 0);
            self.set("content", res.data);
          }
          console.log(data.limit, data.offset);
          // data.offset = (data.limit+data.offset)
          self.set("pageMeta.offset", data.limit + data.offset);
          self.set('hasMore', res.data.length ? true : false);
          return res.data;
        });
      } else {
        console.log("inside else");
        this.set("c_search", false);
        return this.store.getJSON("osupdatelist", data).then(function (res) {
          if (setcontent) {
            self.set('pageMeta.offset', 0);
            self.set("content", res.data);
          }
          //data.offset = (data.limit+data.offset)
          self.set("pageMeta.offset", data.limit + data.offset);
          console.log("data.offset", data.offset);
          self.set('hasMore', res.data.length ? true : false);
          return res.data;
        });
      }
    },

    active: function active() {
      var self = this;
      _ember['default'].run.scheduleOnce('afterRender', function () {
        $('.lan-sub .item.updatelist').addClass('active');
      });
    }
  });
});
define('netconfig/controllers/lanconf/wanaccesslist/extended', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    protocols: null,
    isSaving: false,
    extendedCtrl: _ember['default'].inject.controller('lanconf'),
    operators: [{ value: "None", label: "None" }, { value: "gt", label: "Greater than" }, { value: "eq", label: "Equal" }, { value: "lt", label: "Lesser than" }, { value: "neq", label: "Not equal" }, { value: "range", label: "Range" }],
    configurationData: {},
    isShowConfig: false,
    setdefault: function setdefault() {
      var data = this.get('extendedCtrl.accessLstData');
      //this.set('hidepcl', true)
      this.set("hostwithname", data['hostwithName']);
      this.set("hostwithacl", data['acl-present']);
      this.set("aclconfig", data['acl-config']);
      this.set("hostwithoutacl", data['acl-not-present']);
      _ember['default'].run.next(function () {
        $('input[name=aclname]').val(data['aclname']);
        $('input[name="approver_email"]').val(data['approver_email_name']);
        $('input[name="config_comment"]').val(data['config_comment']);
        $('.extdAcl tr[ids="1"]').find('.seqprotocol').chosen();
      });
      this.setHostsName();
    },
    setHostsName: function setHostsName() {
      var rwh = this.get("hostwithname");
      var present = this.get("hostwithacl");
      var absent = this.get("hostwithoutacl");
      var temp1 = [],
          temp2 = [];
      for (var i = 0; i < rwh.length; i++) {
        if (present.indexOf(rwh[i][1]) != -1) {
          temp1.addObject(rwh[i]);
        } else if (absent.indexOf(rwh[i][1]) != -1) {
          temp2.addObject(rwh[i]);
        }
      }
      this.set("hostwithacl", temp1);
      this.set("hostwithoutacl", temp2);
    },
    actions: {
      closePopup: function closePopup() {
        this.set('isShowConfig', false);
      },
      showConfiguration: function showConfiguration(itm) {
        var data = {};
        var acldata = this.get('extendedCtrl.accessLstData');
        $(acldata['acl-config']).each(function (i, e) {
          if (e.host === itm[1]) {
            data.name = itm[0] + ' [' + itm[1] + ']';
            data.output = e.result.output;
            return false;
          }
        });
        this.set('configurationData', data);
        this.set('isShowConfig', true);
      },
      checkprotocol: function checkprotocol(id) {
        // var pcl = $("select[name='protocol']").val()
        // this.set('hidepcl', (pcl == "icmp" || pcl == "ip")?false:true)
        var pcl = $($('.extdAcl tr[ids="' + id + '"]')).find('select[name="protocol"]').val();
        _ember['default'].set(this.get('config').find(function (obj) {
          return obj.id === id;
        }), 'hidepcl', pcl == "icmp" || pcl == "ip" ? false : true);
        _ember['default'].run.next(function () {
          $('.extdAcl tr[ids="' + id + '"]').find('.seqprotocol').chosen();
        });
      },
      checksrcopr: function checksrcopr(id) {
        var opr = $($('.extdAcl tr[ids="' + id + '"]')).find('select[name="srcoperator"]').val();
        if (opr == 'None') {
          var sport = $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="srcport"]');
          sport.prop('disabled', true);
          sport.val('');
        } else {
          $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="srcport"]').prop('disabled', false);
        }
      },
      checkdstopr: function checkdstopr(id) {
        var opr = $($('.extdAcl tr[ids="' + id + '"]')).find('select[name="dstoperator"]').val();
        if (opr == 'None') {
          var dport = $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="dstport"]');
          dport.prop('disabled', true);
          dport.val('');
        } else {
          $($('.extdAcl tr[ids="' + id + '"]')).find('input[name="dstport"]').prop('disabled', false);
        }
      },
      willcancel: function willcancel() {
        var present = Array.from(this.get("hostwithacl"), function (_, i) {
          return _[1];
        });
        var absent = Array.from(this.get("hostwithoutacl"), function (_, i) {
          return _[1];
        });
        var hosts = present.concat(absent);
        var self = this,
            deldata = "&router=" + JSON.stringify(hosts);
        //console.log("Delele get data", deldata)
        this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
          if ("notdisconnected" in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)("Error", "Unable to close connection! Please manually disconnect for devices " + resp['data']['notdisconnected'].join(", "));
          } else {
            console.log("Successfully closed all connections!");
          }
          self.set('extendedCtrl.connected', false);
        });
      },
      cancel: function cancel() {
        self.get('router').transitionTo('lanconf/wanaccesslist.index');
        return false;
      },
      aextacl: function aextacl() {
        //console.log("Submitting extended configuration")
        if ($(':checkbox:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one device!");
          return false;
        }
        var check = true;
        $('.seqRow').each(function (i, e) {
          if (!_netconfigUtilsValidation.validateForm.validateSeq(e)) {
            check = false;
            return false;
          }
        });
        if (!check) {
          return false;
        }
        this.set('isSaving', true);
        var val = [],
            self = this;
        $(':checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        var data = this.get('extendedCtrl.accessLstData');
        var seqdata = [];
        $('.seqRow').each(function (i, e) {
          seqdata.push({ "name": data["aclname"],
            "seqno": $(e).find('input[name="seqno"]').val(),
            "action": $(e).find('select[name="action"]').val(),
            "protocol": $(e).find('select[name="protocol"]').val(),
            "srcaddr": $(e).find('input[name="srcaddr"]').val(),
            "srccidr": $(e).find('input[name="srccidr"]').val(),
            "srcoperator": $(e).find('select[name="srcoperator"]').val(),
            "srcport": $(e).find('input[name="srcport"]').val(),
            "dstaddr": $(e).find('input[name="dstaddr"]').val(),
            "dstcidr": $(e).find('input[name="dstcidr"]').val(),
            "dstoperator": $(e).find('select[name="dstoperator"]').val(),
            "dstport": $(e).find('input[name="dstport"]').val(),
            "log": $(e).find('select[name="log"]').val()
          });
        });
        var self = this,
            data = "aclname=" + $('input[name="aclname"]').val() + "&acltype=" + $('input[name="acltype"]').val() + "&router=" + JSON.stringify(val) + "&config=" + JSON.stringify(seqdata) + '&approver_email=' + $('input[name="approver_email"]').val() + '&config_comment=' + $('input[name="config_comment"]').val();
        //console.log("Post extd data:", data)
        this.get('store').post('workflow/', data).then(function (resp) {
          self.set('isSaving', false);
          if (typeof resp['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Successfully sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', 'Failed to Send the configuration for Approval');
          }
          self.send('cancel');
        }, function (err) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('error', 'Configuration failed!');
          self.send('cancel');
        });
        return false;
      },
      addSeqRow: function addSeqRow() {
        var c = this.get('config');
        var newid = c.length > 0 ? c[c.length - 1]['id'] : 0;
        c.addObject({ id: newid + 1, hidepcl: true });
        _ember['default'].run.next(function () {
          $('.extdAcl tr[ids="' + (newid + 1) + '"]').find('.seqprotocol').chosen();
        });
      },
      delSeqRow: function delSeqRow(delitem) {
        if (this.get('config').length == 1) {
          return false;
        }
        var c = this.get('config');
        c.removeObject(delitem);
      }
    }
  });
});
define('netconfig/controllers/lanconf/wanaccesslist/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    pods: [],
    podhosts: [],
    lanconfRouter: [],
    hostwithName: [],
    wandata: [],
    isLoading: false,
    isPodTypeSelected: false,
    testdata: false,
    lanCtrl: _ember['default'].inject.controller('lanconf'),

    actions: {
      onLoad: function onLoad() {
        $('.formContainer').on('change', 'input[type="checkbox"]', function () {
          if ($(this).attr('name') === "routername") {
            if ($(this).is(':checked')) {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
            } else {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
            }
          } else {
            if ($(this).is(':checked')) {
              if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
              } else {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
              }
            } else {
              $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
            }
          }
        });
      },
      setdc: function setdc() {
        var dc = $('select[name="dc"]').val();
        //console.log("Selected dc: ", dc)
        if (dc) {
          var pods = [];
          for (var key in this.get("content").routers[dc]) {
            pods.push(key);
          }
          this.set('pods', pods);
          this.send('fetchhosts');
          _ember['default'].run.next(function () {
            $('select[name="podtype"]').trigger('chosen:updated');
          });
        }
      },
      fetchhosts: function fetchhosts() {
        //console.log("Note: Setting Pod hosts !! Pod type:", pod)
        var devices = this.get("content").routers[$('select[name="dc"]').val()];
        console.log(self.get("wandata"));
        if (devices) {
          this.set('isSspine', false);
          var data = {};
          for (var i = 0; i < devices.length; i++) {
            if (devices[i].category in data) {
              data[devices[i].category].push(devices[i]);
            } else {
              data[devices[i].category] = [devices[i]];
            }
          }

          this.set("podhosts", data);
        } else {
          this.set('isSspine', true);
          this.set("podhosts", devices);
        }
        this.set("isPodTypeSelected", true);
      },
      getlogin: function getlogin() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="alconf"]'))) {
          return false;
        }
        if ($('input[name="router"]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var val = [],
            hostNameArray = [];
        $('input[name="router"]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });
        this.set('lanconfRouter', val);
        this.set('hostwithName', hostNameArray);
        var modal = document.getElementById('logindiv');
        if (this.get('lanCtrl.credentials') !== undefined) {
          var self = this;
          _ember['default'].run.next(function () {
            console.log("Set login values!");
            $("input[name='username']").val(self.get('lanCtrl.credentials')[0].value);
            $("input[name='password']").val(self.get('lanCtrl.credentials')[1].value);
            $("input[name='enpwd']").val(self.get('lanCtrl.credentials')[2].value);
          });
        }
        modal.style.display = "block";
      },
      close_popup: function close_popup() {
        this.set('isLoading', false);
        //document.forms[1].reset()
        var modal = document.getElementById('logindiv');
        modal.style.display = "None";
      },
      login: function login() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
          return false;
        }
        var self = this;
        this.set('isLoading', true);
        var credentials = $('form[name=loginform]');
        var acheckacldata = credentials.serialize() + "&router=" + JSON.stringify(this.get('lanconfRouter')) + "&" + $('form[name=alconf]').serialize();
        //console.log("Login data:", acheckacldata)
        this.get('store').post('acheckacl/', acheckacldata).then(function (resp) {
          //console.log("Response for check acl call:", resp)
          if ('Session open' in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
            self.send('close_popup');
            return false;
          } else if ('acl-other-type' in resp['data']) {
            var type = $('select[name=acltype]').val() == "standardACL" ? "extendedACL" : "standardACL";
            (0, _netconfigUtilsNotify.customNotify)("error", "Routers " + resp['data']['acl-other-type'] + " have access list with same name but type " + type + ". Please provide a different name.");
            self.send('close_popup');
            return false;
          }
          var approver_name = "";
          if (self.get("content.isAdminAccount") == true) {
            approver_name = localStorage.getItem('appuser');
          } else {
            approver_name = $('select[name="approver_email"] option:selected').text();
          }
          var alformdata = { 'aclname': $('input[name=aclname]').val(), 'acltype': $('select[name=acltype]').val(), 'hostwithName': self.get('hostwithName'), approver_email_id: $('select[name="approver_email"]').val(), config_comment: $('input[name="config_comment"]').val() };
          alformdata['approver_email_name'] = approver_name;
          alformdata['acl-not-present'] = 'acl-not-present' in resp['data'] ? resp['data']['acl-not-present'] : [];
          alformdata['acl-present'] = 'acl-present' in resp['data'] ? resp['data']['acl-present'] : [];
          alformdata['acl-config'] = 'acl-config' in resp['data'] ? resp['data']['acl-config'] : [];
          alformdata['acl-name'] = 'acl-name' in resp['data'] ? resp['data']['acl-name'] : '';

          self.set('isLoading', false);
          self.set('lanCtrl.credentials', credentials.serializeArray());
          self.set('lanCtrl.accessLstData', alformdata);
          self.set('lanCtrl.connected', true);
          if ($('select[name=acltype]').val() == 'standardACL') {
            self.get('router').transitionTo('lanconf/wanaccesslist.standard');
          } else if ($('select[name=acltype]').val() == 'extendedACL') {
            self.get('router').transitionTo('lanconf/wanaccesslist.extended');
          }
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
          self.set('isLoading', false);
        });
      }
    }
  });
});
define('netconfig/controllers/lanconf/wanaccesslist/standard', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    isSaving: false,
    standardCtrl: _ember['default'].inject.controller('lanconf'),
    configurationData: {},
    isShowConfig: false,
    setdefault: function setdefault() {
      var data = this.get('standardCtrl.accessLstData');
      this.set("hostwithname", data['hostwithName']);
      this.set("hostwithacl", data['acl-present']);
      this.set("aclconfig", data['acl-config']);
      this.set("hostwithoutacl", data['acl-not-present']);
      _ember['default'].run.next(function () {
        $('input[name="aclname"]').val(data['aclname']);
        $('input[name="approver_email"]').val(data['approver_email_name']);
        $('input[name="config_comment"]').val(data['config_comment']);
      });
      this.setHostsName();
    },
    setHostsName: function setHostsName() {
      var rwh = this.get("hostwithname");
      var present = this.get("hostwithacl");
      var absent = this.get("hostwithoutacl");
      var temp1 = [],
          temp2 = [];
      for (var i = 0; i < rwh.length; i++) {
        if (present.indexOf(rwh[i][1]) != -1) {
          temp1.addObject(rwh[i]);
        } else if (absent.indexOf(rwh[i][1]) != -1) {
          temp2.addObject(rwh[i]);
        }
      }
      this.set("hostwithacl", temp1);
      this.set("hostwithoutacl", temp2);
    },
    actions: {
      closePopup: function closePopup() {
        this.set('isShowConfig', false);
      },
      showConfiguration: function showConfiguration(itm) {
        var data = {};
        var acldata = this.get('standardCtrl.accessLstData');
        $(acldata['acl-config']).each(function (i, e) {
          if (e.host === itm[1]) {
            data.name = itm[0] + ' [' + itm[1] + ']';
            data.output = e.result.output;
            return false;
          }
        });
        this.set('configurationData', data);
        this.set('isShowConfig', true);
      },
      willcancel: function willcancel() {
        var present = Array.from(this.get("hostwithacl"), function (_, i) {
          return _[1];
        });
        var absent = Array.from(this.get("hostwithoutacl"), function (_, i) {
          return _[1];
        });
        var hosts = present.concat(absent);
        var self = this,
            deldata = "&router=" + JSON.stringify(hosts);
        //console.log("Delele get data", deldata)
        this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
          //console.log("Response of delete multiple connection:", resp)
          if ("notdisconnected" in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)("Error", "Unable to close connection! Please manually disconnect for devices " + resp['data']['notdisconnected'].join(", "));
          } else {
            console.log("Successfully closed all connections!");
          }
          self.set('standardCtrl.connected', false);
        });
      },

      cancel: function cancel() {
        self.get('router').transitionTo('lanconf/wanaccesslist.index');
        return false;
      },
      astdacl: function astdacl() {
        //console.log("Submitting standard configuration")
        if ($(':checkbox:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one device!");
          return false;
        }
        var check = true;
        $('.seqRow').each(function (i, e) {
          if (!_netconfigUtilsValidation.validateForm.validateSeq(e)) {
            check = false;
            return false;
          }
        });
        if (!check) {
          return false;
        }
        this.set('isSaving', true);
        var val = [],
            self = this;
        $(':checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        var data = this.get('standardCtrl.accessLstData');
        var seqdata = [];
        $('.seqRow').each(function (i, e) {
          seqdata.push({ 'name': data["aclname"], 'seqno': $(e).find('input[name="seqno"]').val(), 'action': $(e).find('select[name="action"]').val(), "log": $(e).find('select[name="log"]').val(), "addr": $(e).find('input[name="addr"]').val(), "cidr": $(e).find('input[name="cidr"]').val() });
        });
        var data = $('form[name=stdconf]').serialize() + "&router=" + JSON.stringify(val) + "&config=" + JSON.stringify(seqdata);
        //console.log("Post std data:", data)
        this.get('store').post('workflow/', data).then(function (resp) {
          self.set('isSaving', false);
          //console.log("Post std config result:",resp)
          if (typeof resp['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Successfully sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', 'Failed to Send the configuration for Approval');
          }
          self.send('cancel');
        }, function (err) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('error', 'Configuration failed!');
          self.send('cancel');
        });
        return false;
      },

      addSeqRow: function addSeqRow() {
        var c = this.get('config');
        var newid = c.length > 0 ? c[c.length - 1]['id'] : 0;
        c.addObject({ id: newid + 1 });
      },

      delSeqRow: function delSeqRow(delitem) {
        if (this.get('config').length == 1) {
          return false;
        }
        var c = this.get('config');
        c.removeObject(delitem);
      }
    }
  });
});
define('netconfig/controllers/lanconf/wancicd/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  exports['default'] = _ember['default'].Controller.extend({
    appCtrl: _ember['default'].inject.controller('application'),
    resObj: {},
    count: 0,
    indArr: [],
    nameArr: [],
    imp_key: '',
    sessionCheck: false,
    isLoading: false,
    sDevice: {},
    tempDict: {},
    GetConfig: false,
    currHost: "",
    showCustomDiv: false,
    template_data: "",
    aux_dict: {},
    tog: false,
    form_dict: {},
    jinjaEditor: {},
    yamlEditor: {},

    actions: {
      onLoad: function onLoad() {
        var self = this;
        self.set("imp_key", this.get("content").imp);
        $('input[name="router"]').prop('disabled', false);
        $('input[name="routername"]').prop('disabled', false);

        self.set("showCustomDiv", false);
        self.set("tog", false);

        // var txtarea = $('textarea[name="jinjadata"]')
        // self.set('template_data','')
        // txtarea.val('');
        // txtarea.attr('readonly',false);

        var temp_name = $('input[name="template_name"]');
        temp_name.prop('disabled', false);

        $('.innerContainer').on('change', 'input[type="checkbox"]', function () {
          if ($(this).attr('name') === "routername") {
            if ($(this).is(':checked')) {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
            } else {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
            }
          } else {
            if ($(this).is(':checked')) {
              if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
              } else {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
              }
            } else {
              $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
            }
          }
        });

        $('.form-container').on('click', '.del-icon-img', function () {
          self.actions.delFields.call(self, event);
        });
        $('.form-container').on('click', '.del-group-icon-img', function () {
          self.actions.delFields.call(self, event);
        });

        $('.form-container').on('click', '.add-icon-img', function () {
          self.actions.addFields.call(self, event);
        });

        _ember['default'].run.schedule("afterRender", function () {

          ace.config.set("basePath", "js/ace");

          var editor = ace.edit("container");
          editor.setTheme("ace/theme/chrome");
          editor.session.setMode("ace/mode/yaml");
          self.set("yamlEditor", editor);

          var editor2 = ace.edit("container2");
          editor2.setTheme("ace/theme/chrome");
          editor2.session.setMode("ace/mode/django");
          self.set("jinjaEditor", editor2);
        });
      },
      onTypeChange: function onTypeChange() {
        var type = $('select[name="type"]').val();
        var self = this;
        var data = "";
        if (self.form_dict[type] == undefined && type != "") {
          this.store.getJSON('getForm/?type=' + type).then(function (res) {
            data = res.data.commands;
            self.form_dict[type] = data;
            self.set('showCustomDiv', false);
            self.actions.createForm.call(self, data);
            self.resObj = JSON.parse(JSON.stringify(data));
            console.log(self.resObj);
          });
        } else {
          if (type != "") {
            data = self.form_dict[type];
            self.set('showCustomDiv', false);
            self.actions.createForm.call(self, data);
            self.resObj = JSON.parse(JSON.stringify(data));
            console.log(self.resObj);
          }
        }
      },
      onTemplateChange: function onTemplateChange() {
        var filename = $('select[name="template_name_list"]').val();
        var self = this;
        if (filename == "None") {
          self.get("jinjaEditor").setValue("");
          self.get("jinjaEditor").setReadOnly(false);

          var temp_name = $('input[name="template_name"]');
          temp_name.prop('disabled', false);
        } else {
          if (self.aux_dict[filename] == undefined) {
            this.store.getJSON('getForm/?type=template&filename=' + filename).then(function (res) {
              var glob_data = res.data.file_content;
              self.aux_dict[filename] = glob_data;
              self.set('template_data', atob(glob_data));

              self.get("jinjaEditor").setValue(atob(glob_data));
              self.get("jinjaEditor").setReadOnly(true);
            });
          } else {
            self.set('template_data', atob(self.aux_dict[filename]));

            self.get("jinjaEditor").setValue(atob(self.aux_dict[filename]));
            self.get("jinjaEditor").setReadOnly(true);
          }
          var temp_name = $('input[name="template_name"]');
          temp_name.prop('disabled', true);
        }
      },
      setdc: function setdc() {
        var dc = $('select[name="dc"]').val();

        if (dc) {
          var pods = [];
          for (var key in this.get("content").routers[dc]) {
            pods.push(key);
          }
          this.set('pods', pods);
          var devices = this.get("content").routers[$('select[name="dc"]').val()]["null"];

          this.set('isSspine', false);
          var data = {};
          data["WAN"] = [];
          for (var i = 0; i < devices.length; i++) {
            data["WAN"].push(devices[i]);
          }
          this.set("podhosts", data);

          this.set("isPodTypeSelected", true);
        }
      },
      parseObj: function parseObj(res, i) {
        var self = this;
        var formData = '';

        $.each(res, function (k, v) {
          var temp = k.replace(/_/g, " ");
          var label_disp = temp.replace(/(^\w{1})|(\s+\w{1})/g, function (letter) {
            return letter.toUpperCase();
          });
          if (jQuery.type(v) === "array" || v.array != undefined) {

            if (v.array) {
              v = v.array;
            }

            var arr = self.actions.parseArr.call(self, v, k);
            var type = $('select[name="type"]').val();

            if (arr.length === 0) {

              if (v.length >= 1) {
                var html = v.map(function (val) {
                  return '<option value=' + val + '>' + val + '</option>';
                });
                formData += '<div class="formRow"><label class="key-box" data-val=' + k + ' >' + label_disp + '</label>' + '<select class="val-option-box value-box">' + html + '</select>' + '</div>';
              } else {
                formData += '<div class="formRow"><input type="text" placeholder=' + k + ' class="input-box">' + arr + '</input></div>';
              }
            } else {
              formData += '<div inx="' + i + '" class="form-sub-group" data-key="' + k + '">' + arr + '</div>';
            }
          } else {
            jQuery.type(v.name) === 'object' ? formData += '' : formData += '<div class="formRow"><label class="key-box" data-val=' + k + '>' + label_disp + '</label><input type="text" class="value-box"/></div>';
          };
        });
        return formData;
      },
      parseArr: function parseArr(arr, name) {
        var self = this;
        var data = '';
        var obj = '';
        var check_obj = true;
        if (jQuery.type(arr) === "array") {

          arr.every(function (ele) {
            if (jQuery.type(ele) === 'string') {
              check_obj = false;
            }
          });
        }
        if (check_obj) {
          $(arr).each(function (i, e) {
            if (name) {
              var temp_2 = name.replace(/_/g, " ");
              var label_disp_arr = temp_2.replace(/(^\w{1})|(\s+\w{1})/g, function (letter) {
                return letter.toUpperCase();
              });

              // OLD
              // if (arr.length > 1) {
              //   obj += (i == 0 && name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>' :'');
              // } else {
              //   obj += (name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>': '');
              // }

              if (arr.length > 1) {
                obj += i == 0 && name !== undefined ? '<h3 class="group-title" >' + name + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>' + '<div class="formgroup"><span class="del-group-icon-img"><img class="del-group-icon" src="/static/netconf/app/images/delete.png" style="cursor:pointer" alt="del-icon"></span>' + self.actions.parseObj.call(self, e, i) + '</div>' : '<div class="formgroup"><span class="del-group-icon-img"><img class="del-group-icon" src="/static/netconf/app/images/delete.png" style="cursor:pointer" alt="del-icon"></span>' + self.actions.parseObj.call(self, e, i) + '</div>';
              } else {
                obj += name !== undefined ? '<h3 class="group-title" >' + name + '<span class="add-icon-img text" >add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3><div class="formgroup"><span class="del-group-icon-img"><img class="del-group-icon" src="/static/netconf/app/images/delete.png" style="cursor:pointer" alt="del-icon"></span>' + self.actions.parseObj.call(self, e, i) + '</div>' : '';
              }
            } else {
              obj += self.actions.parseObj.call(self, e, i);
            }
          });
        }
        data = obj;
        return data;
      },

      createForm: function createForm(res) {
        var self = this;
        var data = self.actions.parseArr.call(self, res);
        $('.form-container').html(data);

        var isValid = true;
        var type = $('select[name="type"]').val();
        var dataName = self.imp_key[type];
        if (dataName === undefined) {
          dataName = [];
        }
        for (var i = 0; i < dataName.length; i++) {

          var _row = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));

          var star = jQuery("<span>", {
            "class": "mandatory"
          });
          $(star).text('*');
          $(_row).append(star);
          $(_row).parent().children('.value-box').addClass("required");

          var row = '';
          var dataName = self.imp_key[type];
          if (dataName === undefined) {
            dataName = [];
          }

          var _loop = function (_i) {

            if (jQuery.type(dataName[_i]) === 'object') {
              k = Object.keys(dataName[_i]);
              val = Object.values(dataName[_i]);
              subg = $('.form-container').find('div[data-key="' + k + '"]');

              _row = $(subg).find($('label[data-val="' + val + '"]'));
            }

            var star = jQuery("<span>", {
              "class": "mandatory"
            });
            $(star).text('*');

            $(_row).each(function (i, e) {
              if (!$(e).find('span').length) {
                $(e).append(star);
                $(e).parent().children('.value-box').addClass("required");
              }
            });
          };

          for (var _i = 0; _i < dataName.length; _i++) {
            var k;
            var val;
            var subg;

            _loop(_i);
          }
        }
      },

      createAnotherForm: function createAnotherForm(res, ele) {
        var self = this;
        var name = $(ele).parent().attr('class');
        var data = $(self.actions.parseArr.call(self, res));
        console.log(data, "data");
        var formGroup = jQuery("<div>", {
          "class": "formgroup"
        });
        $(formGroup).html(data);
        $(formGroup).children('.formRow').addClass('can-del');
        $(ele).append(formGroup);

        var delIcon = jQuery('<span>', {
          "class": 'del-group-icon-img'
        });
        var del = jQuery('<img>', {
          "class": "del-group-icon",
          "src": "/static/netconf/app/images/delete.png",
          "alt": "del-icon"
        });
        $(delIcon).append(del);
        $(formGroup).prepend(delIcon);
        $(formGroup).addClass('can-del');
        $(formGroup).children('.formRow').addClass('can-del');
        // $(formGroup).find('.formgroup').show();
      },
      delFields: function delFields(e) {
        var del = $(e.target).closest('.can-del');
        var parent = $(e.target).closest('.form-sub-group');
        var formsubgroup = $(parent).children('h3');
        var addIcon = $(formsubgroup).children('.add-icon-img');
        var delParent = $(e.target).closest('.formgroup');
        console.log(delParent);
        var form_row = $(delParent).children('> .formRow');
        // let formSubGroup = $(delParent).children('.form-sub-group')
        // if (form_row.length === 0 && formSubGroup.length===0) {
        // $(delParent).closest('.form-sub-group').remove();
        $(delParent).remove();
        // }
        if (form_row.length === 0 || $(parent).children('> .formgroup').length < 5) {
          $(addIcon).removeClass('reach-limit');
        }
      },
      addFields: function addFields(e) {
        var self = this;
        var ele = $(e.target).closest('.form-sub-group');
        var key = $(ele).attr('data-key');
        var ind = $(ele).attr('inx');
        self.indArr.push(ind);
        self.nameArr.push(key);

        self.actions.loopFunction.call(self, ele);
        var nameRev = self.nameArr.reverse();
        var indRev = self.indArr.reverse();
        var dataObj = self.resObj[0];
        self.set('count', 0);
        for (var i = 0; i < nameRev.length; i++) {
          dataObj[nameRev[i]].length > 1 ? dataObj = dataObj[nameRev[i]] : dataObj = dataObj[nameRev[i]][indRev[i]];
        }
        self.actions.createAnotherForm.call(self, dataObj, ele);
        self.set("indArr", []);
        self.set("nameArr", []);
        var formgroup = $(ele).find('>.formgroup.can-del').length;
        if (formgroup >= 5) {
          $(e.target).addClass('reach-limit');
        }

        var data = $(ele).find('.formgroup.can-del');
        for (var i = 0; i < data.length; i++) {
          data[i].scrollIntoView({
            behavior: "smooth"
          });
        }

        var type = $('select[name="type"]').val();
        var row = '';
        var dataName = self.imp_key[type];
        if (dataName === undefined) {
          dataName = [];
        }

        var _loop2 = function (i) {

          if (jQuery.type(dataName[i]) === 'object') {
            k = Object.keys(dataName[i]);
            val = Object.values(dataName[i]);
            subg = $('.form-container').find('div[data-key="' + k + '"]');

            row = $(subg).find($('label[data-val="' + val + '"]'));
          }

          var star = jQuery("<span>", {
            "class": "mandatory"
          });
          $(star).text('*');

          $(row).each(function (i, e) {
            if (!$(e).find('span').length) {
              $(e).append(star);
              $(e).parent().children('.value-box').addClass("required");
            }
          });
        };

        for (var i = 0; i < dataName.length; i++) {
          var k;
          var val;
          var subg;

          _loop2(i);
        }
      },
      loopFunction: function loopFunction(el) {
        var self = this;
        var ele = el.parent();
        if ($(ele.parent().attr('class') === 'form-sub-group')) {
          var key = $(ele).attr('data-key');
          var ind = $(ele).attr('inx');
          if (key !== undefined && ind !== undefined) {
            self.indArr.push(ind);
            self.nameArr.push(key);
          }
          if ($(ele).attr('class') === 'form-container') {
            return;
          } else {
            self.actions.loopFunction.call(self, ele);
          }
          if (self.count === 10) {
            console.log('maxcall stack');
            return;
          }
          self.count++;
        }
      },
      close_popup: function close_popup() {
        var self = this;
        this.set('isLoading', false);
        //document.forms[1].reset()
        self.set("GetConfig", false);
        $('#submit_btn_cicd').prop('disabled', false);
        var modal = document.getElementById('logindivcicd');
        modal.style.display = "None";
      },
      login: function login() {

        if ($('input[name="router"]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }

        var val = [],
            hostNameArray = [];
        $('input[name="router"]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });

        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
          return false;
        }
        var self = this;
        this.set('isLoading', true);
        var getData = $('form[name=loginform]').serialize() + "&routers=" + JSON.stringify(val);
        this.store.post('acommand_session/', getData).then(function (resp) {

          if ('Session open' in resp['data']) {
            $('#submit_btn_cicd').prop('disabled', false);
            (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
            self.send('close_popup');
            return false;
          } else {
            (0, _netconfigUtilsNotify.customNotify)('info', "Credentials Verified !!! <br> Configuration is being added in pipeline. Please wait....", 120000);
            $('input[name="router"]').prop('disabled', true);
            $('input[name="routername"]').prop('disabled', true);
            $('#submit_btn_cicd').prop('disabled', true);
            self.set("sessionCheck", true);
            self.set('isLoading', false);
            self.send('convertToJson');
          }
          self.send('close_popup');
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
          self.send('close_popup');
          $('#submit_btn_cicd').prop('disabled', false);
          self.set('isLoading', false);
        });
      },
      customToggle: function customToggle() {
        var self = this;
        if (self.get("tog") == false) {
          self.set("tog", true);
          // $('div[name="conf_type"]').css("visibility", "hidden")
          self.actions.createForm.call(self, '');
          $('select[name="type"]').prop("disabled", true);
          self.set('showCustomDiv', true);
        } else {
          self.set("tog", false);
          // $('div[name="conf_type"]').css("visibility", "visible")
          self.send('onTypeChange');
          $('select[name="type"]').prop("disabled", false);
          // var txtarea = $('textarea[name="jinjadata"]')
          // self.set('template_data','')
          // txtarea.val('');
          // txtarea.attr('readonly',false);

          self.set('showCustomDiv', false);
          self.get("jinjaEditor").setValue("");
          self.get("jinjaEditor").setReadOnly(false);
        }
      },
      closePopupCicd: function closePopupCicd() {
        $(".cicd_config").css("visibility", "hidden");
      },
      refresh: function refresh(host) {
        var self = this;
        this.store.getJSON("aconfig/" + host + "/").then(function (res) {
          self.tempDict[host] = res.data;
          self.set("confText", res.data);
        });
      },
      showConfigLogin: function showConfigLogin(host) {
        var self = this;
        if (self.tempDict[host] == undefined) {
          self.set("GetConfig", true);
          self.set("sDevice.host", host);
          self.set("currHost", host);
          var modal = document.getElementById('logindivcicd');
          modal.style.display = "block";
        } else {
          self.set("sDevice.host", host);
          self.set("GetConfig", false);
          self.set("confText", self.tempDict[host]);
          $(".cicd_config").css("visibility", "visible");
        }
      },
      showConfig: function showConfig() {
        var self = this;
        var host = self.get("currHost", host);
        var uname = $('input[name="username"]').val();
        var pwd = $('input[name="password"]').val();
        var enpwd = $('input[name="enpwd"]').val();

        this.store.getJSON('aconfigwan/', { router: host, username: uname, password: pwd, enpwd: enpwd }).then(function (res) {
          self.set("sDevice.host", host);
          self.tempDict[host] = res.data;
          self.set("confText", res.data);
          $(".cicd_config").css("visibility", "visible");

          $('input[name="username"]').val('');
          $('input[name="password"]').val('');
          $('input[name="enpwd"]').val('');
          self.set("GetConfig", false);
          self.send('close_popup');
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data.");
        });
        self.set("sessionCheck", false);
      },
      convertToJson: function convertToJson() {
        var self = this;
        var type = $('select[name="type"]').val();
        var finalArr = [];
        var customArr = [];
        var template_name = '';
        if (self.get("tog") == true) {
          type = "custom";
          var custom_template_select = $('select[name="template_name_list"]').val();
          if (custom_template_select == "None") {
            template_name = $('input[name="template_name"]').val().trim();
            if (template_name == '') {
              var input = $('input[name="template_name"]');
              $(input).focus();
              (0, _netconfigUtilsNotify.customNotify)("error", "Enter template name !!!");
              return false;
            }
            if (self.get("content").custom_template.includes(template_name)) {
              var input = $('input[name="template_name"]');
              $(input).focus();
              (0, _netconfigUtilsNotify.customNotify)("error", "Template name already exitsts !!!");
              return false;
            }
            template_name = template_name + "_new";
          } else {
            template_name = custom_template_select;
          }
        }

        if ($('input[name="router"]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }

        var val = [],
            hostNameArray = [];
        $('input[name="router"]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });

        var config_comment = $('input[name="config_comment"]').val().trim();
        if (config_comment.length == 0) {
          var input = $('input[name="config_comment"]');
          $(input).focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Select enter configuration comment");
          return false;
        }

        var approver = $('select[name="approver_email"]').val().trim();
        if (approver.length == 0) {
          var input = $('select[name="approver_email"]');
          $(input).focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Select an approver email");
          return false;
        }

        var v = document.getElementsByClassName('value-box');
        var re = /[a-zA-Z0-9\.\/:_\-]/g;
        var flag = true;

        $(v).each(function (i, e) {
          var temp = $(e).val().trim();

          if (temp.length > 300) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please make sure inputs are less than 300 characters");
            flag = false;
          }

          var ne = temp.replace(re, '').trim();
          if (ne != '') {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please avoid special character except \".\" and \"/\"");
            flag = false;
          }
        });
        if (type.length == 0 && self.get("tog") == false) {
          var input = $('select[name="type"]');
          $(input).focus();
          var toggle_check = $('input[name="cusTogg"]');
          $(toggle_check).focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Please select a congifuration type or custom config checkbox");
          flag = false;
        }

        var arr = [];
        var fullObj = {};
        var rowObject = {};
        var subRowObject = {};
        var container = $('.form-container').children();
        $(container).each(function (i, e) {
          if ($(e).attr('class') === 'formRow') {
            rowObject = self.actions.parseFormRow.call(self, e);
          }
          if ($(e).attr('class') === 'form-sub-group') {
            subRowObject = self.actions.parseFormSubGroup.call(self, e);
          }
          Object.assign(fullObj, rowObject, subRowObject);
        });
        var isValid = true;
        var dataName = self.imp_key[type];

        if (dataName === undefined) {
          dataName = [];
        }

        for (var i = 0; i < dataName.length; i++) {
          var not_filed = true;
          if (jQuery.type(dataName[i]) === 'object') {
            var key;
            var len;
            var len;

            (function () {
              key = Object.keys(dataName[i]);

              var val = Object.values(dataName[i]);
              var formSubGroup = $('.form-container').find($('.form-sub-group[data-key="' + key + '"]'));
              var subgroup = $(formSubGroup).find($('label[data-val="' + val + '"]'));
              if ($(formSubGroup).attr('data-key') === 'peer_group') {
                var _parent = $(formSubGroup).children('.formgroup');
                var box = $(_parent).find('.value-box');
                len = box.filter(function () {
                  return $.trim($(this).val()).length > 0;
                });

                if (len.length === 0) {
                  not_filed = false;
                }
                if (len.length > 0) {
                  not_filed = true;
                }
              }
              if ($(formSubGroup).attr('data-key') === 'peer_group_ip') {
                var _parent2 = $(formSubGroup).children('.formgroup');
                var box = $(_parent2).find('.value-box');
                len = box.filter(function () {
                  return $.trim($(this).val()).length > 0;
                });

                if (len.length === 0) {
                  not_filed = false;
                }
                if (len.length > 0) {
                  not_filed = true;
                }
              }
              if (not_filed) {

                $(subgroup).each(function (i, e) {

                  if ($(e).parent().children('.value-box').val().trim() === '') {
                    var eleParent = $(e).parent();
                    console.log(eleParent);
                    $('.innerContainer').animate({
                      scrollTo: $(eleParent).offset().top
                    }, 2000);
                    var input = $(eleParent).children('.value-box');
                    $(input).focus();
                    (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + val);
                    isValid = false;
                  }
                });
              }
            })();
          }
          if (type === 'classmap') {
            var filled = true;
            var _row2 = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));
            if ($('.formRow').find($('label[data-val="' + dataName[0] + '"]')).siblings('.value-box').val() !== '' || $('.formRow').find($('label[data-val="' + dataName[1] + '"]')).siblings('.value-box').val() !== '') {
              isValid = true;
              filled = false;
              break;
            }
            if (filled) {
              if ($(_row2).parent().children('.value-box').val().trim() === '') {
                var ele = $(_row2).parent();
                $('.innerContainer').animate({
                  scrollTo: $(ele).offset().top
                }, 2000);
                var input = $(ele).children('.value-box');
                $(input).focus();
                (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + dataName[i]);
              }
            }
          }
          var row = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));
          if ($(row).parent().children('.value-box').val() === '') {
            var ele = $(row).parent();
            $('.innerContainer').animate({
              scrollTo: $(ele).offset().top
            }, 2000);
            var input = $(ele).children('.value-box');
            $(input).focus();
            (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + dataName[i]);
            isValid = false;
          }
        }
        if (!isValid) {
          return false;
        }

        if (type == "custom") {
          // var yaml_data = $('textarea[name="yamldata"]').val().trim();
          // var jinja = $('textarea[name="jinjadata"]').val().trim();
          var editor = self.get("jinjaEditor");
          var jinja = editor.getValue().trim();
          if (jinja == "") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter text for JINJA TEMPLATE !!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }

          var editor = self.get("yamlEditor");
          var yaml_data = editor.getValue().trim();
          if (yaml_data == "") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter text for YAML DATA !!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }

          // if(yaml_data=='')
          // {
          //   let input = $('textarea[name="yamldata"]');
          //   $(input).focus();
          //   customNotify("error","Please enter text for DATA !!!");
          //   $('#submit_btn_cicd').prop('disabled',false)
          //   flag = false
          // }
          // if(jinja=='')
          // {
          //   let input = $('textarea[name="jinjadata"]');
          //   $(input).focus();
          //   customNotify("error","Please enter text for TEMPLATE !!!");
          //   $('#submit_btn_cicd').prop('disabled',false)
          //   flag = false
          // }

          var regularExpression = /\boperation\b|\bswitches\b|\bcommands\b|\bmeta\b/g;
          if (regularExpression.test(yaml_data.toLowerCase()) == true || regularExpression.test(jinja.toLowerCase()) == true) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please avoid words - \"operation , switches , meta , commands\"");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }

          var regEx = /[a-zA-Z0-9\.\/:_\-}!{%"',)(<>=+*&)]/g;
          var yam = yaml_data.replace(regEx, '').trim();
          var jin = jinja.replace(regEx, '').trim();
          if (yam != '') {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter valid data for YAML!!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }
          if (jin != '') {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter valid data for JINJA!!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }
          //validate

          customArr.push({ "yaml": yaml_data, "jinja": jinja });
          finalArr = customArr;
          console.log(customArr);
        } else {
          arr.push(fullObj);
          finalArr = arr;
          console.log(arr);
        }

        $('#submit_btn_cicd').prop('disabled', true);
        //       if(self.get("sessionCheck")==false)
        //       {
        //         if(flag)
        //         {           
        //         $('#submit_btn_cicd').prop('disabled',true)  
        //         this.store.post('pipelinePush/',{host:JSON.stringify(val)}).then(function(res){

        //         if(res.data.status==='success')
        //         {
        //           customNotify("success", "Active session exists !!!")
        //           this.set("sessionCheck",true)
        //         }
        //         if(res.data.status==='failed')
        //         {
        //           customNotify("error", "There is no existing session")

        //           if(flag){
        //             self.set("GetConfig",false)
        //             var modal = document.getElementById('logindivcicd')
        //             modal.style.display = "block";
        //             }
        //         }
        //         });
        //       }

        //  }
        //   else{

        if (flag) {
          if (self.get("sessionCheck") == false) {
            (0, _netconfigUtilsNotify.customNotify)('info', "Please Wait While Checking For Existing Session !!!", 120000);
          }
          self.store.post('pipelinePush/', { commit_msg: config_comment, host: JSON.stringify(val), type: type, commands: JSON.stringify(finalArr), approver_email: approver, template_name: template_name }).then(function (res) {

            if (res.data.status === 'success') {
              (0, _netconfigUtilsNotify.customNotify)("success", "Sent Successfully !!!");
              $('input').val('');
              $('input[name="config_comment"]').val('');
              self.set("isPodTypeSelected", false);
              $('.value-box').val('').trigger('chosen:updated');
              $('.selected').val('').trigger('chosen:updated');
              self.set('showCustomDiv', false);
              self.set("tog", false);
              $('.form-container').empty();
              var Data = "&router=" + JSON.stringify(val);

              self.store.getJSON('amultipleconf/', Data).then(function (resp) {
                if ("notdisconnected" in resp['data']) {
                  (0, _netconfigUtilsNotify.customNotify)("error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
                } else {
                  self.set("sessionCheck", false);
                  self.get('router').transitionTo("testflow.pipeline");
                  (0, _netconfigUtilsNotify.customNotify)("success", "Added the configuration in pipeline!!!");
                  console.log("Successfully closed all connections!");
                }
              }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data");
              });
            }
            if (res.data.status === 'failed') {
              if (res.data.msg == 'No Existing Connection') {
                if (flag) {
                  var modal = document.getElementById('logindivcicd');
                  (0, _netconfigUtilsNotify.customNotify)("error", "No Existing Connection");
                  modal.style.display = "block";
                }
              } else {
                (0, _netconfigUtilsNotify.customNotify)("error", res.data.msg);
                $('#submit_btn_cicd').prop('disabled', false);
              }
            }
          }, function (err) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data");
          });
        }

        // }
        $('input[name="router"]').prop('disabled', false);
        $('input[name="routername"]').prop('disabled', false);
      },

      parseFormRow: function parseFormRow(ele) {
        var self = this;
        var obj = {};
        var label = undefined;
        var value = undefined;
        $(ele).each(function (i, e) {
          label = $(e).children(".key-box").attr('data-val');
          console.log($(e).children(".key-box").attr('data-val'));
          value = $(e).children('.value-box').val();
          label === '' ? label = $(e).children('.input-box').attr('placeholder') : label;
          var arr = [];
          arr.push($(e).children('.input-box').val());
          value === undefined ? value = arr : value;
          obj = _defineProperty({}, label, value);
        });
        return obj;
      },

      parseFormSubGroup: function parseFormSubGroup(ele) {
        var self = this;
        var obj = {};
        var arrLabel = $(ele).attr('data-key');
        var tempArr = [];
        $(ele).find('> .formgroup').each(function (i, e) {
          var tempObj = {};
          $(e).children().each(function (i, e) {
            if ($(e).attr('class') === 'formRow') {
              var label = $(e).children(".key-box").attr('data-val');
              var value = $(e).find('.value-box').val();
              label === '' ? label = $(e).find('.input-box').attr('placeholder') : label;
              var arr = [];
              arr.push($(e).find('.input-box').val());
              value === undefined ? value = arr : value;
              tempObj[label] = value;
            }
            if ($(e).attr('class') === 'formRow can-del') {
              var label = $(e).children(".key-box").attr('data-val');
              var value = $(e).find('.value-box').val();
              label === '' ? label = $(e).find('.input-box').attr('placeholder') : label;
              var arr = [];
              arr.push($(e).find('.input-box').val());
              value === undefined ? value = arr : value;
              tempObj[label] = value;
            }
            if ($(e).attr('class') === 'form-sub-group') {
              var temp = self.actions.parseFormSubGroup.call(self, e);
              Object.assign(tempObj, temp);
            }
          });
          tempArr.push(tempObj);
        });
        obj[arrLabel] = tempArr;
        return obj;
      }
    }
  });
});
define('netconfig/controllers/lanconf/wancommand/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        pods: [],
        podhosts: [],
        userRouter: [],
        routerwithHost: [],
        isShowApprove: false,
        isSaving: false,
        isLoading: false,
        approver_name: "",
        isPodTypeSelected: false,
        isRouterConnected: false,
        editor: {},
        cmdResultShow: false,
        sugRouter: null,

        initEditor: function initEditor() {
            var self = this;
            this.set('isRouterConnected', false);
            this.set('isPodTypeSelected', false);
            this.set('cmdResultShow', false);
            this.set('podhosts', []);
            _ember['default'].run.schedule("afterRender", function () {
                self.set("cmdResult", "");
                var langTools = ace.require("ace/ext/language_tools");
                var editor = ace.edit("editor");
                self.set("editor", editor);
                editor.setOptions({
                    enableBasicAutocompletion: true,
                    enableLiveAutocompletion: true
                });
                var cmdCompleter = {
                    getCompletions: function getCompletions(editor, session, pos, prefix, callback) {
                        console.log("check0");
                        if (prefix.length === 0) {
                            callback(null, []);return;
                        }
                        var router = self.get("sugRouter");
                        var lineText = session.getLine(pos.row).substring(0, pos.column);
                        self.get('store').getJSON("acommand/?router=" + router + "&cmd=" + lineText).then(function (res) {
                            callback(null, res.data.result.map(function (word) {
                                return { name: word, value: word, score: 10, meta: "CLI autocomplete" };
                            }));
                        });
                    }
                };
                $('.formContainer').on('change', 'input[type="checkbox"]', function () {
                    if ($(this).attr('name') === "routername") {
                        if ($(this).is(':checked')) {
                            $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
                        } else {
                            $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
                        }
                    } else {
                        if ($(this).is(':checked')) {
                            if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
                            } else {
                                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
                            }
                        } else {
                            $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
                        }
                    }
                });
                //langTools.setCompleter(cmdCompleter);
            });
        },
        actions: {
            setdc: function setdc() {
                var dc = $('select[name="dc"]').val();
                if (dc) {
                    var pods = [];
                    for (var key in this.get("content").routers[dc]) {
                        pods.push(key);
                    }
                    this.set('pods', pods);
                    this.send('fetchhosts');
                    _ember['default'].run.next(function () {
                        $('select[name="podtype"]').trigger('chosen:updated');
                    });
                }
            },
            fetchhosts: function fetchhosts() {
                //var devices = this.get("content").routers[$('select[name="dc"]').val()][pod]
                var devices = this.get("content").routers[$('select[name="dc"]').val()];
                console.log(self.get("wandata"));
                if (devices) {
                    this.set('isSspine', false);
                    var data = {};
                    for (var i = 0; i < devices.length; i++) {
                        if (devices[i].category in data) {
                            data[devices[i].category].push(devices[i]);
                        } else {
                            data[devices[i].category] = [devices[i]];
                        }
                    }

                    this.set("podhosts", data);
                } else {
                    this.set('isSspine', true);
                    this.set("podhosts", devices);
                }
                this.set("isPodTypeSelected", true);
            },
            getlogin: function getlogin() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="auser"]'))) {
                    return false;
                }
                if ($('input[name="router"]:checked').length == 0) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
                    return false;
                }
                var val = [],
                    val1 = [];
                $('input[name="router"]:checked').each(function (i) {
                    val[i] = $(this).val().split(",")[1];
                    val1[i] = $(this).val().split(",");
                });
                this.set('userRouter', val);
                this.set('routerwithHost', val1);
                var modal = document.getElementById('logindiv');
                modal.style.display = "block";
            },
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
                    return false;
                }
                var self = this;
                this.set('isLoading', true);
                var getData = $('form[name=loginform]').serialize() + "&routers=" + JSON.stringify(this.get('userRouter')) + "&name=" + $('input[name="name"]').val();
                this.get('store').post('acommand_session/', getData).then(function (resp) {
                    if ('Session open' in resp['data']) {
                        (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
                        self.send('close_popup');
                        return false;
                    }
                    var dcname = $('select[name="dc"]').val(),
                        podtype = $('select[name="podtype"]').val(),
                        uname = $('input[name="name"]').val();
                    self.set("userAbsent", self.get('routerwithHost'));
                    self.set('isRouterConnected', true);
                    _ember['default'].run.next(function () {
                        $('input[name="dcname"]').val(dcname);
                        $('input[name="pdtype"]').val(podtype);
                    });
                    $(".cmd_form").css("visibility", "visible");
                    self.get("editor").focus();
                    self.set("cmdResultShow", true);
                    self.send('close_popup');
                }, function (err) {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
                    self.set('isLoading', false);
                });
            },
            close_popup: function close_popup() {
                this.set('isLoading', false);
                //document.forms[1].reset()
                var modal = document.getElementById('logindiv');
                modal.style.display = "None";
            },
            approve: function approve() {
                var editor = this.get("editor");
                var cmds = editor.getValue().split("\n").removeObject("");
                var val = [],
                    self = this;
                $('input[name="secondarySelect"]:checked').each(function (i) {
                    val[i] = $(this).val();
                });
                if ($('input[name="config_comment"]').val() === "") {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Please enter config comment.");
                    return false;
                }
                var approver = "";
                if (this.get("content.isAdminAccount") === true) {
                    approver = localStorage.getItem("appuser");
                } else {
                    approver = $('select[name="approver_email"]').val();
                }
                self.set('approver_name', approver);
                var postdata = "routers=" + JSON.stringify(val) + "&cmds=" + JSON.stringify(cmds) + '&approver_email=' + self.get("approver_name") + '&config_comment=' + $('input[name="config_comment"]').val();
                self.set('isSaving', true);
                this.get('store').post('workflow/', postdata).then(function (resp) {
                    self.set('isSaving', false);
                    if (resp.data == null) {
                        (0, _netconfigUtilsNotify.customNotify)("error", "Invalid command!");
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)("success", resp.data);
                        self.set('isShowApprove', false);
                        self.send('reloadPage');
                    }
                }, function (err) {
                    self.set('isSaving', false);
                    self.send('cancel');
                });
            },
            submit: function submit() {
                var editor = this.get("editor");
                var cmds = editor.getValue().split("\n").removeObject("");
                if (cmds == "") {
                    (0, _netconfigUtilsNotify.customNotify)("error", "No Command input found.");
                    return false;
                }

                if ($('input[name="secondarySelect"]:checked').length == 0) {
                    (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
                    return false;
                }
                var val = [],
                    self = this;
                $('input[name="secondarySelect"]:checked').each(function (i) {
                    val[i] = $(this).val();
                });
                var isValid = true;
                $(cmds).each(function (i, e) {
                    if (!/^sh/.test(e)) {
                        isValid = false;
                        return false;
                    }
                });

                if (!isValid) {
                    if (this.get("content.isAdminAccount") === false) {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Click Sumbmit and Get Approval for Configuration Commands.');
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Enter Configuration Comment Before Executing');
                    }
                    this.set('isShowApprove', true);
                    return false;
                } else {
                    this.set('isShowApprove', false);
                }
                this.set("isSaving", true);

                console.log(cmds);
                var approver1 = "";
                if (this.get("content.isAdminAccount") === true) {
                    approver1 = localStorage.getItem("appuser");
                } else {
                    approver1 = $('select[name="approver_email"]').val();
                }
                var self = this;
                self.set('approver_name', approver1);
                var postdata = "routers=" + JSON.stringify(val) + "&cmds=" + JSON.stringify(cmds) + '&approver_email=' + self.get("approver_name") + '&config_comment=' + $('input[name="config_comment"]').val();
                console.log("postdata: ", postdata);

                this.get('store').post('acommand/', postdata).then(function (resp) {
                    self.set('isSaving', false);
                    if (resp.data == null) {
                        (0, _netconfigUtilsNotify.customNotify)("error", "Invalid command!");
                    } else {
                        self.set("cmdResult", resp.data.replace(/\s+$/g, ''));
                    }
                }, function (err) {
                    self.set('isSaving', false);
                    self.send('cancel');
                });
            },
            cancel: function cancel() {
                var self = this,
                    deldata = "&router=" + JSON.stringify(this.get('userRouter'));
                this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
                    if ("notdisconnected" in resp['data']) {
                        (0, _netconfigUtilsNotify.customNotify)("error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
                    } else {
                        console.log("Successfully closed all connections!");
                    }
                    // $("form[name=auser]")[0].reset()
                    self.set('isRouterConnected', false);
                    self.set('isPodTypeSelected', false);
                    self.set('pods', []);
                    $(".cmd_form").css("visibility", "hidden");
                    self.set("cmdResult", "");
                    self.set("cmdResultShow", false);
                    self.get("editor").setValue("");
                });
            }
        }
    });
});
define('netconfig/controllers/lanconf/waninterfaces/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    appCtrl: _ember['default'].inject.controller('application'),
    pods: [],
    podhosts: [],
    lanconfRouter: [],
    validRouter: [],
    isLoading: false,
    isPodTypeSelected: false,
    showForm0: true,
    interfaceNumber: null,
    interfaceType: null,
    portChannel: false,
    approver_email: '',
    config_comment: '',
    vlan: false,
    present: [],
    absent: [],
    inttypes: [],
    formName: null,
    routerWithHost: [],
    channelGroup: true,
    l2Vlan: false,
    showVlan: true,
    wandata: [],

    init: function init() {
      $('textarea[name="vlan"]').tagsInput({
        width: '100%',
        defaultText: 'id',
        onAddTag: function onAddTag(a, b) {},
        onRemoveTag: function onRemoveTag(a, b, c) {}
      });
    },

    actions: {

      onLoad: function onLoad() {
        $('.innerContainer').on('change', 'input[type="checkbox"]', function () {
          if ($(this).attr('name') === "routername") {
            if ($(this).is(':checked')) {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', true);
            } else {
              $(this).closest('li').find('> ul input[type="checkbox"]').prop('checked', false);
            }
          } else {
            if ($(this).is(':checked')) {
              if ($(this).closest('ul').find('input[type="checkbox"]').length === $(this).closest('ul').find('input[type="checkbox"]:checked').length) {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', true);
              } else {
                $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
              }
            } else {
              $(this).closest('ul').siblings('label').find('input[type="checkbox"]').prop('checked', false);
            }
          }
        });
      },
      disconnect: function disconnect() {
        var present = Array.from(this.get("present"), function (_, i) {
          return _[1];
        });
        var absent = Array.from(this.get("absent"), function (_, i) {
          return _[1];
        });
        var hosts = (present ? present : []).concat(absent ? absent : []);
        var self = this,
            deldata = "&router=" + JSON.stringify(hosts);
        this.get('store').getJSON('amultipleconf/', deldata).then(function (resp) {
          if ("notdisconnected" in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)("Error", "Unable to close connection! Please manually disconnect for routers " + resp['data']['notdisconnected'].join(", "));
          } else {
            console.log("Successfully closed all connections!");
          }
        });
      },

      setdc: function setdc() {
        var dc = $('select[name="dc"]').val();
        console.log("Selected dc: ", dc);
        if (dc) {
          var pods = [];
          for (var key in this.get("content").routers[dc]) {
            pods.push(key);
          }
          this.set('pods', pods);
          this.set("isPodTypeSelected", true);
          this.set('isSspine', false);
          // this.send('fetchhosts')

          _ember['default'].run.next(function () {
            $('select[name="podtype"]').trigger('chosen:updated');
          });
        }
      },
      fetchhosts: function fetchhosts() {
        var devices = this.get("content").routers[$('select[name="dc"]').val()][pod];
        if (devices) {
          this.set('isSspine', false);
          var data = {};
          for (var i = 0; i < devices.length; i++) {
            if (devices[i].category in data) {
              data[devices[i].category].push(devices[i]);
            } else {
              data[devices[i].category] = [devices[i]];
            }
          }
          this.set("podhosts", data);
        } else {
          this.set('isSspine', true);
          this.set("podhosts", devices);
        }
        this.set("isPodTypeSelected", true);
      },
      getlogin: function getlogin() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="alconf"]'))) {
          return false;
        }

        if ($('form[name=alconf]')[0].interfacetype.value === "Vlan" || $('form[name=alconf]')[0].interfacetype.value == "Vxlan") {

          if ($('input[type="checkbox"][name="router"][data-router="Spine"]:checked').length || $('input[type="checkbox"][name="router"][data-router="CVX"]:checked').length) {
            (0, _netconfigUtilsNotify.customNotify)("error", $('form[name=alconf]')[0].interfacetype.value + " cannot be created on Spine and CVX");
            $('input[type="checkbox"][data-router="Spine"]:checked').prop('checked', false);
            $('input[type="checkbox"][data-router="CVX"]:checked').prop('checked', false);
            return false;
          }

          if ($('select[name="podtype"]').val() === "Super spine") {
            $('input[type="checkbox"][name="router"], input[type="checkbox"][name="routername"]').prop('checked', false);
            (0, _netconfigUtilsNotify.customNotify)("error", $('form[name=alconf]')[0].interfacetype.value + " cannot be created on SuperSpine");
            return false;
          }
        }

        if ($('form[name=alconf]')[0].interfacetype.value == "Ethernet") {
          //console.log("Inside ethernet!")
          if (!this.ValidateEthernet($('form[name=alconf]')[0].interfacenumber.value)) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid interface number/range!");
            return false;
          }
        } else {
          //console.log("Inside not ethernet!")
          if (!this.ValidateIntfAddress($('form[name=alconf]')[0].interfacenumber.value)) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid interface number/range!");
            return false;
          }
        }
        if ($('form[name=alconf] input[name=router]:checked').length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var val = [],
            hostNameArray = [];
        $('form[name=alconf] input[name=router]:checked').each(function (i) {
          val[i] = $(this).val().split(",")[1];
          hostNameArray[i] = $(this).val().split(",");
        });
        this.set('lanconfRouter', val);
        this.set('routerWithHost', hostNameArray);
        this.set("type", $('form[name=alconf]')[0].type.value);
        this.set("interfaceType", $('form[name=alconf]')[0].interfacetype.value);
        this.set("interfaceNumber", $('form[name=alconf]')[0].interfacenumber.value);
        var approver_name = "";
        if (this.get("content.isAdminAccount") == true) {
          approver_name = localStorage.getItem("appuser");
        } else {
          approver_name = $('select[name="approver_email"]').val();
        }
        this.set('approver_email', approver_name);
        this.set('config_comment', $('input[name="config_comment"]').val());

        var modal = document.getElementById('logindiv');
        modal.style.display = "block";
      },
      close_popup: function close_popup() {
        console.log("close function called.");
        this.set('isLoading', false);
        //document.forms[1].reset()
        var modal = document.getElementById('logindiv');
        modal.style.display = "None";
      },

      login: function login() {
        var self = this;
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
          return false;
        }
        this.set('isLoading', true);
        var acheckacldata = $('form[name=loginform]').serialize() + "&routers=" + JSON.stringify(this.get('lanconfRouter')) + "&" + $('form[name=alconf]').serialize();

        this.get('store').post('acheckint/', acheckacldata).then(function (resp) {
          if ('Session open' in resp['data']) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Session open for few routers. Please wait until they are disconnected.");
            self.send('close_popup');
            return false;
          }
          self.set("present", resp.data["interface-present"]);
          self.set("absent", resp.data["interface-absent"]);
          self.setPresent();
          if (self.get("type") == "L3") {
            self.set("formName", "Form4");
            self.toggleForm4();
          } else if (self.get("interfaceType") == "Vxlan") {
            self.set("formName", "Form3");
            self.toggleForm3();
          } else if (self.get("interfaceType") == "Vlan") {
            self.set("formName", "Form2");
            self.toggleForm2();
          } else {
            self.set("formName", "Conf");
            self.toggleForm1();
          }
          self.toggleForm0();
          self.send("close_popup");
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
          self.set('isLoading', false);
        });
      },
      confFormSubmit: function confFormSubmit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="ConfForm"]'))) {
          return false;
        }
        var spType = $("form[name=ConfForm] select[name=switchport_type]").val();
        var vlan = $("form[name=ConfForm] textarea[name=vlan]").val();
        if (spType == "access" || spType == "trunk") {
          if (vlan == "") {
            (0, _netconfigUtilsNotify.customNotify)('error', "Enter Vlan Value.");
            return false;
          }
        }
        if (vlan != "") {
          if (spType == "" || spType == " ") {
            (0, _netconfigUtilsNotify.customNotify)('error', "Select Switchport Type.");
            return false;
          }
        }
        if (spType == "access") {
          if (vlan.split(",").length > 1) {
            (0, _netconfigUtilsNotify.customNotify)('error', "Switchport type access can't have more than one vlan.");
            return false;
          }
        }
        var val = [];
        $('form[name=ConfForm] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=ConfForm]").serialize() + "&interfacetype=" + this.get("interfaceType") + "&interfacenumber=" + this.get("interfaceNumber") + "&routers=" + JSON.stringify(val) + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {

          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelConf");
        }, function (err) {
          self.set("isLoading", false);
          console.log(err);
        });
      },
      form2Submit: function form2Submit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="Form2"]'))) {
          return false;
        }
        var val = [];
        $('form[name=Form2] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=Form2]").serialize() + "&routers=" + JSON.stringify(val) + "&vlan=" + this.get("interfaceNumber") + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {
          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelForm2");
        }, function (err) {
          self.set("isLoading", false);
          (0, _netconfigUtilsNotify.customNotify)('error', err);
          console.log(err);
        });
      },
      form3Submit: function form3Submit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="Form3"]'))) {
          return false;
        }
        var val = [];
        $('form[name=Form3] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=Form3]").serialize() + "&interfacetype=" + this.get("interfaceType") + "&interfacenumber=" + this.get("interfaceNumber") + "&routers=" + JSON.stringify(val) + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {
          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelForm3");
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', err);
          self.set("isLoading", false);
          console.log(err);
        });
      },
      form4Submit: function form4Submit() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="Form4"]'))) {
          return false;
        }
        var ipaddr = $("input[name=ipaddr]").val();

        if (ipaddr != "" && !this.ValidateIPaddress(ipaddr)) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid ip address with mask.");
          return false;
        }
        var aclName = $("form[name='Form4'] input[name='acl']").val();
        var aclDirection = $("form[name='Form4'] select[name='acl_direction']").val();
        if (aclName != "") {
          if (aclDirection == "" || aclDirection == " ") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Select Access List Direction.");
            return false;
          }
        }
        if (aclDirection != "" && aclDirection != " ") {
          if (aclName == "" || aclName == undefined) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Provide Access List name.");
            return false;
          }
        }

        var val = [];
        $('form[name=Form4] :checkbox:checked').each(function (i) {
          val[i] = $(this).val();
        });
        if (val.length == 0) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select atleast one router!");
          return false;
        }
        var data = $("form[name=Form4]").serialize() + "&interfacetype=" + this.get("interfaceType") + "&interfacenumber=" + this.get("interfaceNumber") + "&routers=" + JSON.stringify(val) + '&approver_email=' + this.get('approver_email') + '&config_comment=' + this.get('config_comment') + '&layer=' + this.get("type");
        var self = this;
        this.set("isLoading", true);
        this.get("store").post("workflow/", data).then(function (res) {
          if (typeof res['data'] == "string") {
            (0, _netconfigUtilsNotify.customNotify)('success', 'Configuration Sent for Approval');
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', "Failed to Send for Approval");
          }
          self.set("isLoading", false);
          self.send("cancelForm4");
        }, function (err) {
          self.set("isLoading", false);
          console.log(err);
        });
      },
      cancelConf: function cancelConf() {
        this.toggleForm1();
        this.toggleForm0();
        this.set("channelGroup", true);
        this.set("pods", []);
        this.set("formName", null);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        self.set("isLoading", false);
      },
      cancelForm2: function cancelForm2() {
        this.toggleForm2();
        this.toggleForm0();
        this.set("pods", []);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        this.set("formName", null);
        self.set("isLoading", false);
      },
      cancelForm3: function cancelForm3() {
        this.toggleForm3();
        this.toggleForm0();
        this.set("pods", []);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        this.set("formName", null);
        self.set("isLoading", false);
      },
      cancelForm4: function cancelForm4() {
        this.toggleForm4();
        this.toggleForm0();
        this.set("pods", []);
        this.set("isPodTypeSelected", false);
        this.send("disconnect");
        this.set("formName", null);
        self.set("isLoading", false);
      },
      updateType: function updateType() {
        this.send("l2VlanCheck");
        //Delete below line and uncomment remaining to UNDO
        this.set("inttypes", ["Ethernet", "Port-Channel", "Vlan"]);
        // if ($("select[name=type]").val() == "L2") {
        //   this.set("inttypes", ["Ethernet", "Port-Channel", "Vlan", "Vxlan"])
        // } else {
        //   this.set("inttypes", ["Ethernet", "Port-Channel", "Vlan"])
        // }
        _ember['default'].run.next(function () {
          $("select[name=interfacetype]").trigger('chosen:updated');
        });
      },
      hideChannelGroup: function hideChannelGroup() {
        var val = $('select[name="switchport_type"]').val();
        if (val == " ") {
          this.set("channelGroup", true);
          $('textarea[name="vlan"]')[0].value = "";
          $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2) {
            param2.remove();
          });
          $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
          $('textarea[name="vlan"]').next('.tagsinput').find('input').attr("disabled", true);
        } else {
          this.set("channelGroup", false);
          $('textarea[name="vlan"]').next('.tagsinput').find('input').attr("disabled", false);
        }
      },
      l2VlanCheck: function l2VlanCheck() {
        var type = $('select[name="type"]').val();
        var intType = $('select[name="interfacetype"]').val();
        if (type == "L2" && intType == "Vlan") {
          this.set("l2Vlan", true);
        } else {
          this.set("l2Vlan", false);
        }
      }
    },
    toggleForm0: function toggleForm0() {
      if (this.get("showForm0")) {
        this.set("showForm0", false);
      } else {
        this.set("showForm0", true);
      }
    },
    toggleForm1: function toggleForm1() {
      if (this.get("interfaceType") == "Port-Channel") {
        this.set("portChannel", true);
      } else {
        this.set("portChannel", false);
      }
      if ($(".LanIntConf").css("visibility") == "hidden") {
        this.init();
        $(".LanIntConf").css("visibility", "visible");
      } else {
        $("form[name=ConfForm]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2, param3) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=ConfForm] select').trigger('chosen:updated');
        $(".LanIntConf").css("visibility", "hidden");
      }
    },
    toggleForm2: function toggleForm2() {
      if ($(".LanVlanConf").css("visibility") == "hidden") {
        this.init();
        $(".LanVlanConf").css("visibility", "visible");
      } else {
        $("form[name=Form2]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2, param3) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=Form2] select').trigger('chosen:updated');
        $(".LanVlanConf").css("visibility", "hidden");
      }
    },
    toggleForm3: function toggleForm3() {
      if ($(".LanVxlanConf").css("visibility") == "hidden") {
        this.init();
        $(".LanVxlanConf").css("visibility", "visible");
      } else {
        $("form[name=Form3]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2, param3) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=Form3] select').trigger('chosen:updated');
        $(".LanVxlanConf").css("visibility", "hidden");
      }
    },
    toggleForm4: function toggleForm4() {
      if (this.get("interfaceType") == "Vlan") {
        this.set("vlan", true);
      } else {
        this.set("vlan", false);
      }
      if ($(".LanL3Conf").css("visibility") == "hidden") {
        $(".LanL3Conf").css("visibility", "visible");
      } else {
        $("form[name=Form4]")[0].reset();
        $('textarea[name="vlan"]')[0].value = "";
        $('textarea[name="vlan"]').next('.tagsinput').find('.tag').each(function (param1, param2) {
          param2.remove();
        });
        $('textarea[name="vlan"]').next('.tagsinput').find('input').removeClass("not_valid");
        $('form[name=Form4] select').trigger('chosen:updated');
        $(".LanL3Conf").css("visibility", "hidden");
      }
    },

    setPresent: function setPresent() {
      var rwh = this.get("routerWithHost");
      var present = this.get("present");
      var absent = this.get("absent");
      var temp1 = [];
      var temp2 = [];
      for (var i = 0; i < rwh.length; i++) {
        if (present) for (var j = 0; j < present.length; j++) {
          if (present[j] == rwh[i][1]) {
            temp1.addObject(rwh[i]);
          }
        }
        if (absent) for (var k = 0; k < absent.length; k++) {
          if (absent[k] == rwh[i][1]) {
            temp2.addObject(rwh[i]);
          }
        }
      }
      this.set("present", temp1);
      this.set("absent", temp2);
    },
    ValidateIPaddress: function ValidateIPaddress(ipaddress) {
      if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\/[0-9]{2})$/.test(ipaddress)) {
        return true;
      }
      return false;
    },
    ValidateIP: function ValidateIP(ipaddress) {
      if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
        return true;
      }
      return false;
    },
    ValidateEthernet: function ValidateEthernet(intfNumber) {
      return (/^\d+(\/[1-4])?(-\d+(\/[1-4])?)?$/g.test(intfNumber)
      );
    },
    ValidateIntfAddress: function ValidateIntfAddress(intfnumber) {
      return (/^\d+(-\d+)?$/g.test(intfnumber)
      );
    }
  });
});
define('netconfig/controllers/login', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Controller.extend({
        appCtrl: _ember['default'].inject.controller('application'),

        actions: {
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="login"]'))) {
                    return false;
                }
                var self = this;
                this.set('isSaving', true);
                this.store.post('../api-auth-token/', $('form[name="login"]').serialize()).then(function (res) {
                    self.set('isSaving', false);
                    localStorage.setItem('authtoken', res.token);
                    localStorage.setItem('appuser', $('input[name="username"]').val());
                    window.authtoken = res.token;
                    window.isLogin = true;
                    self.set('appCtrl.login', true);
                    self.get('router').transitionTo('monitoring.inventory');
                }, function (err) {
                    self.set('isSaving', false);
                    window.isLogin = false;
                    self.set('appCtrl.login', false);
                    (0, _netconfigUtilsNotify.customNotify)('error', err.message);
                });
                return false;
            },
            iamRedirect: function iamRedirect() {
                window.location = "https://accounts.zoho.com/oauth/v2/auth?scope=email,AaaServer.profile.READ&client_id=1000.6ZPXU3HZIE5Z81C9AMDPC4BH28UWBK&state=testing&response_type=code&redirect_uri=https://in2-pop-netops.zohonoc.com/oauth2callback&access_type=online";
            }
        }
    });
});
define('netconfig/controllers/monitoring/inventory', ['exports', 'netconfig/utils/notify', 'ember', 'netconfig/utils/telemetryUrl'], function (exports, _netconfigUtilsNotify, _ember, _netconfigUtilsTelemetryUrl) {
    exports['default'] = _ember['default'].Controller.extend({
        appCtrl: _ember['default'].inject.controller('application'),
        store: _ember['default'].inject.service('store'),
        GlobalGraphUrl: "",
        isTimeSeries: false,
        globFromTime: "",
        globToTime: "",
        lastRefreshed: Date.now(),
        didRender: function didRender() {
            console.log("Using did render");
        },
        actions: {
            changeContents: function changeContents(value, param) {
                var catgname = $('select[name="cat"]').val();
                var podname = $('select[name="podtype"]').val();
                var devictype = $('select[name="type"]').val();
                var catgs = [],
                    pods = [],
                    dtype = [],
                    result = [];
                var wanresult = [];
                if (devictype == 'All') {
                    dtype = Object.assign([], this.get('type'));
                    dtype.splice(0, 1);
                } else {
                    dtype.push(dtype);
                }
                if (catgname == 'All') {
                    catgs = Object.assign([], this.get('category'));
                    catgs.splice(0, 1);
                } else {
                    catgs.push(catgname);
                }
                if (podname == 'All') {
                    pods = Object.assign([], this.get('pod'));
                    pods.splice(0, 1);
                } else {
                    pods.push(podname);
                }
                var allContent = this.get('allcontent');
                for (var i = 0; i < allContent.length; i++) {
                    wanresult.push(allContent[i]);
                }
                this.set('wancontent', wanresult);
                console.log(this.get('wancontent', wanresult));
                $(allContent).each(function (i, e) {
                    if (devictype === "WAN" && e.devicetype === "WAN") {
                        result.push(e);
                    } else if (devictype === "All") {
                        if (catgname === "All") {
                            if (podname === "All") {
                                result.push(e);
                            }
                        }
                    } else if (devictype !== "WAN" && e.devicetype !== "WAN") {
                        if (catgname === "All") {
                            if (podname === "All") {
                                result.push(e);
                            } else if (e.podtype === podname) {
                                result.push(e);
                            }
                        } else if (e.category === catgname) {
                            if (podname === "All") {
                                result.push(e);
                            } else if (e.podtype === podname) {
                                result.push(e);
                            }
                        }
                    }
                });
                console.log(allContent);
                console.log(devictype);
                //console.log("Content result:", result)
                this.set('content', result);
            },

            onLoad: function onLoad() {},
            divertTo: function divertTo(param1) {
                var self = this;
                localStorage.setItem('teleIP', param1);
                self.get('router').transitionTo('monitoring.telemetry');
            },
            showLeft: function showLeft() {
                this.toggleProperty('appCtrl.showLeft');
            },
            resetDate: function resetDate() {
                $('input[name="fromTime"]').val("");
                $('input[name="toTime"]').val("");
            },
            refreshAll: function refreshAll() {

                var self = this;
                self.set("lastRefreshed", Date.now());

                var ip = $('select[name="dc"]').val();
                self.send("resetDate");
                this.store.getJSON('ethTableCall/?host=' + ip).then(function (res) {
                    (0, _netconfigUtilsNotify.customNotify)('info', res.data);
                }, function (err) {
                    (0, _netconfigUtilsNotify.customNotify)('error', err.message);
                });

                self.send("dcSelect");
            },
            change: function change() {}
        }

    });
});
// toggleGraph: function() {
//   alert("Hello")
//   var self = this;
//   var panedId=``
//   var ip = $('select[name="dc"]').val();

//   if(self.get("isTimeSeries"))
//   {
//     panedId = self.get("statGraph")
//     self.set("isTimeSeries",false)
//   }
//   else{
//     panedId = self.get("timeSeries")

//     self.set("isTimeSeries",true)
//   }
//   self.send("resetDate")

//   var urlGraph= `http://172.21.215.74:3000/d-solo/${panedId}/graphs?orgId=1&var-Allow=${ip}&theme=light&panelId=`
//   var paramGraph = self.paramGraph
//   for (let x in paramGraph) {
//       $(x).attr('src',urlGraph+paramGraph[x])
//     }

// },

// dcSelect: function(){

//     var self=this
//     var ip = $('select[name="dc"]').val();
//     var start = ""
//     var end = ""

//     var panedId=``
//     if(self.get("isTimeSeries"))
//     {
//       panedId = self.get("timeSeries")
//     }
//     else{
//       panedId = self.get("statGraph")
//     }

//     var fromTime = $('input[name="fromTime"]').val().toString();
//     var toTime = $('input[name="toTime"]').val().toString();

//     if(fromTime.length!=0 && toTime.length!=0){

//       var fromTime_ = new Date(fromTime).toISOString();
//       var toTime_ = new Date(toTime).toISOString();

//       var fromTime_ = Date.parse(fromTime_);
//       var toTime_ = Date.parse(toTime_);
//       self.set("globFromTime", fromTime_)
//       self.set("globToTime", toTime_)

//       start = fromTime_
//       end = toTime_
//     }

//     var urlGraph= `http://172.21.215.74:3000/d-solo/${panedId}/graphs?orgId=1&var-Allow=${ip}&from=${start}&to=${end}&theme=light&panelId=`

//     var urlTable= `http://172.21.215.74:3000/d-solo/3Y9GrVyVz/interface-tables-final?orgId=1&var-Allow=${ip}&from=${start}&to=${end}&theme=light&panelId=`

//     for (let x in paramsTable) {
//         $(x).attr('src',urlTable+paramsTable[x])
//       }

//     for (let x in paramGraph) {
//         $(x).attr('src',urlGraph+paramGraph[x])
//       }

// },
// pageSelect: function(){
//     var page = $('select[name="pSelect"]').val();
//     var self=this
//     if(page=="dashboard")
//     {
//         self.get('router').transitionTo("dashboard_lan")
//     }
//     else{
//         self.get('router').transitionTo("telemetry")
//     }
// },
define('netconfig/controllers/monitoring/telemetry', ['exports', 'netconfig/utils/notify', 'ember', 'netconfig/utils/telemetryUrl'], function (exports, _netconfigUtilsNotify, _ember, _netconfigUtilsTelemetryUrl) {
  exports['default'] = _ember['default'].Controller.extend({
    appCtrl: _ember['default'].inject.controller('application'),
    store: _ember['default'].inject.service('store'),
    GlobalGraphUrl: "",
    timeSeries: _netconfigUtilsTelemetryUrl.timeGraph,
    IP: "",
    isTimeSeries: false,
    globFromTime: "",
    globToTime: "",
    lastRefreshed: Date.now(),
    didRender: function didRender() {
      console.log("Using did render");
    },

    actions: {
      onLoad: function onLoad() {

        var self = this;
        self.set("isTimeSeries", false);

        $('.ui-resizable-handle').remove();
        //var ip = $('select[name="dc"]').val();
        var ip = localStorage.getItem('teleIP');
        self.set("IP", ip);

        //var urlTable= `http://172.21.215.74:3000/d-solo/3Y9GrVyVz/interface-tables-final?orgId=1&var-Allow=${ip}&refresh=5s&theme=light&panelId=`
        //var urlGraph= `http://172.21.215.74:3000/d-solo/z9UyllLVk/graphs-big-number?orgId=1&var-Allow=${ip}&theme=light&refresh=5s&panelId=`

        var urlTable = _netconfigUtilsTelemetryUrl.INIurlTable.fmt(ip);

        var urlGraph = _netconfigUtilsTelemetryUrl.INIurlGraph.fmt(ip);

        for (var x in _netconfigUtilsTelemetryUrl.paramsTable) {
          $(x).attr('src', urlTable + _netconfigUtilsTelemetryUrl.paramsTable[x]);
        }

        for (var x in _netconfigUtilsTelemetryUrl.paramGraph) {
          $(x).attr('src', urlGraph + _netconfigUtilsTelemetryUrl.paramGraph[x]);
        }
      },
      getBack: function getBack() {
        var self = this;

        self.get('router').transitionTo('monitoring.inventory');
      },
      showLeft: function showLeft() {
        this.toggleProperty('appCtrl.showLeft');
      },
      resetDate: function resetDate() {
        $('input[name="fromTime"]').val("");
        $('input[name="toTime"]').val("");
      },
      refreshAll: function refreshAll() {

        var self = this;
        self.set("lastRefreshed", Date.now());

        //var ip = $('select[name="dc"]').val();
        var ip = localStorage.getItem('teleIP');
        self.send("resetDate");
        this.store.getJSON('ethTableCall/?host=' + ip).then(function (res) {
          (0, _netconfigUtilsNotify.customNotify)('info', res.data);
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)('error', err.message);
        });

        self.send("dcSelect");
      },
      change: function change() {},
      toggleGraph: function toggleGraph() {
        var self = this;
        var panedId = '';
        var graphType = '';
        //var ip = $('select[name="dc"]').val();
        var ip = localStorage.getItem('teleIP');
        if (self.get("isTimeSeries")) {
          panedId = _netconfigUtilsTelemetryUrl.statGraph;
          graphType = _netconfigUtilsTelemetryUrl.type_time;
          self.set("isTimeSeries", false);
        } else {
          panedId = _netconfigUtilsTelemetryUrl.timeGraph;
          graphType = _netconfigUtilsTelemetryUrl.type_stat;
          self.set("isTimeSeries", true);
        }
        self.send("resetDate");

        var urlGraph = 'https://ab1-netops-gfna.zohonoc.com/d-solo/' + panedId + '/' + graphType + '?orgId=1&var-Allow=' + ip + '&refresh=5s&theme=light&panelId=';

        for (var x in _netconfigUtilsTelemetryUrl.paramGraph) {
          $(x).attr('src', urlGraph + _netconfigUtilsTelemetryUrl.paramGraph[x]);
        }
      },

      // can be used if refresh button is implemented

      dcSelect: function dcSelect() {

        var self = this;
        //var ip = $('select[name="dc"]').val();
        var ip = localStorage.getItem('teleIP');
        var start = "";
        var end = "";

        var panedId = '';
        var graphType = '';
        if (self.get("isTimeSeries")) {
          panedId = _netconfigUtilsTelemetryUrl.timeGraph;
          graphType = _netconfigUtilsTelemetryUrl.type_time;
        } else {
          panedId = _netconfigUtilsTelemetryUrl.statGraph;
          graphType = _netconfigUtilsTelemetryUrl.type_stat;
        }

        var fromTime = $('input[name="fromTime"]').val().toString();
        var toTime = $('input[name="toTime"]').val().toString();

        if (fromTime.length != 0 && toTime.length != 0) {

          var fromTime_ = new Date(fromTime).toISOString();
          var toTime_ = new Date(toTime).toISOString();

          var fromTime_ = Date.parse(fromTime_);
          var toTime_ = Date.parse(toTime_);

          if (toTime_ - fromTime_ > 3600000) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Time range should be within 1 hour!");
            return;
          } else {
            self.set("globFromTime", fromTime_);
            self.set("globToTime", toTime_);

            start = fromTime_;
            end = toTime_;
          }

          var urlGraph = _netconfigUtilsTelemetryUrl.teleUrlGraph.fmt(panedId, graphType, ip, start, end);
          //var urlGraph= `https://ab1-netops-gfna.zohonoc.com/d-solo/${panedId}/${graphType}?orgId=1&var-Allow=${ip}&from=${start}&to=${end}&theme=light&panelId=`

          //var urlTable= `https://ab1-netops-gfna.zohonoc.com/d-solo/3Y9GrVyVz/interface-tables-final?orgId=1&var-Allow=${ip}&theme=light&panelId=`

          // for (let x in paramsTable) {
          //     $(x).attr('src',urlTable+paramsTable[x])
          //   }
          (0, _netconfigUtilsNotify.customNotify)("info", "Fetching Details !!!");
          for (var x in _netconfigUtilsTelemetryUrl.paramGraph) {
            $(x).attr('src', urlGraph + _netconfigUtilsTelemetryUrl.paramGraph[x]);
          }
        } else {
          (0, _netconfigUtilsNotify.customNotify)("error", "Select date and time");
        }
      }

    }

  });
});
define('netconfig/controllers/mtrprofileview', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        appCtrl: _ember['default'].inject.controller('application'),
        isShowTrace: false,
        traceRouteData: {},
        apiGeo: "...",
        actions: {
            toggleNav: function toggleNav() {
                this.toggleProperty('appCtrl.showLeft');
            },
            hideTraceRoute: function hideTraceRoute() {
                this.set('isShowTrace', false);
                this.set('traceRouteData', {});
            },
            showtrce: function showtrce(item) {
                var self = this;
                this.set('traceRouteData.host', item.attributes.destination_host);
                this.set('isShowTrace', true);
                this.store.getJSON('traceroute/?pk=' + item.id).then(function (res) {
                    _ember['default'].set(item, 'trace', res.data);
                    self.set('traceRouteData.trace', res.data.trace);
                    self.set('apiGeo', res.data.geo);
                });
            }
        }
    });
});
define('netconfig/controllers/myservices', ['exports', 'ember', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigMixinsSetupuser) {
    exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
        appCtrl: _ember['default'].inject.controller('application')
    });
});
// import Ember from 'ember';

// export default Ember.Controller.extend({
// });
define('netconfig/controllers/myservices/add', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Controller.extend({

    ValidateIPaddress: function ValidateIPaddress(ipaddress) {

      var ip = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
      if (ip.test(ipaddress)) {
        return true;
      }
      return false;
    },

    ValidateSafe: function ValidateSafe(val) {

      var pattern = /^[a-zA-Z0-9\s\-_,%&@#$.!?'"()]*$/;
      if (pattern.test(val)) {
        return true;
      }
      return false;
    },

    actions: {

      addInstance: function addInstance() {

        var self = this;

        var form = $('form[name="addinstance"]');

        if (!this.ValidateIPaddress(form.find('input[name="instance_ip"]').val())) {

          form.find('input[name="instance_ip"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid Ip address");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_username"]').val())) {

          form.find('input[name="instance_username"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid username");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_password"]').val())) {

          form.find('input[name="instance_password"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid password");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_dc"]').val())) {

          form.find('input[name="instance_dc"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid name for DC");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_os"]').val())) {

          form.find('input[name="instance_os"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid name for OS");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="name"]').val())) {

          form.find('input[name="name"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid name");
          return false;
        }

        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="addinstance"]'))) {
          return false;
        } //No I18N

        this.set('isSaving', true);
        var serviceid = self.get('serviceid');
        var data = "service_id=" + serviceid + "&" + $('form[name="addinstance"]').serialize();

        this.get('store').post('instances/create_instance/', data).then(function (res) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('success', "200: " + res['data']['msg']);
          self.get('router').transitionTo('myservices.index', serviceid);
        }, function (err) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('error', "403: " + err['errors']['msg']);
          console.log(err);
        });
        return false;
      }
    }
  });
});
define('netconfig/controllers/myservices/edit', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Controller.extend({

    ValidateIPaddress: function ValidateIPaddress(ipaddress) {

      var ip = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
      if (ip.test(ipaddress)) {
        return true;
      }
      return false;
    },

    ValidateSafe: function ValidateSafe(val) {

      var pattern = /^[a-zA-Z0-9\s\-_,%&@#$.!?'"()]*$/;
      if (pattern.test(val)) {
        return true;
      }
      return false;
    },

    actions: {

      editInstance: function editInstance() {

        var self = this;
        var form = $('form[name="editinstance"]');

        if (!this.ValidateIPaddress(form.find('input[name="instance_ip"]').val())) {

          form.find('input[name="instance_ip"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid Ip address");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_username"]').val())) {

          form.find('input[name="instance_username"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid username");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_password"]').val())) {

          form.find('input[name="instance_password"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid password");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_dc"]').val())) {

          form.find('input[name="instance_dc"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid name for DC");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="instance_os"]').val())) {

          form.find('input[name="instance_os"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid name for OS");
          return false;
        }

        if (!this.ValidateSafe(form.find('input[name="name"]').val())) {

          form.find('input[name="name"]').focus();
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter valid name");
          return false;
        }

        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="editinstance"]'))) {
          return false;
        } //No I18N

        var instanceid = self.get('instanceid');

        var data = $('form[name=editinstance]').serialize() + "&rules=" + JSON.stringify(self.get('editcontent')) + "&instance_id=" + instanceid + "&updated_time=" + new Date().getTime() + "&isIptableEdit=0";
        this.set('isSaving', true);

        this.get('store').post('instances/edit_server_instance/', data).then(function (res) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('success', res['data']['msg']);
          self.get('router').transitionTo('myservices.index', self.get('serviceid'));
        }, function (err) {
          self.set('isSaving', false);
          (0, _netconfigUtilsNotify.customNotify)('error', err['errors']['msg']);
          console.log(err);
        });

        return false;
      }
    }
  });
});

// import {formdatatoObj} from '../utils/validation';
define('netconfig/controllers/myservices/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({

        instancerow: "",
        isLoading: false,

        actions: {

            getlogin: function getlogin(item) {

                console.log("item!!!!!!!!", item);

                var modal = document.getElementById('logindiv');
                this.set('instancerow', item);
                modal.style.display = "block";
            },
            close_popup: function close_popup() {
                //this.set('isLoading', false)
                //document.forms[1].reset()
                var modal = document.getElementById('logindiv');
                modal.style.display = "None";
            },
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
                    return false;
                }
                var self = this;

                var row = self.get('instancerow');

                var data = $('form[name=loginform]').serialize() + "&instance_id=" + row.instance_id;

                console.log("row is!!!!!!!!!", row);
                this.set('isLoading', true);

                this.get('store').post('instances/check_auth_creds/', data).then(function (res) {
                    self.set('isLoading', false);
                    (0, _netconfigUtilsNotify.customNotify)('success', res['data']['msg']);
                    self.send('close_popup');
                    (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete this instance ?', function () {
                        var instid = { "instance_id": row.instance_id };
                        var data = self.get('instancecontent');
                        self.store.post('instances/delete_instance/', instid).then(function (res) {
                            (0, _netconfigUtilsNotify.customNotify)('success', res['data']['msg']);
                            data.removeObject(row);

                            if (data.length === 0) {
                                self.get('router').transitionTo('myservices.instance-notfound', self.get('serviceid'));
                                //console.log(self.get('serviceid'))
                            }
                        }, function (err) {
                            (0, _netconfigUtilsNotify.customNotify)("error", err['errors']['msg']);
                        });
                    });
                }, function (err) {
                    self.set('isLoading', false);
                    (0, _netconfigUtilsNotify.customNotify)('error', err['errors']['msg']);
                    console.log(err);
                });
            }
        }

    });
});
define('netconfig/controllers/myservices/iptables/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  exports['default'] = _ember['default'].Controller.extend({
    appCtrl: _ember['default'].inject.controller('application'),
    resObj: {},
    count: 0,
    indArr: [],
    nameArr: [],
    imp_key: '',
    isLoading: false,
    def_policy: '',
    tempDict: {},
    showCustomDiv: false,
    template_data: "",
    aux_dict: {},
    tog: false,
    form_dict: {},
    jinjaEditor: {},
    yamlEditor: {},
    disableEbr: false,
    is_input_empty: false,
    is_output_empty: false,
    is_forward_empty: false,
    // ipv4: true,
    // ipv6: false,
    prev: '',
    curr: '',
    all_empty: false,

    actions: {
      onLoad: function onLoad() {

        var self = this;
        _ember['default'].run.schedule("afterRender", function () {
          self.set("showCustomDiv", false);
          self.set("tog", false);
          // self.set("ipv4",true)
          if (self.get('ipv4')) {
            $('input[name="cusToggipv4"]').prop('checked', true);
          } else {
            $('input[name="cusToggipv6"]').prop('checked', true);
          }

          var temp_name = $('input[name="template_name"]');
          temp_name.prop('disabled', false);

          $('.form-container').on('click', '.del-icon-img', function () {
            self.actions.delFields.call(self, event);
          });
          $('.form-container').on('click', '.del-group-icon-img', function () {
            self.actions.delFields.call(self, event);
          });

          $('.form-container').on('click', '.add-icon-img', function () {
            self.actions.addFields.call(self, event);
          });
        });
      },
      customToggleipv4: function customToggleipv4() {
        var self = this;
        this.set("ipv4", true);
        this.set("ipv6", false);
        var data = { "instance_id": self.get('instanceid'), "ip_type": "ipv4" };

        $('input[name="cusToggipv6"]').prop('checked', false);
        $('input[name="cusToggipv4"]').prop('checked', true);

        this.get('store').getJSON('instances/get_instance_iptables/', data).then(function (res) {

          self.send('toggleIpVersion', res);
        }, function (err) {
          self.get('router').transitionTo('error.unauthorized');
        });
      },

      customToggleipv6: function customToggleipv6() {
        var self = this;
        var data = { "instance_id": this.get('instanceid'), "ip_type": "ipv6" };
        this.set("ipv4", false);
        this.set("ipv6", true);

        $('input[name="cusToggipv4"]').prop('checked', false);
        $('input[name="cusToggipv6"]').prop('checked', true);

        this.get('store').getJSON('instances/get_instance_iptables/', data).then(function (res) {

          self.send('toggleIpVersion', res);
        }, function (err) {
          self.get('router').transitionTo('error.unauthorized');
        });
      },

      toggleIpVersion: function toggleIpVersion(res) {

        if (res['data']['data']['rules'] === null || res['data']['data']['rules'].length === 0) {
          this.set('instanceipcontent', []);
        } else {
          this.set('instanceipcontent', res['data']['data']['rules']);
        }

        console.log("FORM DATA");
        console.log(res['data']['data']);

        if (res['data']['data']['rules'] == null) {
          this.set('nullcontent', true);
        } else {
          this.set('nullcontent', false);
        }

        this.set('nullinput', false);
        this.set('nulloutput', false);
        this.set('nullforward', false);

        if (this.get('nullcontent') == false) {
          var alllst = res['data']['data']['rules'][0];
          //console.log(alllst)

          for (var rulelst in alllst) {
            var ruleitem = alllst[rulelst][0]['rule_list'];
            // console.log(rulelst)
            //console.log(ruleitem)
            if (ruleitem.length > 0) {
              continue;
            }
            if (rulelst === "input_list") {
              this.set('nullinput', true);
            } else if (rulelst === "output_list") {
              this.set('nulloutput', true);
            } else {
              this.set('nullforward', true);
            }
          }

          var form_org = res['data']['data']['rules'];

          for (var ruleslst in form_org[0]) {

            var properties = Object.keys(form_org[0][ruleslst][0]);

            if (properties.indexOf('default_policy') < properties.indexOf('rule_list')) {
              continue;
            }

            // console.log(form_org[0][ruleslst][0])
            if (ruleslst === "input_list") {
              if (this.get('nullinput')) {
                continue;
              }
            } else if (ruleslst === "output_list") {
              if (this.get('nulloutput')) {
                continue;
              }
            } else {
              if (this.get('nullforward')) {
                continue;
              }
            }
            var defaultPolicy = form_org[0][ruleslst][0].default_policy;
            var ruleList = form_org[0][ruleslst][0].rule_list;

            delete form_org[0][ruleslst][0].default_policy;
            delete form_org[0][ruleslst][0].rule_list;

            form_org[0][ruleslst][0].default_policy = defaultPolicy;
            form_org[0][ruleslst][0].rule_list = ruleList;
          }
        }

        // this.set('instanceid',model['param']['instanceid')
        // this.set('serviceid',model['param']['serviceid'])
        this.set('form_data', res['data']['data']['rules']);
        this.set('form_default', res['data']['data']['formDetails']['form_default']);
        this.set('metaKeys', res['data']['data']['formDetails']["metaKeys"]);

        // var serviceid = this.get('serviceid')
        // Ember.run.schedule('afterRender', function() {
        //   $('.'+serviceid).find('a').addClass('active');
        // })

        this.send("test");
        // this.send("onLoad");
      },
      test: function test() {
        var self = this;
        var data = "";
        var form_default = "";
        data = self.get('form_data');
        form_default = self.get('form_default');
        self.set('showCustomDiv', false);
        _ember['default'].run.schedule("afterRender", function () {
          console.log("Data Here");
          console.log(data);
          if (data === null || data === undefined || data.length === 0) {

            self.all_empty = true;
            data = form_default;
          } else {
            if (data[0]['output_list'][0]['rule_list'].length === 0) {
              self.is_output_empty = true;
              var default_policy = data[0]['output_list'][0]['default_policy'];
              data[0]['output_list'][0] = form_default[0]['output_list'][0];
              data[0]['output_list'][0]['default_policy'] = default_policy;
            }

            if (data[0]['input_list'][0]['rule_list'].length === 0) {
              self.is_input_empty = true;
              var default_policy = data[0]['input_list'][0]['default_policy'];
              data[0]['input_list'][0] = form_default[0]['input_list'][0];
              data[0]['input_list'][0]['default_policy'] = default_policy;
            }

            if (data[0]['forward_list'][0]['rule_list'].length === 0) {
              self.is_forward_empty = true;
              var default_policy = data[0]['forward_list'][0]['default_policy'];
              data[0]['forward_list'][0] = form_default[0]['forward_list'][0];
              data[0]['forward_list'][0]['default_policy'] = default_policy;
            }
          }
          self.actions.createForm.call(self, data);
          self.resObj = JSON.parse(JSON.stringify(form_default));
          console.log(self.resObj);
        });
      },

      parseObj: function parseObj(res, i) {
        var self = this;
        var formData = '';

        console.log("Values is here");
        console.log(i);

        $.each(res, function (k, v) {

          var temp = k.replace(/_/g, " ");
          var label_disp = temp.replace(/(^\w{1})|(\s+\w{1})/g, function (letter) {
            return letter.toUpperCase();
          });
          if (v === 'ACCEPT' || v === 'REJECT' || v === 'DROP') {
            v = [v];
          }
          if (jQuery.type(v) === "array" || v.array != undefined) {

            var mapIt = {};
            var metaData = {};

            mapIt[k] = v[0];
            metaData[k] = self.get("metaKeys")[k];

            if (v.array) {
              v = v.array;
            }

            var arr = self.actions.parseArr.call(self, v, k);
            console.log("ARRAY HERE");
            console.log(arr);

            if (arr.length === 0) {

              // console.log(metaData.k)
              if (metaData[k].length >= 1) {
                var set_val = '';
                var html = metaData[k].map(function (val) {

                  if (mapIt[k] !== undefined && mapIt[k] === val) {

                    return '<option selected value=' + val + '>' + val + '</option>';
                  } else {
                    return '<option value=' + val + '>' + val + '</option>';
                  }
                });

                set_val = '<div class="formRow"><label class="key-box" data-val=' + k + ' >' + label_disp + '</label>' + '<select class="val-option-box value-box">' + html + '</select>' + '</div>';

                formData += set_val;
              } else {
                formData += '<div class="formRow"><input type="text" placeholder=' + k + ' class="input-box">' + arr + '</input></div>';
              }
            } else {

              formData += '<div inx="' + i + '" class="form-sub-group" data-key="' + k + '">' + arr + '</div>';
            }
          } else {
            var formVal = '';
            res[k] !== undefined && res[k] !== '' && jQuery.type(res[k]) !== 'object' ? formVal = res[k] : formVal = '';
            jQuery.type(v.name) === 'object' ? formData += '' : console.log("APPEND");

            console.log('<div class="formRow"><label class="key-box" data-val=' + k + '>' + label_disp + '</label><input type="text" class="value-box" value="' + formVal + '" /></div>');
            formData += '<div class="formRow"><label class="key-box" data-val=' + k + '>' + label_disp + '</label><input type="text" class="value-box" value="' + formVal + '" /></div>';
          };
        });

        return formData;
      },
      parseArr: function parseArr(arr, name) {
        var self = this;
        var data = '';
        var obj = '';
        var is_default_policy = false;
        var check_obj = true;
        var def_pol = '';
        var prev_name = '';
        if (jQuery.type(arr) === "array") {

          arr.every(function (ele) {
            if (jQuery.type(ele) === 'string') {
              check_obj = false;
            }
          });
        }

        if (check_obj) {
          $(arr).each(function (i, e) {
            if (name) {
              var temp_2 = name.replace(/_/g, " ");
              var label_disp_arr = temp_2.replace(/(^\w{1})|(\s+\w{1})/g, function (letter) {
                return letter.toUpperCase();
              });
              self.prev = self.curr;
              self.curr = name;
              var add_btn = '';
              var del_btn = '<span class="del-group-icon-img"><img class="del-group-icon" src="/static/netconf/app/images/delete.png" style="cursor:pointer" alt="del-icon"></span>';
              // OLD
              // if (arr.length > 1) {
              //   obj += (i == 0 && name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>' :'');
              // } else {
              //   obj += (name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + '<span class="add-icon-img text">add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span></h3>': '');
              // }
              if (e.default_policy) {
                del_btn = '';
              }
              if (name === 'input_list' || name === 'forward_list' || name === 'output_list') {
                add_btn = '';
              } else {
                add_btn = '<span class="add-icon-img text" >add<span><img class="add-icon" src="/static/netconf/app/images/plus.png" alt="add-icon"></span></span>';
              }

              if (arr.length > 1) {

                obj += i == 0 && name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + add_btn + '</h3>' + '<div class="formgroup">' + del_btn + self.actions.parseObj.call(self, e, i) + '</div>' : '<div class="formgroup">' + del_btn + self.actions.parseObj.call(self, e, i) + '</div>';
              } else {

                obj += name !== undefined ? '<h3 class="group-title" >' + label_disp_arr + add_btn + '</h3><div class="formgroup">' + del_btn + self.actions.parseObj.call(self, e, i) + '</div>' : '';
              }
            } else {
              obj += self.actions.parseObj.call(self, e, i);
            }
          });
        }

        data = def_pol + obj;
        return data;
      },

      createForm: function createForm(res) {
        var self = this;
        var data = self.actions.parseArr.call(self, res);

        $('.form-container').html(data);

        if (self.get('nullcontent')) {
          $('.formgroup >.form-sub-group >.formgroup').remove();
        } else {

          if (self.get('nullinput')) {
            $('.form-sub-group[data-key="input_list"] >.formgroup >.form-sub-group >.formgroup').remove();
          }
          if (self.get('nulloutput')) {
            $('.form-sub-group[data-key="output_list"] >.formgroup >.form-sub-group >.formgroup').remove();
          }
          if (self.get('nullforward')) {
            $('.form-sub-group[data-key="forward_list"] >.formgroup >.form-sub-group >.formgroup').remove();
          }
        }

        console.log($('.formRow').find($('label[data-val="' + 'interface' + '"]')));

        var isValid = true;
        var dataName = ["none"];
        if (dataName === undefined) {
          dataName = [];
        }
        for (var i = 0; i < dataName.length; i++) {

          var _row = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));

          var star = jQuery("<span>", {
            "class": "mandatory"
          });
          $(star).text('*');
          $(_row).append(star);
          $(_row).parent().children('.value-box').addClass("required");

          var row = '';
          var dataName = ["none"];
          if (dataName === undefined) {
            dataName = [];
          }

          var _loop = function (_i) {

            if (jQuery.type(dataName[_i]) === 'object') {
              k = Object.keys(dataName[_i]);
              val = Object.values(dataName[_i]);
              subg = $('.form-container').find('div[data-key="' + k + '"]');

              _row = $(subg).find($('label[data-val="' + val + '"]'));
            }

            var star = jQuery("<span>", {
              "class": "mandatory"
            });
            $(star).text('*');

            $(_row).each(function (i, e) {
              if (!$(e).find('span').length) {
                $(e).append(star);
                $(e).parent().children('.value-box').addClass("required");
              }
            });
          };

          for (var _i = 0; _i < dataName.length; _i++) {
            var k;
            var val;
            var subg;

            _loop(_i);
          }
        }
      },

      createAnotherForm: function createAnotherForm(res, ele) {
        var self = this;
        var name = $(ele).parent().attr('class');
        console.log("Calling another form");
        console.log(res);
        var data = $(self.actions.parseArr.call(self, res));

        var formGroup = jQuery("<div>", {
          "class": "formgroup"
        });
        $(formGroup).html(data);
        $(formGroup).children('.formRow').addClass('can-del');
        $(ele).append(formGroup);

        var delIcon = jQuery('<span>', {
          "class": 'del-group-icon-img'
        });
        var del = jQuery('<img>', {
          "class": "del-group-icon",
          "src": "/static/netconf/app/images/delete.png",
          "alt": "del-icon"
        });
        $(delIcon).append(del);
        $(formGroup).prepend(delIcon);
        $(formGroup).addClass('can-del');
        $(formGroup).children('.formRow').addClass('can-del');
        // $(formGroup).find('.formgroup').show();
      },
      delFields: function delFields(e) {
        var del = $(e.target).closest('.can-del');
        var parent = $(e.target).closest('.form-sub-group');
        var formsubgroup = $(parent).children('h3');
        var addIcon = $(formsubgroup).children('.add-icon-img');
        var delParent = $(e.target).closest('.formgroup');
        var form_row = $(delParent).children('> .formRow');
        // let formSubGroup = $(delParent).children('.form-sub-group')
        // if (form_row.length === 0 && formSubGroup.length===0) {
        // $(delParent).closest('.form-sub-group').remove();
        $(delParent).remove();
        // }
        if (form_row.length === 0 || $(parent).children('> .formgroup').length < 50) {
          $(addIcon).removeClass('reach-limit');
        }
      },
      addFields: function addFields(e) {
        var self = this;
        var ele = $(e.target).closest('.form-sub-group');
        var key = $(ele).attr('data-key');
        var ind = $(ele).attr('inx');
        self.indArr.push(ind);
        self.nameArr.push(key);

        self.actions.loopFunction.call(self, ele);
        var nameRev = self.nameArr.reverse();
        var indRev = self.indArr.reverse();
        var dataObj = self.resObj[0];
        self.set('count', 0);
        for (var i = 0; i < nameRev.length; i++) {
          dataObj[nameRev[i]].length > 1 ? dataObj = dataObj[nameRev[i]] : dataObj = dataObj[nameRev[i]][indRev[i]];
        }
        self.actions.createAnotherForm.call(self, dataObj, ele);
        self.set("indArr", []);
        self.set("nameArr", []);
        var formgroup = $(ele).find('>.formgroup.can-del').length;
        if (formgroup >= 50) {
          $(e.target).addClass('reach-limit');
        }

        var data = $(ele).find('.formgroup.can-del');
        for (var i = 0; i < data.length; i++) {
          data[i].scrollIntoView({
            behavior: "smooth"
          });
        }

        var type = $('select[name="type"]').val();
        var row = '';
        var dataName = self.imp_key[type];
        if (dataName === undefined) {
          dataName = [];
        }

        var _loop2 = function (i) {

          if (jQuery.type(dataName[i]) === 'object') {
            k = Object.keys(dataName[i]);
            val = Object.values(dataName[i]);
            subg = $('.form-container').find('div[data-key="' + k + '"]');

            row = $(subg).find($('label[data-val="' + val + '"]'));
          }

          var star = jQuery("<span>", {
            "class": "mandatory"
          });
          $(star).text('*');

          $(row).each(function (i, e) {
            if (!$(e).find('span').length) {
              $(e).append(star);
              $(e).parent().children('.value-box').addClass("required");
            }
          });
        };

        for (var i = 0; i < dataName.length; i++) {
          var k;
          var val;
          var subg;

          _loop2(i);
        }
      },
      getlogin: function getlogin(item) {
        var modal = document.getElementById('logindiv');
        this.set('instancerow', item);
        modal.style.display = "block";
      },
      close_popup: function close_popup() {
        var modal = document.getElementById('logindiv');
        modal.style.display = "None";
      },
      login: function login() {
        if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
          return false;
        }
        var self = this;

        var row = self.get('instancerow');

        var data = $('form[name=loginform]').serialize() + "&instance_id=" + row.instance_id;

        console.log("row is!!!!!!!!!", row);
        this.set('isLoading', true);

        this.get('store').post('instances/check_auth_creds/', data).then(function (res) {
          self.set('isLoading', false);
          (0, _netconfigUtilsNotify.customNotify)('success', res['data']['msg']);
          self.send('close_popup');
          (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete this instance ?', function () {
            var instid = { "instance_id": row.instance_id };
            var data = self.get('instancecontent');
            self.store.post('instances/delete_instance/', instid).then(function (res) {
              (0, _netconfigUtilsNotify.customNotify)('success', res['data']['msg']);
              data.removeObject(row);

              if (data.length === 0) {
                self.get('router').transitionTo('myservices.instance-notfound', self.get('serviceid'));
                //console.log(self.get('serviceid'))
              }
            }, function (err) {
              (0, _netconfigUtilsNotify.customNotify)("error", err['errors']['msg']);
            });
          });
        }, function (err) {
          self.set('isLoading', false);
          (0, _netconfigUtilsNotify.customNotify)('error', err['errors']['msg']);
          console.log(err);
        });
      },
      loopFunction: function loopFunction(el) {
        var self = this;
        var ele = el.parent();
        if ($(ele.parent().attr('class') === 'form-sub-group')) {
          var key = $(ele).attr('data-key');
          var ind = $(ele).attr('inx');
          if (key !== undefined && ind !== undefined) {
            self.indArr.push(ind);
            self.nameArr.push(key);
          }
          if ($(ele).attr('class') === 'form-container') {
            return;
          } else {
            self.actions.loopFunction.call(self, ele);
          }
          if (self.count === 10) {
            console.log('maxcall stack');
            return;
          }
          self.count++;
        }
      },

      callConvert: function callConvert() {
        var self = this;
        self.send("convertToJson");
      },

      convertToJson: function convertToJson() {
        var self = this;
        var type = "None";
        var finalArr = [];
        var customArr = [];finalArr;
        var template_name = '';

        var val = [],
            hostNameArray = [];
        var v = document.getElementsByClassName('value-box');

        console.log(v);
        var re = /[a-zA-Z0-9\.\/:_,\-]/g;
        var flag = true;

        $(v).each(function (i, e) {

          var temp = $(e).val().trim();
          //  console.log($(e))

          if (temp.length > 300) {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please make sure inputs are less than 300 characters");
            flag = false;
          }

          var ne = temp.replace(re, '').trim();
          if (ne != '') {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please avoid special character except \".\" and \"/\"");
            flag = false;
          }
        });

        var arr = [];
        var fullObj = {};
        var rowObject = {};
        var subRowObject = {};
        var container = $('.form-container').children();
        $(container).each(function (i, e) {
          if ($(e).attr('class') === 'formRow') {
            console.log("Parsing rows");
            console.log(e);
            rowObject = self.actions.parseFormRow.call(self, e);
          }
          if ($(e).attr('class') === 'form-sub-group') {
            console.log("Parsing rows");
            console.log(e);
            subRowObject = self.actions.parseFormSubGroup.call(self, e);
          }
          Object.assign(fullObj, rowObject, subRowObject);
        });

        var iptype = self.get('ipv4');
        // if(!validateForm.validateRuleList('Input_list')){ return false; }
        if (!_netconfigUtilsValidation.validateForm.validateRuleList('input_list', iptype)) {
          return false;
        }
        if (!_netconfigUtilsValidation.validateForm.validateRuleList('output_list', iptype)) {
          return false;
        }
        if (!_netconfigUtilsValidation.validateForm.validateRuleList('forward_list', iptype)) {
          return false;
        }

        var isValid = true;
        var dataName = self.imp_key[type];

        if (dataName === undefined) {
          dataName = [];
        }
        // dataName = [fullObj]
        for (var i = 0; i < dataName.length; i++) {
          var not_filed = true;
          if (jQuery.type(dataName[i]) === 'object') {
            var key;
            var len;
            var len;

            (function () {
              key = Object.keys(dataName[i]);

              var val = Object.values(dataName[i]);
              var formSubGroup = $('.form-container').find($('.form-sub-group[data-key="' + key + '"]'));
              var subgroup = $(formSubGroup).find($('label[data-val="' + val + '"]'));
              if ($(formSubGroup).attr('data-key') === 'peer_group') {
                var _parent = $(formSubGroup).children('.formgroup');
                var box = $(_parent).find('.value-box');
                len = box.filter(function () {
                  return $.trim($(this).val()).length > 0;
                });

                if (len.length === 0) {
                  not_filed = false;
                }
                if (len.length > 0) {
                  not_filed = true;
                }
              }
              if ($(formSubGroup).attr('data-key') === 'peer_group_ip') {
                var _parent2 = $(formSubGroup).children('.formgroup');
                var box = $(_parent2).find('.value-box');
                len = box.filter(function () {
                  return $.trim($(this).val()).length > 0;
                });

                if (len.length === 0) {
                  not_filed = false;
                }
                if (len.length > 0) {
                  not_filed = true;
                }
              }
              if (not_filed) {

                $(subgroup).each(function (i, e) {

                  if ($(e).parent().children('.value-box').val().trim() === '') {
                    var eleParent = $(e).parent();
                    $('.innerContainer').animate({
                      scrollTo: $(eleParent).offset().top
                    }, 2000);
                    var input = $(eleParent).children('.value-box');
                    $(input).focus();
                    (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + val);
                    isValid = false;
                  }
                });
              }
            })();
          }

          var row = $('.formRow').find($('label[data-val="' + dataName[i] + '"]'));

          if ($(row).parent().children('.value-box').val() === '') {
            var ele = $(row).parent();
            $('.innerContainer').animate({
              scrollTo: $(ele).offset().top
            }, 2000);
            var input = $(ele).children('.value-box');
            $(input).focus();
            (0, _netconfigUtilsNotify.customNotify)('error', "please enter values of " + dataName[i]);
            isValid = false;
          }
        }
        if (!isValid) {
          return false;
        }
        if (type == "custom") {

          var editor = self.get("jinjaEditor");
          var jinja = editor.getValue().trim();
          if (jinja == "") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter text for JINJA TEMPLATE !!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }

          var editor = self.get("yamlEditor");
          var yaml_data = editor.getValue().trim();
          if (yaml_data == "") {
            (0, _netconfigUtilsNotify.customNotify)("error", "Please enter text for YAML DATA !!!");
            $('#submit_btn_cicd').prop('disabled', false);
            flag = false;
            return false;
          }
        } else {
          arr.push(fullObj);
          finalArr = arr;
        }

        $('#submit_btn_cicd').prop('disabled', true);

        this.set('isSaving', true);

        if (flag) {

          //self.store.post('instances/push_rules/',{commands:JSON.stringify(finalArr)}).then(function(res)
          var ip_type = "ipv4";
          if (self.get('ipv6')) {
            ip_type = "ipv6";
          }

          var data = "&rules=" + JSON.stringify(finalArr) + "&instance_id=" + self.get('instanceid') + "&updated_time=" + new Date().getTime() + "&ip_type=" + ip_type;
          var append = "&isIptableEdit=1" + "&config_push=0";
          // alert("hello")
          // console.log(finalArr)
          self.store.post('instances/edit_server_instance/', data + append).then(function (res) {

            var res_rule_list = res.data.data.split("\n");
            var notify_msg = "";
            $(res_rule_list).each(function (i, e) {
              notify_msg += e + "</br>";
            });

            self.set('isSaving', false);
            (0, _netconfigUtilsValidation.customConfirm)("<b>[ VERIFY RULES BEFORE PUSHING TO SERVER ]</b></br><div style='text-align: left;'>" + notify_msg + "</div>", function () {
              self.set('isSaving', true);
              append = "&isIptableEdit=1" + "&config_push=1";
              self.store.post('instances/edit_server_instance/', data + append).then(function (Inres) {
                self.set('isSaving', false);
                (0, _netconfigUtilsNotify.customNotify)('success', Inres['data']['msg']);
                self.get('router').transitionTo('myservices.index', self.get('serviceid'));
              }, function (err) {
                // console.log(err.errors.msg)
                self.set('isSaving', false);
                if (err["errors"]["msg"] != undefined) {
                  (0, _netconfigUtilsNotify.customNotify)("error", err["errors"]["msg"]);
                } else {
                  (0, _netconfigUtilsNotify.customNotify)("error", "Error while pushing instance");
                }
              });
            });
            //self.set('isSaving', false)

            if (res.data.status === 'success') {}
            if (res.data.status === 'failed') {}
          }, function (err) {
            self.set('isSaving', false);
            (0, _netconfigUtilsNotify.customNotify)('error', err['errors']['msg']);
            //customNotify('error',"Could not fetch data")
          });
        }

        // }
        $('input[name="router"]').prop('disabled', false);
        $('input[name="routername"]').prop('disabled', false);
      },

      parseFormRow: function parseFormRow(ele) {
        var self = this;
        var obj = {};
        var label = undefined;
        var value = undefined;

        $(ele).each(function (i, e) {
          label = $(e).children(".key-box").attr('data-val');
          // console.log($(e).children(".key-box").attr('data-val'))
          value = $(e).children('.value-box').val();

          label === '' ? label = $(e).children('.input-box').attr('placeholder') : label;
          var arr = [];
          // alert($(e).children('.input-box').val())
          arr.push($(e).children('.input-box').val());
          value === undefined ? value = arr : value;
          obj = _defineProperty({}, label, value);
        });
        return obj;
      },

      parseFormSubGroup: function parseFormSubGroup(ele) {
        var self = this;
        var obj = {};
        var arrLabel = $(ele).attr('data-key');
        var tempArr = [];
        $(ele).find('> .formgroup').each(function (i, e) {
          var tempObj = {};
          $(e).children().each(function (i, e) {

            if ($(e).attr('class') === 'formRow') {

              var label = $(e).children(".key-box").attr('data-val');
              var value = $(e).find('.value-box').val();
              console.log("LABELS");

              label === '' ? label = $(e).find('.input-box').attr('placeholder') : label;
              var arr = [];

              arr.push($(e).find('.input-box').val());
              value === undefined ? value = arr : value;
              tempObj[label] = value;
              console.log(tempObj);
            }
            if ($(e).attr('class') === 'formRow can-del') {
              var label = $(e).children(".key-box").attr('data-val');
              var value = $(e).find('.value-box').val();
              label === '' ? label = $(e).find('.input-box').attr('placeholder') : label;
              var arr = [];
              arr.push($(e).find('.input-box').val());
              value === undefined ? value = arr : value;
              tempObj[label] = value;
            }
            if ($(e).attr('class') === 'form-sub-group') {
              var temp = self.actions.parseFormSubGroup.call(self, e);
              Object.assign(tempObj, temp);
            }
          });

          tempArr.push(tempObj);
        });

        obj[arrLabel] = tempArr;
        return obj;
      }
    }
  });
});
define('netconfig/controllers/oauth2callback', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        appCtrl: _ember['default'].inject.controller('application'),

        queryParams: ['code'],
        code: null,

        viewParam: function viewParam() {
            //console.log(this.get("code"))
            //console.log("view Param.")
            var self = this;
            this.set('isSaving', true);
            this.store.post('../iam-oauth-token/', { code: self.get("code") }).then(function (res) {
                //console.log("process success")
                //console.log(res.data.token)
                self.set('isSaving', false);
                localStorage.setItem('authtoken', res.data.token);
                window.authtoken = res.data.token;
                window.isLogin = true;
                self.set('appCtrl.login', true);
                self.get('router').transitionTo('monitoring.inventory');
            }, function (err) {
                self.set('isSaving', false);
                window.isLogin = false;
                self.set('appCtrl.login', false);
                customNotify('error', err.message);
            });
            return false;
        },

        actions: {}
    });
});
define('netconfig/controllers/settings', ['exports', 'ember', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigMixinsSetupuser) {
    exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {
        appCtrl: _ember['default'].inject.controller('application')
    });
});
define("netconfig/controllers/settings/admin/index", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({

        store: _ember["default"].inject.service('store'),
        content: null,

        actions: {
            "delete": function _delete(param1) {
                self = this;
                console.log(this);
                this.store.post("con_admin/", { "router": param1.router }).then(function (res) {
                    self.content.removeObject(param1);
                }, function (err) {
                    console.log(err);
                });
            }
        }
    });
});
define("netconfig/controllers/settings/commits", ["exports", "ember", "netconfig/utils/notify"], function (exports, _ember, _netconfigUtilsNotify) {
  exports["default"] = _ember["default"].Controller.extend({
    c_search: false,
    hasMore: true,
    pageMeta: { limit: 30, offset: 30 },
    commitURL: "commits/",
    actions: {
      csvdownld: function csvdownld() {
        var self = this;

        self.store.getBinary('csv_reports/', { "commitURL": this.get("commitURL") }).then(function (res) {

          var link = document.createElement('a');
          link.href = window.URL.createObjectURL(res);
          link.download = 'CommitLog.zip';
          document.body.appendChild(link);
          link.click();
        }, function (err) {

          (0, _netconfigUtilsNotify.customNotify)('error', "No Logs found!!");
        });
      },
      fetchMore: function fetchMore(cb) {
        var data = this.get('pageMeta');
        var res = this.search(data);
        cb(res);
      },
      search: function search() {
        this.set("c_search", true);
        this.search({ limit: 30, offset: 0 }, true);
      },
      c_search: function c_search() {
        this.set("c_search", false);
        $("#cmmt_s").val('');
        this.search({ limit: 30, offset: 0 }, true);
      },
      changeCommit: function changeCommit() {
        var val = $("select[name=commit]").val();
        var data = this.get('pageMeta');
        if (val == "uncommits") {
          this.set("commitURL", "uncommits/");
          this.search({ limit: 30, offset: 0 }, true);
        } else {
          this.set("commitURL", "commits/");
          this.search({ limit: 30, offset: 0 }, true);
        }
      }
    },

    search: function search(data, setcontent) {
      console.log(data, setcontent);
      var ip = $("#cmmt_s").val();
      var self = this;
      if (ip != '') {
        console.log("inside if");
        return this.store.getJSON(this.get("commitURL") + "?search=" + ip, data).then(function (res) {
          if (setcontent) {
            self.set('pageMeta.offset', 0);
            self.set("content", res.data);
          }
          console.log(data.limit, data.offset);
          // data.offset = (data.limit+data.offset)
          self.set("pageMeta.offset", data.limit + data.offset);
          self.set('hasMore', res.data.length ? true : false);
          return res.data;
        });
      } else {
        console.log("inside else");
        this.set("c_search", false);
        return this.store.getJSON(this.get("commitURL"), data).then(function (res) {
          if (setcontent) {
            self.set('pageMeta.offset', 0);
            self.set("content", res.data);
          }
          //data.offset = (data.limit+data.offset)
          self.set("pageMeta.offset", data.limit + data.offset);
          console.log("data.offset", data.offset);
          self.set('hasMore', res.data.length ? true : false);
          return res.data;
        });
      }
    }
  });
});
define('netconfig/controllers/settings/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        appCtrl: _ember['default'].inject.controller('application')
    });
});
define('netconfig/controllers/settings/inlinefilters/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            deleteInlineFltr: function deleteInlineFltr(item) {
                var self = this;
                (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete Inline Filter ' + item.attributes.name, function () {
                    self.store['delete']('inlinefilter/' + item.id + '/').then(function (res) {
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Inline Filter deleted successfully');
                        var data = self.get('content');
                        data.removeObject(item);
                    });
                });
            }
        }
    });
});
define('netconfig/controllers/settings/mtrprofiles/add', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('netconfig/controllers/settings/mtrprofiles/geo/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        selectedId: null,
        store: _ember['default'].inject.service('store'),

        initialize: function initialize() {
            console.log("initializer called.");
            var self = this;
            this.get('store').getJSON('api_location_active/').then(function (res) {
                if (res.data) {
                    self.selectedId = res.data.id;
                    $('select[name="apigeo"] option[value="' + res.data.id + '"]').prop('selected', true);
                    $('select[name="apigeo"]').trigger('chosen:updated');
                }
            }, function (err) {
                console.log("could not update active geo.");
            });
        },

        actions: {

            changeGeo: function changeGeo(item) {
                var self = this;
                console.log(this.selectedId);
                self.set('isSaving', true);
                this.get('store').post('api_location_active/', { id: this.selectedId }).then(function (res) {
                    self.set('isSaving', false);
                    (0, _netconfigUtilsNotify.customNotify)('success', 'MTR Profile updated successfully');
                    self.get('router').transitionTo('settings/mtrprofiles/geo');
                }, function (err) {
                    self.set('isSaving', false);
                    (0, _netconfigUtilsNotify.customNotify)('success', 'Unable to update MTR Profile');
                    console.log(err);
                });
            },

            geoChange: function geoChange() {
                var cval = $('select[name="apigeo"]').val();
                this.selectedId = cval;
            }
        }
    });
});
define('netconfig/controllers/settings/mtrprofiles/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            deleteMtrProf: function deleteMtrProf(item) {
                var self = this;
                (0, _netconfigUtilsValidation.customConfirm)('Are you sure you want to delete MTR Profile ' + item.attributes.destination_host, function () {
                    self.store['delete']('mtrprofile/' + item.id + '/').then(function (res) {
                        (0, _netconfigUtilsNotify.customNotify)('success', 'MTR Profile deleted successfully');
                        var data = self.get('content');
                        data.removeObject(item);
                    });
                });
            }
        }
    });
});
define('netconfig/controllers/settings/routers/add', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {}
  });
});
define('netconfig/controllers/settings/routers/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        showInfo: false,
        changingPoll: false,
        temp_set: { value: [] },
        isLoading: true,
        pollingStatus: function pollingStatus() {
            //console.log("NOTE: Inside polling status method!")
            var count = 0;
            var content = this.get('content');
            for (var i = 0; i < content.length; i++) {
                var row = content.objectAt(i);
                if (row.bgp_dc_status_set.length > 0) {
                    if (row.bgp_dc_status_set.objectAt(0).status === 'STOPPED') {
                        count++;
                    }
                }
            }
            //console.log("Count:"+count+" and content length:"+content.length)
            if (content.length == 0) {
                //No routers present
                this.set("pollingAllOff", true);
                this.set("pollingAllOn", true);
            } else if (count == 0) {
                // polling is on for all routers
                this.set("pollingAllOn", true);
                this.set("pollingAllOff", false);
            } else if (count == content.length) {
                //polling is off for all routers
                this.set("pollingAllOff", true);
                this.set("pollingAllOn", false);
            } else {
                this.set("pollingAllOff", false);
                this.set("pollingAllOn", false);
            }
        },

        actions: {

            showInfo: function showInfo(param1, param2) {
                console.log("showInfo");
                var row = $('.table tr[ids="' + param2 + '"]');
                this.set("showInfo", true);
                if (typeof param1 == 'string') {
                    this.set("rstatus", param1);
                } else {
                    this.set("rstatus", param1.status_msg);
                }
                _ember['default'].run.next(function () {
                    $('.advlst').slideDown('fast').css({ top: row.offset().top, left: "51%" });
                });
            },
            hideInfo: function hideInfo() {
                this.set("showInfo", false);
            },
            showDetails: function showDetails(param1) {
                //var params = Object.assign({}, param1)
                var self = this;
                this.set("showDetails", true);
                //var uptime = params.uptime.split("T")
                //params.uptime = uptime[0]+"\n"+uptime[1].substring(0,8)+" GMT"
                this.set('deviceinfo', { info: param1 });
                self.set("isLoading", true);
                self.set("temp_set.value", false);
                this.store.getJSON('router_interfaces/' + param1.router + '/').then(function (res) {
                    self.set("isLoading", false);
                    self.set("temp_set.value", res.ip_addr);
                });
                _ember['default'].run.next(function () {
                    var row = $('.table tr[ids="' + param1.router + '"]'),
                        lft = row.find('.fa-info-circle').position().left;
                    var left = row.find('td:nth-child(9)').position().left + lft - ($('.deviceInfo').width() / 2 + 135);
                    if (row.find('td:nth-child(9)').position().top + $('.deviceInfo').outerHeight() + 170 > $(window).innerHeight() + $('.innerContainer').scrollTop()) {
                        var bottom_value = $(window).innerHeight() - row.find('td:nth-child(9)').position().top - 50;
                        $('.deviceInfo').addClass('change');
                        $('.deviceInfo').slideDown('fast').css({ bottom: bottom_value, left: left });
                    } else {
                        var top_value = row.find('td:nth-child(9)').position().top + 40;
                        $('.deviceInfo').removeClass('change');
                        $('.deviceInfo').slideDown('fast').css({ top: top_value, left: left });
                    }
                });
            },
            hideDetails: function hideDetails() {
                this.set("showDetails", false);
            },

            allPolling: function allPolling(param1) {
                console.log(param1 + " polling for all routers");
                self = this;
                (0, _netconfigUtilsValidation.customConfirm)({ msg: 'Are you sure you want to ' + param1 + ' polling?' }, function () {
                    self.set('changingPoll', true);
                    var catgname = $('select[name="cat"]').val();
                    var podname = $('select[name="podtype"]').val();
                    self.get('store').post('router_polling/' + param1 + '/?category=' + catgname + "&pod=" + podname).then(function (res) {
                        if (res['status'] === "success") {
                            (0, _netconfigUtilsNotify.customNotify)('success', res['message']);
                            var data = res['data'];
                            var content = self.get('content');
                            for (var i = 0; i < content.length; i++) {
                                var row = content.objectAt(i);
                                for (var j = 0; j < data.length; j++) {
                                    if (row.host == data.objectAt(j)['router']) {
                                        _ember['default'].set(row.bgp_dc_status_set.objectAt(0), "status", data.objectAt(j)['status']);
                                        _ember['default'].set(row.bgp_dc_status_set.objectAt(0), "status_msg", data.objectAt(j)['status_msg']);
                                    }
                                }
                            }
                            self.pollingStatus();
                            self.set('changingPoll', false);
                        } else {
                            (0, _netconfigUtilsNotify.customNotify)('error', res['message']);
                            self.set('changingPoll', false);
                            return 0;
                        }
                    });
                    //self.set('changingPoll', false)
                });
            },

            alterPolling: function alterPolling(row, db_status) {
                var status = db_status === "STOPPED" ? "start" : "stop";
                console.log("Changing status");
                if (!this.get('changingPoll')) {
                    self = this;
                    (0, _netconfigUtilsValidation.customConfirm)({ msg: 'Are you sure you want to ' + status + ' polling for ' + row.name + ' [' + row.host + ']?' }, function () {
                        var elem = $('.table tr[ids="' + row.host + '"]').find('td').eq($('.table td[ids="pollcol"]').index()).find('span:first');
                        elem.removeClass(db_status === 'STOPPED' ? 'fa fa-toggle-off R' : 'fa fa-toggle-on R').addClass('fa fa-spinner fa-spin R');
                        self.store.put('router_polling/' + status + '/' + row.host + '/').then(function (res) {
                            if (res['status'] === "success") {
                                (0, _netconfigUtilsNotify.customNotify)('success', res['message']);
                                var data = res['data'][0];
                                _ember['default'].set(row.bgp_dc_status_set.objectAt(0), "status", data['status']);
                                _ember['default'].set(row.bgp_dc_status_set.objectAt(0), "status_msg", data['status_msg']);
                                self.pollingStatus();
                            } else {
                                (0, _netconfigUtilsNotify.customNotify)('error', res['message']);
                                elem.removeClass('fa fa-spinner fa-spin R').addClass(db_status === 'STOPPED' ? 'fa fa-toggle-off R' : 'fa fa-toggle-on R');
                            }
                        });
                    });
                }
            },

            deleteRouter: function deleteRouter(item) {
                console.log(item);
                self = this;
                (0, _netconfigUtilsValidation.customConfirm)({ msg: 'Are you sure you want to delete router ' + item.host }, function () {
                    self.store['delete']('router/' + item.host + '/').then(function (res) {
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Router Profile delete successfully');
                        var data = self.get('content');
                        data.removeObject(item);
                    });
                });
            },
            changeContents: function changeContents(value, param) {
                var catgname = $('select[name="cat"]').val();
                var podname = $('select[name="podtype"]').val();
                var devictype = $('select[name="type"]').val();
                var catgs = [],
                    pods = [],
                    dtype = [],
                    result = [];
                var wanresult = [];
                if (devictype == 'All') {
                    dtype = Object.assign([], this.get('type'));
                    dtype.splice(0, 1);
                } else {
                    dtype.push(dtype);
                }
                if (catgname == 'All') {
                    catgs = Object.assign([], this.get('category'));
                    catgs.splice(0, 1);
                } else {
                    catgs.push(catgname);
                }
                if (podname == 'All') {
                    pods = Object.assign([], this.get('pod'));
                    pods.splice(0, 1);
                } else {
                    pods.push(podname);
                }
                var allContent = this.get('allcontent');
                for (var i = 0; i < allContent.length; i++) {
                    wanresult.push(allContent[i]);
                }
                this.set('wancontent', wanresult);
                console.log(this.get('wancontent', wanresult));
                $(allContent).each(function (i, e) {
                    if (devictype === "WAN" && e.devicetype === "WAN") {
                        result.push(e);
                    } else if (devictype === "All") {
                        if (catgname === "All") {
                            if (podname === "All") {
                                result.push(e);
                            }
                        }
                    } else if (devictype !== "WAN" && e.devicetype !== "WAN") {
                        if (catgname === "All") {
                            if (podname === "All") {
                                result.push(e);
                            } else if (e.podtype === podname) {
                                result.push(e);
                            }
                        } else if (e.category === catgname) {
                            if (podname === "All") {
                                result.push(e);
                            } else if (e.podtype === podname) {
                                result.push(e);
                            }
                        }
                    }
                });
                console.log(allContent);
                console.log(devictype);
                //console.log("Content result:", result)
                this.set('content', result);
                this.pollingStatus();
            }
        }
    });
});
define('netconfig/controllers/settings/smtp', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            updateSMTPData: function updateSMTPData() {
                var data = this.get('content');
                if (data.length) {
                    data = data[0];
                    $('input[name="host"]').val(data.attributes.host);
                    $('input[name="port"]').val(data.attributes.port);
                    $('input[name="user"]').val(data.attributes.user);
                    $('input[name="passwd"]').val(data.attributes.passwd);
                    $('input[name="from_addr"]').val(data.attributes.from_addr);
                    $('input[name="to_addr"]').val(data.attributes.to_addr);
                    $('input[name="id"]').val(data.id);
                    $('input[name="email_type"][value="' + data.attributes.email_type + '"]').prop('checked', true);
                }
            },
            updateSMTP: function updateSMTP() {

                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="smtp"]'))) {
                    return false;
                } //No I18N
                var self = this,
                    data = this.get('content');
                if (data.length) {
                    self.set('isSaving', true);
                    this.store.put('smtpsettings/', $('form[name="smtp"]').serialize()).then(function (res) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'SMTP updated successfully');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Unable to update SMTP');
                        console.log(err);
                    });
                } else {
                    this.store.post('smtpsettings/', $('form[name="smtp"]').serialize()).then(function (res) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'SMTP updated successfully');
                    }, function (err) {
                        self.set('isSaving', false);
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Unable to update SMTP');
                        console.log(err);
                    });
                }
            }
        }
    });
});
define('netconfig/controllers/settings/stopbgpadv', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Controller.extend({
        isSaving: false,
        data: {},
        isShowPrefixData: false,
        prefixList: [],
        actions: {
            cancel: function cancel() {
                this.set('isShowPrefixData', false);
                this.set('prefixList', []);
                this.set('data', {});
            },
            showDropDown: function showDropDown(itm) {
                if (itm.isProcessing) {
                    return false;
                }
                _ember['default'].set(itm, 'isShow', itm.isShow ? false : true);
            },
            updateStatus: function updateStatus(itm, typ) {
                if (itm.action === typ) {
                    (0, _netconfigUtilsNotify.customNotify)('error', 'Current action already in ' + typ + '. Please double check once.');
                    return false;
                }

                var data = JSON.parse(JSON.stringify(this.get('data')));
                data.method = 'delete';
                data.action = itm.action;
                data.prefix = itm.prefix;
                data['seq-no'] = itm.seq;
                data.name = this.get('prefixList')[0].name;
                var self = this;
                _ember['default'].set(itm, 'isProcessing', true);
                _ember['default'].set(itm, 'isShow', false);
                this.store.post('zohoprefix/', data).then(function (res) {
                    if (res.data.prefixlist === undefined) {
                        _ember['default'].setProperties(itm, { isProcessing: false });
                        (0, _netconfigUtilsNotify.customNotify)('error', res.data);
                    } else {
                        data.method = 'add';
                        data.action = typ;
                        self.store.post('zohoprefix/', data).then(function (res) {
                            if (res.data.prefixlist) {
                                (0, _netconfigUtilsNotify.customNotify)('success', 'Action updated successfully');
                                _ember['default'].setProperties(itm, { 'action': data.action, isProcessing: false });
                            } else {
                                _ember['default'].setProperties(itm, { isProcessing: false });
                                (0, _netconfigUtilsNotify.customNotify)('error', 'Unable to update action. Please double check once.');
                            }
                        });
                    }
                });
            },
            getArConf: function getArConf() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="stopbgp"]'))) {
                    return false;
                } //No I18N

                var data = {
                    host: JSON.stringify($('select[name="router"]').val()),
                    username: $('input[name="username"]').val(),
                    password: $('input[name="password"]').val(),
                    enpwd: $('input[name="enpwd"]').val()
                },
                    self = this;
                this.set('data', data);
                this.set('isSaving', true);
                this.store.post('zohoprefixget/', data).then(function (res) {
                    self.set('isSaving', false);
                    if (res.data['Session open'] !== undefined && res.data['Session open'] === true) {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Session already opened. Please remove the existing session.');
                    } else if (res.data.prefixlist.length) {
                        self.set('prefixList', res.data.prefixlist);
                        self.set('isShowPrefixData', true);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Conneted successfully');
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Unable to connect. Please try again');
                    }
                }, function (res) {
                    self.set('isSaving', false);
                    (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid login. Please try again');
                });
            }
        }
    });
});
define('netconfig/controllers/settings/uncommits', ['exports', 'ember', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsValidation) {
  exports['default'] = _ember['default'].Controller.extend({
    c_search: false,
    hasMore: true,
    pageMeta: { limit: 30, offset: 30 },
    actions: {
      fetchMore: function fetchMore(cb) {
        var data = this.get('pageMeta');
        var res = this.search(data);
        cb(res);
      },
      search: function search() {
        this.set("c_search", true);
        console.log(this.get("content"), "calling search");
        this.search({ limit: 30, offset: 0 }, true);
      },
      c_search: function c_search() {
        console.log("clear search called.");
        this.set("c_search", false);
        $("#cmmt_s").val('');
        this.search({ limit: 30, offset: 0 }, true);
      }
    },

    search: function search(data, setcontent) {
      var ip = $("#cmmt_s").val();
      var self = this;
      if (ip != '') {
        return this.store.getJSON('uncommits/?search=' + ip, data).then(function (res) {
          if (setcontent) {
            console.log("setting content");
            self.set('pageMeta.offset', 0);
            self.set("content", res.data);
          }
          data.offset = data.limit + data.offset;
          self.set('hasMore', res.data.length ? true : false);
          return res.data;
        });
      } else {
        return this.store.getJSON('uncommits/', data).then(function (res) {
          if (setcontent) {
            self.set('pageMeta.offset', 0);
            self.set("content", res.data);
          }
          data.offset = data.limit + data.offset;
          self.set('hasMore', res.data.length ? true : false);
          return res.data;
        });
      }
    }
  });
});
define('netconfig/controllers/settings/zohoserviceview/index', ['exports', 'ember', 'netconfig/utils/notify', 'netconfig/utils/validation'], function (exports, _ember, _netconfigUtilsNotify, _netconfigUtilsValidation) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            deleteService: function deleteService(item) {
                self = this;
                (0, _netconfigUtilsValidation.customConfirm)({ msg: 'Are you sure you want to delete service ' + item.attributes.name }, function () {
                    self.store['delete']('zohoservices/' + item.id + '/').then(function (res) {
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Service Profile delete successfully');
                        var data = self.get('content');
                        data.removeObject(item);
                    });
                });
            }
        }
    });
});
define("netconfig/controllers/testflow/pipeline", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({
        actions: {
            onLoad: function onLoad() {
                var container = $("#jenkinstab").closest(".innerContainer");
                var jenkinsTab = $("#jenkinstab");
                console.log(container.width());
                jenkinsTab.width(95 * container.width() / 100).height(90 * container.height() / 100);
            }
        }
    });
});
define('netconfig/controllers/testflow/workflow', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Controller.extend({
        routerData: {},
        parseData: [],
        configdetail: "",
        hostip: "",
        isLoading: false,
        approver_comment: "",
        hasMore: true,
        isAdmin: false,
        pageMeta: { offset: 100, limit: 100, from: '', to: '', status: 'all' },
        actions: {
            getConfig: function getConfig(itm) {
                var self = this;
                // const pattern = /\[(.*?)\]/;
                // const host = pattern.exec(itm)[1];
                self.set("hostip", itm);

                self.store.getJSON("aconfig/" + itm + "/").then(function (res) {

                    self.set("configdetail", res.data);
                    $(".shdr").css("z-index", 0);
                    // $(".gAction .podSelect").css("z-index", 0)
                    $(".overlay2").css("visibility", "visible");
                    $(".overlay2").css("opacity", 1);
                    $(".overlay2").css("left", "0");
                    $(".overlay2").css("right", "auto");
                    //self.set("configdetail", res.data)
                }, function (err) {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data.");
                });
            },
            refresh: function refresh(host) {
                var self = this;
                this.store.getJSON("aconfig/" + host + "/").then(function (res) {
                    self.set("confText", res.data);
                });
            },
            closePopup: function closePopup() {
                $(".overlay2").css("visibility", "hidden");
                $(".overlay2").css("opacity", 0);
                $(".shdr").css("z-index", 1);
                // $(".gAction .podSelect").css("z-index", 1)
            },
            showComments: function showComments(itm) {
                var ele = $('.table tbody tr[ids="' + itm.request_id + '"]').find('.wf-comment');
                this.set('approver_comment', itm.approver_comment === null ? 'No data available' : itm.approver_comment);
                $('.workflow-comments').css({ top: ele.offset().top + $('.innerContainer').scrollTop() - 20 });
                $('.workflow-comments').removeClass('dnone');
            },
            fetchMore: function fetchMore(cb) {
                var data = this.get('pageMeta'),
                    self = this;
                var res = this.store.getJSON("workflow/", data).then(function (res) {
                    self.set("pageMeta.offset", data.limit + data.offset);
                    self.set('hasMore', res.data.length ? true : false);
                    return res.data;
                });
                cb(res);
            },
            updateFilter: function updateFilter() {
                var date = $('select[name="date"]').val(),
                    status = $('select[name="status"]').val(),
                    data = this.get('pageMeta'),
                    self = this;
                data.offset = 0;
                data.status = status;
                switch (date) {
                    case 'today':
                        data.from = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case 'week':
                        data.from = moment().subtract(7, 'days').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case 'month':
                        data.from = moment().subtract(30, 'days').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case 'year':
                        data.from = moment(moment().format('YYYY') + '-01-01').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                }
                this.store.getJSON('workflow/', data).then(function (res) {
                    self.set('pageMeta.offset', 100);
                    self.set('content', res.data);
                });
            },
            workflowOnLoad: function workflowOnLoad() {
                var self = this;
                self.set("isAdmin", false);
                this.store.getJSON('get_approver/').then(function (res) {
                    if (res.data[0] == "super_admin") {
                        self.set("isAdmin", true);
                    }
                });

                $('body').click(function (e) {
                    if (!$(e.target).closest('.wf-routerdetail').length && !$(e.target).closest('.workflow-rd').length) {
                        $('.workflow-rd').addClass('dnone');
                    }
                    if (!$(e.target).is('.wf-comment') && !$(e.target).closest('.workflow-comments').length) {
                        $('.workflow-comments').addClass('dnone');
                    }
                });
            },
            updateWorkStat: function updateWorkStat(typ) {
                var self = this;
                var data = JSON.parse(JSON.stringify(this.get('routerData')));
                data.approve_status = typ;
                data.routers = JSON.stringify(data.routers);
                data.approver_comment = $('textarea[name="approver_comment"]').val();
                delete data.acttbl;
                data.actual_command = JSON.stringify(data.actual_command);

                if (data.approver_comment === "") {
                    (0, _netconfigUtilsNotify.customNotify)('error', 'Please enter approver comment');
                    return false;
                }

                this.store.post('approve_deny/', data).then(function (res) {
                    if (res.data.status === "Successfull Updated") {
                        var rdata = self.get('routerData');
                        _ember['default'].set(rdata, 'approve_status', res.data.approve_status);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Status updated successfully');
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', res.data);
                    }
                });
            },
            executeWorkflow: function executeWorkflow() {
                var data = this.get('routerData');
                $('#logindiv input[name="request_id"]').val(data.request_id);
                $('#logindiv').show();
            },
            close_popup: function close_popup() {
                // $('form[name="loginform"]').reset();
                $('#logindiv').hide();
            },
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
                    return false;
                } //No I18N
                var self = this;
                this.set('isLoading', true);
                this.store.post('executeconfig/', $('form[name="loginform"]').serialize()).then(function (res) {
                    self.set('isLoading', false);
                    if (res.data === null) {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Please check device credentials or clear existing connections.');
                        return false;
                    }
                    if (res.data.status === 'success') {
                        (0, _netconfigUtilsNotify.customNotify)('success', res.data.msg);
                        var cdata = self.get('routerData');
                        _ember['default'].set(cdata, 'exec_stautus', res.data.execute_status);
                        $('#logindiv').hide();
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', res.data.msg === undefined ? 'Unable to execute. Please try again' : res.data.msg);
                    }
                });
            },
            viewRouterDetail: function viewRouterDetail(itm) {

                if (itm.acttbl === undefined) {
                    var row = [],
                        hdr = [];
                    $(itm.actual_command).each(function (a, b) {
                        console.log(b);
                        if ($.isPlainObject(b)) {
                            $.each(b, function (k, v) {
                                if ($.inArray(k, hdr) === -1) {
                                    hdr.push(k);
                                }
                            });
                        } else {
                            if ($.inArray('name', hdr) === -1) {
                                hdr.push('name');
                            }
                        }
                    });
                    $(itm.actual_command).each(function (a, b) {
                        console.log(b);
                        var col = [];
                        if ($.isPlainObject(b)) {
                            $(hdr).each(function (k, v) {
                                col.push(b[v] === undefined ? "-" : b[v]);
                            });
                        } else {
                            col.push(b);
                        }
                        row.push(col);
                    });
                    itm.acttbl = { hdr: hdr, body: row };
                }

                this.set('routerData', itm);
                var ipdata = this.get('routerData').routers;
                var lst = [];
                var regex = /([\s\S]*?)\s*\[(.*?)\]/;
                for (var i = 0; i < ipdata.length; i++) {
                    var match = ipdata[i].match(regex);
                    lst.push({ "host": match[2], "hostname": match[1] });
                }
                this.set('parseData', lst);
                var ele = $('.table tbody tr[ids="' + itm.request_id + '"]').find('.wf-routerdetail');
                // left:(ele.offset().left - $('.workflow-rd').width())
                $('.workflow-rd').css({ top: ele.offset().top + $('.innerContainer').scrollTop() - 20 });
                $('.workflow-rd').removeClass('dnone');
            }
        }
    });
});
define('netconfig/controllers/workflow', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Controller.extend({
        routerData: {},
        parseData: [],
        configdetail: "",
        hostip: "",
        isLoading: false,
        approver_comment: "",
        hasMore: true,
        isAdmin: false,
        pageMeta: { offset: 100, limit: 100, from: '', to: '', status: 'all' },
        actions: {
            getConfig: function getConfig(itm) {
                var self = this;
                // const pattern = /\[(.*?)\]/;
                // const host = pattern.exec(itm)[1];
                self.set("hostip", itm);

                self.store.getJSON("aconfig/" + itm + "/").then(function (res) {

                    self.set("configdetail", res.data);
                    $(".shdr").css("z-index", 0);
                    // $(".gAction .podSelect").css("z-index", 0)
                    $(".overlay2").css("visibility", "visible");
                    $(".overlay2").css("opacity", 1);
                    $(".overlay2").css("left", "0");
                    $(".overlay2").css("right", "auto");
                    //self.set("configdetail", res.data)
                }, function (err) {
                    (0, _netconfigUtilsNotify.customNotify)('error', "Could not fetch data.");
                });
            },
            refresh: function refresh(host) {
                var self = this;
                this.store.getJSON("aconfig/" + host + "/").then(function (res) {
                    self.set("confText", res.data);
                });
            },
            closePopup: function closePopup() {
                $(".overlay2").css("visibility", "hidden");
                $(".overlay2").css("opacity", 0);
                $(".shdr").css("z-index", 1);
                // $(".gAction .podSelect").css("z-index", 1)
            },
            showComments: function showComments(itm) {
                var ele = $('.table tbody tr[ids="' + itm.request_id + '"]').find('.wf-comment');
                this.set('approver_comment', itm.approver_comment === null ? 'No data available' : itm.approver_comment);
                $('.workflow-comments').css({ top: ele.offset().top + $('.innerContainer').scrollTop() - 20 });
                $('.workflow-comments').removeClass('dnone');
            },
            fetchMore: function fetchMore(cb) {
                var data = this.get('pageMeta'),
                    self = this;
                var res = this.store.getJSON("workflow/", data).then(function (res) {
                    self.set("pageMeta.offset", data.limit + data.offset);
                    self.set('hasMore', res.data.length ? true : false);
                    return res.data;
                });
                cb(res);
            },
            updateFilter: function updateFilter() {
                var date = $('select[name="date"]').val(),
                    status = $('select[name="status"]').val(),
                    data = this.get('pageMeta'),
                    self = this;
                data.offset = 0;
                data.status = status;
                switch (date) {
                    case 'today':
                        data.from = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case 'week':
                        data.from = moment().subtract(7, 'days').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case 'month':
                        data.from = moment().subtract(30, 'days').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case 'year':
                        data.from = moment(moment().format('YYYY') + '-01-01').format('YYYY-MM-DD HH:mm:ss');
                        data.to = moment().format('YYYY-MM-DD HH:mm:ss');
                        break;
                }
                this.store.getJSON('workflow/', data).then(function (res) {
                    self.set('pageMeta.offset', 100);
                    self.set('content', res.data);
                });
            },
            workflowOnLoad: function workflowOnLoad() {
                var self = this;
                self.set("isAdmin", false);
                this.store.getJSON('get_approver/').then(function (res) {
                    if (res.data[0] == "super_admin") {
                        self.set("isAdmin", true);
                    }
                });

                $('body').click(function (e) {
                    if (!$(e.target).closest('.wf-routerdetail').length && !$(e.target).closest('.workflow-rd').length) {
                        $('.workflow-rd').addClass('dnone');
                    }
                    if (!$(e.target).is('.wf-comment') && !$(e.target).closest('.workflow-comments').length) {
                        $('.workflow-comments').addClass('dnone');
                    }
                });
            },
            updateWorkStat: function updateWorkStat(typ) {
                var self = this;
                var data = JSON.parse(JSON.stringify(this.get('routerData')));
                data.approve_status = typ;
                data.routers = JSON.stringify(data.routers);
                data.approver_comment = $('textarea[name="approver_comment"]').val();
                delete data.acttbl;
                data.actual_command = JSON.stringify(data.actual_command);

                if (data.approver_comment === "") {
                    (0, _netconfigUtilsNotify.customNotify)('error', 'Please enter approver comment');
                    return false;
                }

                this.store.post('approve_deny/', data).then(function (res) {
                    if (res.data.status === "Successfull Updated") {
                        var rdata = self.get('routerData');
                        _ember['default'].set(rdata, 'approve_status', res.data.approve_status);
                        (0, _netconfigUtilsNotify.customNotify)('success', 'Status updated successfully');
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', res.data);
                    }
                });
            },
            executeWorkflow: function executeWorkflow() {
                var data = this.get('routerData');
                $('#logindiv input[name="request_id"]').val(data.request_id);
                $('#logindiv').show();
            },
            close_popup: function close_popup() {
                // $('form[name="loginform"]').reset();
                $('#logindiv').hide();
            },
            login: function login() {
                if (!_netconfigUtilsValidation.validateForm.validate($('form[name="loginform"]'))) {
                    return false;
                } //No I18N
                var self = this;
                this.set('isLoading', true);
                this.store.post('executeconfig/', $('form[name="loginform"]').serialize()).then(function (res) {
                    self.set('isLoading', false);
                    if (res.data === null) {
                        (0, _netconfigUtilsNotify.customNotify)('error', 'Please check device credentials or clear existing connections.');
                        return false;
                    }
                    if (res.data.status === 'success') {
                        (0, _netconfigUtilsNotify.customNotify)('success', res.data.msg);
                        var cdata = self.get('routerData');
                        _ember['default'].set(cdata, 'exec_stautus', res.data.execute_status);
                        $('#logindiv').hide();
                    } else {
                        (0, _netconfigUtilsNotify.customNotify)('error', res.data.msg === undefined ? 'Unable to execute. Please try again' : res.data.msg);
                    }
                });
            },
            viewRouterDetail: function viewRouterDetail(itm) {

                if (itm.acttbl === undefined) {
                    var row = [],
                        hdr = [];
                    $(itm.actual_command).each(function (a, b) {
                        console.log(b);
                        if ($.isPlainObject(b)) {
                            $.each(b, function (k, v) {
                                if ($.inArray(k, hdr) === -1) {
                                    hdr.push(k);
                                }
                            });
                        } else {
                            if ($.inArray('name', hdr) === -1) {
                                hdr.push('name');
                            }
                        }
                    });
                    $(itm.actual_command).each(function (a, b) {
                        console.log(b);
                        var col = [];
                        if ($.isPlainObject(b)) {
                            $(hdr).each(function (k, v) {
                                col.push(b[v] === undefined ? "-" : b[v]);
                            });
                        } else {
                            col.push(b);
                        }
                        row.push(col);
                    });
                    itm.acttbl = { hdr: hdr, body: row };
                }

                this.set('routerData', itm);
                var ipdata = this.get('routerData').routers;
                var lst = [];
                var regex = /([\s\S]*?)\s*\[(.*?)\]/;
                for (var i = 0; i < ipdata.length; i++) {
                    var match = ipdata[i].match(regex);
                    lst.push({ "host": match[2], "hostname": match[1] });
                }
                this.set('parseData', lst);
                var ele = $('.table tbody tr[ids="' + itm.request_id + '"]').find('.wf-routerdetail');
                // left:(ele.offset().left - $('.workflow-rd').width())
                $('.workflow-rd').css({ top: ele.offset().top + $('.innerContainer').scrollTop() - 20 });
                $('.workflow-rd').removeClass('dnone');
            }
        }
    });
});
define('netconfig/controllers/zohoservices', ['exports', 'ember', 'netconfig/mixins/setupuser'], function (exports, _ember, _netconfigMixinsSetupuser) {
  exports['default'] = _ember['default'].Controller.extend(_netconfigMixinsSetupuser['default'], {

    appCtrl: _ember['default'].inject.controller('application'),
    poll: _ember['default'].inject.service(),

    isPoll: false,
    ajaxqueue: [],
    cajaxqueue: [],
    polid: null,
    isDone: false,

    processZSRoute: function processZSRoute() {
      var self = this,
          data = this.get('content');
      $(data.data).each(function (i, e) {
        var aq = self.get('ajaxqueue');
        aq.addObject({ data: e, state: 0, isProcessing: false, ids: new Date().getTime() + '_' + i });
      });
      var polid = setInterval(function () {
        self.doAjaxPoll(self);
      }, 1000);
      this.set('polid', polid);
    },

    doAjaxPoll: function doAjaxPoll() {
      var ac = 0,
          self = this,
          cq = this.get('cajaxqueue'),
          aq = this.get('ajaxqueue');
      //console.log('doAjaxPoll '+ cq.length, cq);
      if (cq.length === 10 && aq.length) {
        return false;
      }

      var barr = 9 - cq.length;

      for (var i = 0; i <= barr; i++) {
        if (aq[i] !== undefined) {
          cq.addObject(aq[i]);
        }
      }
      $(cq).each(function (i, e) {
        self.getZSData(e);
      });
    },

    stopPoll: function stopPoll() {
      this.set('ajaxqueue', []);
      this.set('cajaxqueue', []);
      $.xhrPool.abortAll();
      clearInterval(this.get('polid'));
    },

    getZSData: function getZSData(data) {

      var self = this,
          e = data.data,
          cq = this.get('cajaxqueue'),
          aq = this.get('ajaxqueue');
      aq.removeObject(data);
      if (data.isProcessing) {
        return false;
      }
      data.isProcessing = true;
      //console.log("printing e")
      //console.log(e)
      //console.log(e.owner)
      //console.log(e.id)
      if (e.owner == undefined) {
        //console.log("this")
        var url = 'zohoService_r/?pk=' + e.id + "&call=first";
      } else {
        var url = 'zohoService_r/?pk=' + e.id + "&call=notfirst";
      }

      self.store.getJSON(url).then(function (res) {
        var bgp = self.get('content');
        if (parseInt(e.id) === res.data.id) {
          _ember['default'].set(e, "owner", res.data.owner);
          _ember['default'].set(e, "ip", res.data.ip);
          _ember['default'].set(e, "dc", res.data.dcs);
        }
        /*$(bgp.data).each(function(a,b){
          if(parseInt(b.id) === res.data.id){
              Ember.set(b, "owner", res.data.owner);
          }
        });*/
        _ember['default'].run.later(function () {
          if (self.get('isPoll')) {
            aq.addObject({ data: e, state: 0, isProcessing: false });
            // self.getZSData(e);
          }
        }, 1000 * 60 * 3);

        cq.removeObject(data);
      }, function (err) {
        console.log('zohoservices Data error ', err);
      });
    },

    actions: {
      toggleNav: function toggleNav() {
        this.toggleProperty('appCtrl.showLeft');
      },

      rePoll: function rePoll() {
        this.stopPoll();
        this.processZSRoute();
      }
    }
  });
});
define('netconfig/ember-chosen/tests/modules/ember-chosen/components/ember-chosen.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint | modules/ember-chosen/components/ember-chosen.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-chosen/components/ember-chosen.js should pass jshint.');
  });
});
define('netconfig/ember-onerror', ['exports', 'ember', 'netconfig/models/common/c_resource', 'netconfig/utils/notify'], function (exports, _ember, _netconfigModelsCommonC_resource, _netconfigUtilsNotify) {

  var isDevelopmentMode = window.APP_META.is_development;
  var emberAssert = _ember['default'].Logger.assert;

  // Refer url = emberjs.com/guides/understanding-ember/debugging
  _ember['default'].onerror = function (error) {

    if (_ember['default'].typeOf(error) !== 'error') {
      //No I18N
      return;
    }
    // Log the stack in both development and production
    emberAssert(false, error.stack);

    if (isDevelopmentMode) {
      // alert("error")  //No I18N
      // Show an alert in development
      // This is just to notify the developper
      // Helpful when devtools in closed
      console.log("Error! Check the console for the stack trace.", error); //No I18N
    } else {
        _netconfigModelsCommonC_resource['default'].create().sendRequest('/errors', { //No I18N
          type: 'POST', //No I18N
          data: {
            url: window.location.href,
            browser: window.navigator.userAgent,
            trace: error.stack
          }
        })['catch'](function () {
          // jscs:disable disallowEmptyBlocks
          // do nothing on server errors. Though checking for the instance of `error` would work, this is just secondary-level protection against infinite loop
        });
      }
  };

  _ember['default'].RSVP.on('error', function (error) {
    //No I18N
    // Don't post this error to server
    (0, _netconfigUtilsNotify.customNotify)('error', error.message); //No I18N
    emberAssert(false, error);
  });
});
/*$Id$*/
define('netconfig/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/app-version', ['exports', 'ember', 'netconfig/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _ember, _netconfigConfigEnvironment, _emberCliAppVersionUtilsRegexp) {
  exports.appVersion = appVersion;
  var version = _netconfigConfigEnvironment['default'].APP.version;

  function appVersion(_) {
    var hash = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (hash.hideSha) {
      return version.match(_emberCliAppVersionUtilsRegexp.versionRegExp)[0];
    }

    if (hash.hideVersion) {
      return version.match(_emberCliAppVersionUtilsRegexp.shaRegExp)[0];
    }

    return version;
  }

  exports['default'] = _ember['default'].Helper.helper(appVersion);
});
define('netconfig/helpers/chop', ['exports', 'ember'], function (exports, _ember) {
  exports.chop = chop;

  function chop(param) {
    console.log(param);
    if (param[0]) {
      if (param[0].includes('"')) {
        var res = param[0].slice(param[1], param[2]);
        return res;
      } else {
        return param[0];
      }
    }
  }

  exports['default'] = _ember['default'].Helper.helper(chop);
});
define("netconfig/helpers/commitlogmap", ["exports", "ember"], function (exports, _ember) {
  exports.commitlogmap = commitlogmap;

  var val_map = { createRmap: "Create Route Map",
    updateRmap: "Update Route Map",
    deleteRmap: "Delete Route Map",
    createPrefix: "Create Prefix List",
    updatePrefix: "Update Prefix List",
    deletePrefix: "Delete Prefix List",
    deleteStdAcl: "Delete Standard Accesslist",
    deleteExtAcl: "Delete Extended Accesslist",
    updateStdAcl: "Update Standard Accesslist",
    updateExtAcl: "Update Extended Accesslist",
    standardACL: "Create Standard Accesslist",
    extendedACL: "Create Extended Accesslist" };

  function commitlogmap(params /*, hash*/) {
    if (val_map[params]) {
      return val_map[params];
    } else {
      return params;
    }
  }

  exports["default"] = _ember["default"].Helper.helper(commitlogmap);
});
define('netconfig/helpers/enable-disable', ['exports', 'ember'], function (exports, _ember) {
  exports.EnableDisable = EnableDisable;

  function EnableDisable(params) {
    return params[0] ? 'Enabled' : 'Disabled';
  }

  exports['default'] = _ember['default'].Helper.helper(EnableDisable);
});
/*$Id$*/
define('netconfig/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/formate-date', ['exports', 'ember'], function (exports, _ember) {
  exports.FormateDate = FormateDate;

  function FormateDate(params) {
    var param = params[0];
    var date = param.split('T')[0],
        time = param.split('T')[1];
    time = time.split('.')[0];
    return date + ' ' + time;
  }

  exports['default'] = _ember['default'].Helper.helper(FormateDate);
});
/*$Id$*/
define('netconfig/helpers/formate-time', ['exports', 'ember'], function (exports, _ember) {
  exports.FormateTime = FormateTime;

  function FormateTime(params) {
    var time = moment(parseInt(params[0])).format('YYYY-MM-DD hh:mm');
    if (params[1]) {
      time.tz(params[1]);
    }
    return time;
  }

  exports['default'] = _ember['default'].Helper.helper(FormateTime);
});
/*$Id$*/
define('netconfig/helpers/formateisp', ['exports', 'ember'], function (exports, _ember) {
    exports.formateisp = formateisp;

    function formateisp(params) {
        var ispval = params[0];
        if (ispval.indexOf('@') !== -1) {
            var sispval = ispval.split('@');
            var fispval = sispval[1].substr(1, sispval[1].length - 2);
            //ispval = fispval+' &#x2192; '+sispval[0]
            ispval = fispval;
        }
        return ispval;
    }

    exports['default'] = _ember['default'].Helper.helper(formateisp);
});
/*$Id$*/
define('netconfig/helpers/formateprefix', ['exports'], function (exports) {
  exports.formateprefix = formateprefix;

  function formateprefix(params) {
    var ispval = params[0];
    var routeval = params[1];
    if (ispval.indexOf('@') !== -1) {
      var sispval = ispval.split('@');
      var fispval = sispval[1].substr(1, sispval[1].length - 2);
      ispval = sispval[0] + ' → ' + routeval;
    } else {
      ispval = routeval;
    }
    return ispval;
  }

  exports['default'] = Ember.Helper.helper(formateprefix);
});
define('netconfig/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/is-after', ['exports', 'ember-moment/helpers/is-after'], function (exports, _emberMomentHelpersIsAfter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersIsAfter['default'];
    }
  });
});
define('netconfig/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/is-before', ['exports', 'ember-moment/helpers/is-before'], function (exports, _emberMomentHelpersIsBefore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersIsBefore['default'];
    }
  });
});
define('netconfig/helpers/is-between', ['exports', 'ember-moment/helpers/is-between'], function (exports, _emberMomentHelpersIsBetween) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersIsBetween['default'];
    }
  });
});
define('netconfig/helpers/is-same-or-after', ['exports', 'ember-moment/helpers/is-same-or-after'], function (exports, _emberMomentHelpersIsSameOrAfter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersIsSameOrAfter['default'];
    }
  });
});
define('netconfig/helpers/is-same-or-before', ['exports', 'ember-moment/helpers/is-same-or-before'], function (exports, _emberMomentHelpersIsSameOrBefore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersIsSameOrBefore['default'];
    }
  });
});
define('netconfig/helpers/is-same', ['exports', 'ember-moment/helpers/is-same'], function (exports, _emberMomentHelpersIsSame) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersIsSame['default'];
    }
  });
});
define('netconfig/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/moment-add', ['exports', 'ember-moment/helpers/moment-add'], function (exports, _emberMomentHelpersMomentAdd) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentAdd['default'];
    }
  });
});
define('netconfig/helpers/moment-calendar', ['exports', 'ember-moment/helpers/moment-calendar'], function (exports, _emberMomentHelpersMomentCalendar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar['default'];
    }
  });
});
define('netconfig/helpers/moment-diff', ['exports', 'ember-moment/helpers/moment-diff'], function (exports, _emberMomentHelpersMomentDiff) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDiff['default'];
    }
  });
});
define('netconfig/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('netconfig/helpers/moment-format', ['exports', 'ember-moment/helpers/moment-format'], function (exports, _emberMomentHelpersMomentFormat) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentFormat['default'];
    }
  });
});
define('netconfig/helpers/moment-from-now', ['exports', 'ember-moment/helpers/moment-from-now'], function (exports, _emberMomentHelpersMomentFromNow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentFromNow['default'];
    }
  });
});
define('netconfig/helpers/moment-from', ['exports', 'ember-moment/helpers/moment-from'], function (exports, _emberMomentHelpersMomentFrom) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentFrom['default'];
    }
  });
});
define('netconfig/helpers/moment-subtract', ['exports', 'ember-moment/helpers/moment-subtract'], function (exports, _emberMomentHelpersMomentSubtract) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentSubtract['default'];
    }
  });
});
define('netconfig/helpers/moment-to-date', ['exports', 'ember-moment/helpers/moment-to-date'], function (exports, _emberMomentHelpersMomentToDate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentToDate['default'];
    }
  });
});
define('netconfig/helpers/moment-to-now', ['exports', 'ember-moment/helpers/moment-to-now'], function (exports, _emberMomentHelpersMomentToNow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentToNow['default'];
    }
  });
});
define('netconfig/helpers/moment-to', ['exports', 'ember-moment/helpers/moment-to'], function (exports, _emberMomentHelpersMomentTo) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentTo['default'];
    }
  });
});
define('netconfig/helpers/moment-unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _emberMomentHelpersUnix) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersUnix['default'];
    }
  });
});
define('netconfig/helpers/moment', ['exports', 'ember-moment/helpers/moment'], function (exports, _emberMomentHelpersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMoment['default'];
    }
  });
});
define('netconfig/helpers/newline_br', ['exports', 'ember'], function (exports, _ember) {
  exports.newline_br = newline_br;

  function newline_br(params) {
    var text = params[0];
    return text.replace(/(?:\n)/g, '<br/>');
  }

  exports['default'] = _ember['default'].Helper.helper(newline_br);
});
define('netconfig/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/now', ['exports', 'ember-moment/helpers/now'], function (exports, _emberMomentHelpersNow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersNow['default'];
    }
  });
});
define('netconfig/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define("netconfig/helpers/serialize-instance-row", ["exports", "ember"], function (exports, _ember) {
  exports.serializeInstanceRow = serializeInstanceRow;

  function serializeInstanceRow(params /*, hash*/) {

    console.log("inside helper!!!!!!!!", params[0]);

    return JSON.stringify(params);
  }

  exports["default"] = _ember["default"].Helper.helper(serializeInstanceRow);
});
define('netconfig/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('netconfig/helpers/timestampdate', ['exports', 'ember'], function (exports, _ember) {
  exports.timestampdate = timestampdate;

  function timestampdate(params) {
    var date = moment.tz(params[0], 'UTC');
    if (params[1]) {
      return moment(date).tz(params[1]).format('MMM Do YYYY h:mmA');
    } else {
      return moment(date).format('MMM Do YYYY h:mmA');
    }
  }

  exports['default'] = _ember['default'].Helper.helper(timestampdate);
});
/*$Id$*/
define('netconfig/helpers/to-fixed', ['exports', 'ember'], function (exports, _ember) {
  exports.toFixed = toFixed;

  function toFixed(params) {
    return params[0] === undefined ? '' : params[0].toFixed(3);
  }

  exports['default'] = _ember['default'].Helper.helper(toFixed);
});
/*$Id$*/
define('netconfig/helpers/tolowercase', ['exports', 'ember'], function (exports, _ember) {
  exports.tolowercase = tolowercase;

  function tolowercase(params) {
    return params[0].toLowerCase();
  }

  exports['default'] = _ember['default'].Helper.helper(tolowercase);
});
/*$Id$*/
define('netconfig/helpers/unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _emberMomentHelpersUnix) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersUnix['default'];
    }
  });
});
define('netconfig/helpers/utc', ['exports', 'ember-moment/helpers/utc'], function (exports, _emberMomentHelpersUtc) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersUtc['default'];
    }
  });
  Object.defineProperty(exports, 'utc', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersUtc.utc;
    }
  });
});
define('netconfig/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('netconfig/initializers/app-controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = {
    name: 'exportAppContorller',
    initialize: function initialize(application) {
      var appCtrl = _ember['default'].inject.controller('application');
      window.appCtrl = appCtrl;
    }
  };
});
define('netconfig/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'netconfig/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _netconfigConfigEnvironment) {
  var _config$APP = _netconfigConfigEnvironment['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(name, version)
  };
});
define('netconfig/initializers/component-router-injector', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(application) {
    // Injects all Ember components with a router object:
    application.inject('component', 'router', 'router:main');
  }

  exports['default'] = {
    name: 'component-router-injector',
    initialize: initialize
  };
});
define('netconfig/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('netconfig/initializers/current-user', ['exports'], function (exports) {
  /*$Id$*/

  exports['default'] = {
    name: 'currentUser', //No I18N
    after: 'store', //No I18N
    initialize: function initialize(application) {

      application.inject('controller', 'currentUser', 'service:current-user'); //No I18N
      application.inject('controller', 'appMeta', 'service:app-meta');
      application.inject('controller', 'currentPlan', 'service:current-plan'); //No I18N
      application.inject('component', 'appMeta', 'service:app-meta');
      application.inject('route', 'currentUser', 'service:current-user'); //No I18N
      application.inject('route', 'appMeta', 'service:app-meta');
      application.inject('route', 'currentPlan', 'service:current-plan'); //No I18N
    }
  };
});
define('netconfig/initializers/data-adapter', ['exports'], function (exports) {
  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('netconfig/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data'], function (exports, _emberDataSetupContainer, _emberData) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    ```app/services/store.js
    import DS from 'ember-data';
  
    export default DS.Store.extend({
      adapter: 'custom'
    });
    ```
  
    ```app/controllers/posts.js
    import { Controller } from '@ember/controller';
  
    export default Controller.extend({
      // ...
    });
  
    When the application is initialized, `ApplicationStore` will automatically be
    instantiated, and the instance of `PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define('netconfig/initializers/export-application-global', ['exports', 'ember', 'netconfig/config/environment'], function (exports, _ember, _netconfigConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_netconfigConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _netconfigConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_netconfigConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('netconfig/initializers/injectStore', ['exports'], function (exports) {
  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('netconfig/initializers/permission', ['exports'], function (exports) {
  /*$Id$*/
  exports['default'] = {
    name: 'permission', //No I18N
    initialize: function initialize(application) {
      application.inject('controller', 'permission', 'service:permission'); //No I18N
      application.inject('route', 'permission', 'service:permission'); //No I18N
    }
  };
});
define('netconfig/initializers/router', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(application) {
    // application.inject('route', 'foo', 'service:foo');
    application.inject('route', 'router', 'router:main');
    application.inject('component', 'router', 'router:main');
    application.inject('controller', 'router', 'router:main');
  }

  exports['default'] = {
    name: 'router',
    initialize: initialize
  };
});
define('netconfig/initializers/store', ['exports'], function (exports) {
  /*$Id$*/
  exports['default'] = {
    name: 'store', //No I18N
    after: 'permission', //No I18N
    initialize: function initialize(application) {
      application.inject('route', 'store', 'service:store'); //No I18N
      application.inject('controller', 'store', 'service:store'); //No I18N
    }
  };
});
define('netconfig/initializers/transforms', ['exports'], function (exports) {
  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('netconfig/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define("netconfig/instance-initializers/ember-data", ["exports", "ember-data/instance-initializers/initialize-store-service"], function (exports, _emberDataInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataInstanceInitializersInitializeStoreService["default"]
  };
});
define("netconfig/keymaster-ext", ["exports"], function (exports) {
  /*
   * This is to overwrite keymaster method to ignore the shortcut actions when the focus is on particular tags
   * Refer [https://github.com/madrobby/keymaster#filter-key-presses]
  */

  window.key.filter = function filter(event) {
    var tagName = (event.target || event.srcElement).tagName;
    var focusableTagsRegEx = /INPUT|SELECT|TEXTAREA|SPAN|BUTTON/;
    return !focusableTagsRegEx.test(tagName);
  };
});
define('netconfig/mixins/full-screen', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create(_ember['default'].Evented, {

    fullscreen: false,

    requestFullscreen: _ember['default'].on('didEnterFullscreen', function () {
      var el = this.get('element');

      if (el.requestFullscreen) {
        el.requestFullscreen();
      } else if (el.msRequestFullscreen) {
        el.msRequestFullscreen();
      } else if (el.mozRequestFullScreen) {
        el.mozRequestFullScreen();
      } else if (el.webkitRequestFullscreen) {
        el.webkitRequestFullscreen();
      }
    }),

    exitFullscreen: _ember['default'].on('didExitFullscreen', function () {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      }
    }),

    applyKeyBindings: _ember['default'].on('didEnterFullscreen', function () {
      var _this = this;

      _ember['default'].$('body').on('keyup.fullScreenMixin', function (e) {
        if (e.which === 27) {
          // Esc
          _this.send('exitFullscreen');
        }
      });
    }),

    removeKeyBindings: _ember['default'].on('didExitFullscreen', function () {
      _ember['default'].$('body').off('keyup.fullScreenMixin');
    }),

    actions: {

      enterFullscreen: function enterFullscreen() {
        console.log("Inside enter full screen");
        this.set('fullscreen', true);
        console.log("1");
        this.trigger('didEnterFullscreen');
        console.log("Done full screen");
      },

      exitFullscreen: function exitFullscreen() {
        this.set('fullscreen', false);
        this.trigger('didExitFullscreen');
      },

      toggleFullscreen: function toggleFullscreen() {
        if (this.get('fullscreen')) {
          this.send('exitFullscreen');
        } else {
          this.send('enterFullscreen');
        }
      },

      // Alias actions:

      enterFullScreen: function enterFullScreen() {
        this.send('enterFullscreen');
      },

      exitFullScreen: function exitFullScreen() {
        this.send('exitFullscreen');
      },

      toggleFullScreen: function toggleFullScreen() {
        this.send('toggleFullscreen');
      }

    }

  });
});
define("netconfig/mixins/setupuser", ["exports"], function (exports) {
    exports["default"] = Ember.Mixin.create({
        init: function init() {
            self = this;
            return this.store.getJSON("../get_user/").then(function (res) {
                self.set("appCtrl.user", res);
            });
        }
    });
});
define('netconfig/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('netconfig/router', ['exports', 'ember', 'netconfig/config/environment'], function (exports, _ember, _netconfigConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _netconfigConfigEnvironment['default'].locationType,
    rootURL: _netconfigConfigEnvironment['default'].rootURL
  });

  Router.map(function () {
    this.route('bgp');
    this.route('lanbgp');
    this.route('bgpalarms');
    this.route('cvx');
    this.route('interfaces');
    this.route('mtrprofileview');
    //this.route('inlinefilterview');
    this.route('login');
    this.route('admin_login');

    this.route('testflow', { resetNamespace: true }, function () {
      this.route('workflow');
      this.route('pipeline');
    });

    this.route('monitoring', { resetNamespace: true }, function () {
      this.route('telemetry');
      this.route('inventory');
    });

    this.route('settings', { resetNamespace: true }, function () {

      this.route('apikey');
      this.route('smtp');
      this.route('stopbgpadv');

      this.route('settings/mtrprofiles', { resetNamespace: true, path: '/mtrprofiles' }, function () {
        this.route('add');
        this.route('edit', { path: '/edit/:id' });
      });

      this.route('settings/mtrprofiles/geo', { resetNamespace: true, path: '/mtrprofiles/geo' }, function () {
        this.route('add');
        this.route('edit', { path: '/edit/:id' });
      });

      //this.route('settings/inlinefilters', {resetNamespace:true,path:'/inlinefilters'}, function(){
      //  this.route('add')
      //  this.route('edit', {path:'/edit/:id'})
      // });

      this.route('settings/routers', { resetNamespace: true, path: '/routers' }, function () {
        this.route('add');
        this.route('edit', { path: '/edit/:id' });
      });

      this.route('settings/zohoserviceview', { resetNamespace: true, path: '/zohoserviceview' }, function () {
        this.route('add');
        this.route('edit', { path: '/edit/:id' });
      });
      this.route('settings/admin', { resetNamespace: true, path: '/admin' }, function () {});
      this.route('commits');
      this.route('uncommits');
      this.route('cicd');
    });

    this.route('conf', { resetNamespace: true }, function () {
      this.route('juniper', function () {
        this.route('prefixlist', function () {}), this.route('policyoption', function () {});
      });
      this.route('arista', function () {
        this.route('armap', function () {}), this.route('prefixlist', function () {});
        this.route('accesslist', function () {});
      });
      this.route('commits', function () {});
      this.route('login', function () {});
    });

    this.route('bandwidth', { resetNamespace: true }, function () {
      this.route('tcp', { path: '/tcp/:id' });
      this.route('udp', { path: '/udp/:id' });
      this.route('bandwidth/clients', { resetNamespace: true, path: '/clients' }, function () {
        this.route('edit', { path: '/edit/:id' });
        this.route('add');
        this.route('summary');
        this.route('allagents');
      });
    });

    this.route('zohoservices');
    this.route('oauth2callback');
    this.route('workflow');

    // dc view
    this.route("dc");

    this.route("lanconf", { resetNamespace: true }, function () {
      this.route("lanconf/accesslist", { resetNamespace: true, path: '/accesslist' }, function () {
        this.route('standard');
        this.route('extended');
      });
      this.route("interfaces", function () {});
      this.route("configuser", function () {});
      this.route("command", function () {});
      this.route("osupdate", function () {
        this.route("mlag");
        this.route("spine");
        this.route('updatelist');
      });
      this.route("lanconf/wanaccesslist", { resetNamespace: true, path: '/wanaccesslist' }, function () {
        this.route('standard');
        this.route('extended');
      });
      this.route('cicd', function () {});
      this.route("waninterfaces", function () {});
      this.route("wancommand", function () {});
      this.route("wanroutemap", function () {});
      this.route("wancicd", function () {});
    });

    this.route("error", { resetNamespace: true }, function () {
      this.route('unauthorized');
    });

    this.route('myservices', { resetNamespace: true }, function () {
      this.route('iptables', function () {
        this.route('index', { path: '/:serviceid/:instanceid' });
        this.route('instanceiptables-notfound', { path: '/instanceiptables-notfound/:serviceid/:instanceid' });
      });
      this.route('index', { path: '/:id' });
      this.route('add', { path: '/add/:id' });
      this.route('edit', { path: '/edit/:serviceid' });
      this.route('instance-notfound', { path: '/instance-notfound/:serviceid' });
      this.route('service-notfound');
    });
    this.route('notfound');
  });

  exports['default'] = Router;
});
define("netconfig/routes/admin", ["exports", "ember"], function (exports, _ember) {
  exports["default"] = _ember["default"].Route.extend({});
});
define('netconfig/routes/admin_login', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        redirect: function redirect() {
            console.log('redirect');
            if (APP_META.isLogin) {
                this.transitionTo('monitoring.inventory');
            }
        },
        setupController: function setupController(controller) {
            if (!APP_META.isLogin) {
                controller.set('appCtrl.login', false);
            } else {
                controller.set('appCtrl.login', true);
            }
        }
    });
});
define('netconfig/routes/application', ['exports', 'ember', 'netconfig/utils/validation', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsValidation, _netconfigUtilsNotify) {
		var service = _ember['default'].inject.service;
		exports['default'] = _ember['default'].Route.extend({

				beforeModel: function beforeModel() {
						if (!this.controllerFor('application').get('isLoggedin') && !(window.location.hash.split("?")[0] == "#/oauth2callback") && !(window.location.hash.split("?")[0] == "#/admin_login")) {
								this.transitionTo('login');
						}
				},

				modalContext: service(),

				actions: {
						error: function error(errObj) {
								var messageObj = {};
								messageObj = normalizeMessages(errObj);
								(0, _netconfigUtilsNotify.customNotify)('error', errObj.message);
						},
						goToCreate: Em.K,
						goToEdit: Em.K,
						reloadTab: function reloadTab() {
								window.location.reload();
						},

						showSuccessMsg: function showSuccessMsg(msgObj) {
								var messageObj = {};

								messageObj = normalizeMessages(msgObj);
								this.get('controller').show('success', messageObj);
						},

						showErrorMsg: function showErrorMsg(msgObj) {
								var messageObj = {};

								messageObj = normalizeMessages(msgObj);
								this.get('controller').show('error', messageObj);
						},

						showConfirmModal: function showConfirmModal(obj) {
								var controller = this.controllerFor('common/confirmmodal'),
								    closeOnEscFunc = {
										primary_action: 'confirmAction',
										secondary_action: 'secondaryAction'
								};

								controller.setProperties({
										title: obj.title,
										titleNeed: obj.titleNeed,
										msg: obj.msg || 'Alert',
										msgArgs: obj.msgArgs || '',
										objParams: Em.isEmpty(obj.objParams) ? {} : obj.objParams,
										pBtn: obj.pBtn || 'Yes',
										pBtnActn: obj.pBtnActn || 'closeModal',
										sBtnNeed: obj.sBtnNeed,
										sBtn: obj.sBtn || 'No',
										sBtnActn: obj.sBtnActn || 'closeModal',
										opensAnotherModal: obj.opensAnotherModal || false,
										controllerInstance: obj.controllerInstance || '',
										handleWarningAction: obj.handleWarningAction || false,
										showChkBox: obj.showChkBox || false,
										chkBoxValue: obj.chkBoxValue || false,
										chkBoxLabel: obj.chkBoxLabel || 'Don\'t Show',
										notes: obj.notes || '',
										notesArgs: obj.notesArgs ? { hash: obj.notesArgs } : null,
										disablePBtn: false, // internal prop to enable the primary button
										showIcon: !Em.isEmpty(obj.showIcon) ? obj.showIcon : true
								});
								this.send('showModal', 'common/confirmmodal', { controller: controller, modalHeader: obj.modalHeader !== undefined ? obj.modalHeader : false, modalTitle: obj.modalTitle !== undefined ? obj.modalTitle : "Confirm", modalSize: 'modal-confirm modal-sm', modalFooter: false, closeOnEscFunc: closeOnEscFunc[obj.closeOnEscAction] });
						},

						closeModal: function closeModal() {
								this.set('modalContext.closeModal', true);
								_ember['default'].run.later(this, function () {
										this.disconnectOutlet({
												outlet: 'modal',
												parentView: 'application'
										});
								}, 300);
						},

						showModal: function showModal(templateName, options) {
								options = options || {};
								//TODO: Need to revisit setting on application.

								/* In the case of opening a modal immediately after closing an existing modal, if we render the new modal immediately,
         * the new modal also will be closed, as the previous modal will be disconnected after a delay of 300 ms, for css
         * transition. So if a view is already existing in the 'modal' oulet, rendering the modal after the previous modal
         * is disconnected, i.e after a delay of 301ms.
         * TODO: 'this.connections' is a private api, should find an alternative to this.
        */

								var connections = this.connections || [];
								var isModalAlreadyRendered = connections.filterBy('outlet', 'modal').isAny('controller');
								if (!isModalAlreadyRendered) {
										this.send('connectModal', templateName, options);
								} else {
										_ember['default'].run.later(this, function () {
												this.send('connectModal', templateName, options);
										}, 401);
								}
						},

						connectModal: function connectModal(templateName, options) {
								var canClsOnEsc = (0, _netconfigUtilsValidation.isEmpty)(options.canClsOnEsc) ? true : options.canClsOnEsc;
								this.get('modalContext').setProperties({ canClsOnEsc: canClsOnEsc, modalFooter: options.modalFooter !== undefined ? options.modalFooter : true, modalHeader: options.modalHeader !== undefined ? options.modalHeader : true, modalTitle: options.modalTitle !== undefined ? options.modalTitle : "Modal Title", closeModal: false, modalSize: options.modalSize, bkdrpCSS: options.bkdrpCSS, closeOnEscFunc: options.closeOnEscFunc });

								this.render(templateName, {
										into: 'application',
										outlet: 'modal',
										controller: options.controller,
										view: 'common/modal',
										model: options.model
								});
						},

						launchFullscreen: function launchFullscreen(element) {
								if (element.requestFullScreen) {
										element.requestFullScreen();
								} else if (element.mozRequestFullScreen) {
										element.mozRequestFullScreen();
								} else if (element.webkitRequestFullScreen) {
										element.webkitRequestFullScreen();
								}
						},

						cancelFullscreen: function cancelFullscreen() {
								if (document.cancelFullScreen) {
										document.cancelFullScreen();
								} else if (document.mozCancelFullScreen) {
										document.mozCancelFullScreen();
								} else if (document.webkitCancelFullScreen) {
										document.webkitCancelFullScreen();
								}
						},

						togglefullscreen: function togglefullscreen() {
								console.log("full");
								var element = document.documentElement,
								    controller = this.get('controller');
								if (controller.toggleProperty('fullscreenmode')) {
										this.send('launchFullscreen', element);
								} else {
										this.send('cancelFullscreen');
								}
						}
				}
		});

		function normalizeMessages(msgObj) {
				var messageObj = {};

				messageObj.message = msgObj.msg || msgObj.message || msgObj;

				if (msgObj.msgArgs) {
						messageObj.msgArgs = msgObj.msgArgs;
				}

				return messageObj;
		}
});
define('netconfig/routes/bandwidth/clients/add', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('networkmon/client/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/bandwidth/clients/allagents', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('networkmon/clientlist/');
        },
        setupController: function setupController(controller, model) {
            var data = [];
            if (model.data.length) {
                var cdArr = [],
                    ceArr = [];
                $(model.data).each(function (i, e) {
                    if (e.client_details.length) {
                        cdArr.push(e);
                    } else {
                        ceArr.push(e);
                    }
                });
                data.pushObjects(cdArr);
                data.pushObjects(ceArr);
            }
            controller.set('content', data);

            _ember['default'].run.schedule("afterRender", this, function () {
                controller.send('updateElement');
            });
        }
    });
});
define('netconfig/routes/bandwidth/clients/edit', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return this.store.getJSON('networkmon/clientdetails/', { ip_address: params.id });
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/bandwidth/clients/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        redirect: function redirect() {
            this.transitionTo('bandwidth/clients.summary');
        }
    });
});
define('netconfig/routes/bandwidth/clients/summary', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('networkmon/agent/', {
                // fromtime:'1498113330000',
                // totime:'1498115908000'
                fromtime: moment(moment().format('YYYY-MM-DD') + ' 00:00:00', 'YYYY-MM-DD hh:mm:ss').format('x'),
                totime: moment().format('x')
            });
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);

            // Ember.run.schedule("afterRender",this,function() {
            //     controller.send('updateElement');
            // });
        }
    });
});
define('netconfig/routes/bandwidth/tcp', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {
            return this.store.getJSON('networkmon/tcp/', {
                pk: param.id,
                fromtime: moment(moment().format('YYYY-MM-DD') + ' 00:00:00', 'YYYY-MM-DD hh:mm:ss').format('x'),
                totime: moment().format('x')
            });
            // return this.store.getJSON('networkmon/tcp/', {
            //     pk:'3',
            //     fromtime:1497004230000,
            //     totime:1497364836000
            // });
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);

            _ember['default'].run.schedule("afterRender", this, function () {
                controller.send('didInsEle');
            });
        }
    });
});
define('netconfig/routes/bandwidth/udp', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {
            return this.store.getJSON('networkmon/udp/', {
                pk: param.id,
                fromtime: moment(moment().format('YYYY-MM-DD') + ' 00:00:00', 'YYYY-MM-DD hh:mm:ss').format('x'),
                totime: moment().format('x')
            });
            // return this.store.getJSON('networkmon/tcp/', {
            //     pk:'3',
            //     fromtime:1497004230000,
            //     totime:1497364836000
            // });
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);

            _ember['default'].run.schedule("afterRender", this, function () {
                controller.send('createGraph');
            });
        }
    });
});
define('netconfig/routes/bgp', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({

        model: function model() {
            var self = this;
            return this.store.getJSON('wan_devices/').then(function (res) {

                return self.store.getJSON('dc/').then(function (dc) {
                    var data = {
                        dc: dc.data,
                        wan: res
                    };
                    return data;
                });
            });
        },

        setupController: function setupController(controller, model) {
            controller.set('allcontent', model.wan);
            controller.set('content', { router: model.wan });
            //controller.getDcs();
            controller.set('dcInfo', model.dc);
            controller.processWidget();
            controller.initPage();
            controller.set('isPoll', true);
        },

        actions: {
            willTransition: function willTransition() {
                var ctrl = this.get('controller');
                ctrl.stopPoll();
                ctrl.setProperties({ 'tblData': [], isPoll: false });
            }
        }
    });
});
define('netconfig/routes/bgpalarms', ['exports', 'ember', 'ember-infinity/mixins/route'], function (exports, _ember, _emberInfinityMixinsRoute) {
  //import {customNotify} from '../../utils/notify';

  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      return this.store.getJSON('bgpalarms/', { limit: 30, offset: 0 }).then(function (res) {
        return res;
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      console.log(model);
      controller.set('content', model.results);
    },
    actions: {
      willTransition: function willTransition() {
        var pageMeta = this.controller.get('pageMeta');
        pageMeta.limit = 30;
        pageMeta.offset = 30;
      }
    }
  });
});
define("netconfig/routes/conf", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({

        beforeModel: function beforeModel() {
            console.log("conf before model");
        },

        afterModel: function afterModel() {
            console.log("conf after model");
        },

        setupController: function setupController(controller, model) {
            console.log("conf setup controller");
            controller._init();
        }
    });
});
define('netconfig/routes/conf/arista/accesslist/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {},
    beforeModel: function beforeModel(transition) {
      console.log("armap before model");
      if (!this.controllerFor('conf').get('connected')) {
        this.transitionTo('conf');
      }
    },
    setupController: function setupController(controller, model) {
      controller.setPrefixList();
    }
  });
});
define('netconfig/routes/conf/arista/armap/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {},

    beforeModel: function beforeModel(transition) {
      console.log("armap before model");
      if (!this.controllerFor('conf').get('connected')) {
        this.transitionTo('conf');
      }
    },

    setupController: function setupController(controller, model) {
      controller.setRouterMapList();
    }
  });
});
define("netconfig/routes/conf/arista/index", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({

        beforeModel: function beforeModel() {
            console.log("arista before model.");
        }

    });
});
define('netconfig/routes/conf/arista/prefixlist/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {},
    beforeModel: function beforeModel(transition) {
      console.log("armap before model");
      if (!this.controllerFor('conf').get('connected')) {
        this.transitionTo('conf');
      }
    },
    setupController: function setupController(controller, model) {
      controller.setPrefixList();
    }
  });
});
define('netconfig/routes/conf/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      console.log("check1");
      var self = this;
      return this.store.getJSON('wan_devices/').then(function (rres) {
        console.log("first function");
        return self.store.getJSON('get_approver/').then(function (ares) {
          return self.store.getJSON('dc/').then(function (dcres) {
            console.log("second function");
            var data = {};
            data["rres"] = rres;
            data["dcres"] = dcres;
            if (ares.data[0] === "super_admin") {
              data["isAdminAccount"] = true;
              data["ares"] = ares.data.slice(1);
            } else {
              data["isAdminAccount"] = false;
              data["ares"] = ares.data;
            }
            console.log("data");
            console.log(data);
            return data;
          });
        });
      });
    },

    setupController: function setupController(controller, model) {
      console.log("model");
      console.log(model);
      controller.set('content', model["rres"]);
      controller.set('appro', model["ares"]);
      controller.set('isAdminAccount', model["isAdminAccount"]);
      controller.setDC(model["dcres"]);
      controller.init();
      console.log('call changeRType');
      _ember['default'].run.later(function () {
        controller.send('changeRType');
      });
    },

    beforeModel: function beforeModel(transition) {
      if (this.controllerFor('conf').get('connected')) {
        if (this.controllerFor('conf').get('rtype') == "juniper") {
          this.transitionTo('conf.juniper.prefixlist');
        } else {
          this.transitionTo('conf.arista.armap');
        }
      }
    }
  });
});
define('netconfig/routes/conf/juniper/policyoption/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({

        model: function model() {},
        setupController: function setupController(controller, model) {
            controller.setPolicyOption();
        },
        beforeModel: function beforeModel(transition) {
            if (!this.controllerFor('conf').get('connected')) {
                this.transitionTo('conf');
            }
        }
    });
});
define('netconfig/routes/conf/juniper/prefixlist/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({

        model: function model() {
            return this.store.getJSON('router/');
        },

        setupController: function setupController(controller, model) {
            controller.set('content', model);
            controller.setPrefix();
        },

        beforeModel: function beforeModel(transition) {
            if (!this.controllerFor('conf').get('connected')) {
                this.transitionTo('conf');
            }
        },

        actions: {
            willTransition: function willTransition(transition) {
                var ctrl = this.get('controller');
                ctrl.setProperties({ 'isShowTrace': [], "addprefixForm": false, "commitPrefixForm": false, "isShowAddPrefix": false });
            }
        }
    });
});
define('netconfig/routes/conf/juniper/prefixlist/log', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.store.getJSON('commit_log/');
    }

  });
});
define('netconfig/routes/cvx', ['exports', 'ember'], function (exports, _ember) {
    //import {customNotify} from '../utils/notify';

    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            var self = this;
            return this.store.getJSON('router/').then(function (res) {
                return res;
            }, function (err) {
                self.transitionTo('error.unauthorized');
            });
        },

        setupController: function setupController(controller, model) {
            model['podtype'].unshift("All");
            controller.set('pod', ['All', 'Pod 1', 'Pod 2', 'Pod 3', 'Pod 4'].filter(function (a) {
                return model['podtype'].indexOf(a) >= 0;
            }));
            controller.set('allcontent', model['data']);
            //console.log(model['data'])
            controller.set('content', model['data']);
            controller.set('isPoll', true);
            _ember['default'].run.schedule('afterRender', function () {
                controller.send('changeContents');
                $('.sub-menu-cont a[data-name="lan"]').addClass('active');
            });
        },
        actions: {
            willTransition: function willTransition(transition) {
                var ctrl = this.get('controller');
                ctrl.send('stopPoll');
                ctrl.setProperties({ isPoll: false });
                $('.sub-menu-cont a[data-name="lan"]').removeClass('active');
            }
        }
    });
});
define('netconfig/routes/dashboard', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({

        model: function model() {
            return this.store.getJSON('dashboard_m/');
        },

        setupController: function setupController(controller, model) {
            //controller.setupUser()
            var dc = model.data.dc;
            dc.unshift("ALL");
            controller.set('dc', { mtrprofile: dc });
            controller.set('allcontent', model.data.dash);
            controller.set('content', { mtrprofile: model.data.dash });
            controller.set('beforeSearchContent', model.data.dash);
            controller.set('apiGeo', { mtrprofile: model.data.geo });
            controller.set('isPoll', true);
            controller.processWidget();
            controller.populateLocation();
        },
        actions: {
            willTransition: function willTransition(transition) {
                var ctrl = this.get('controller');
                ctrl.stopPoll();
                ctrl.setProperties({ 'dtblData': [], isPoll: false });
            }
        }
    });
});
define('netconfig/routes/dashboard_lan', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.getJSON('dc/');
    },
    setupController: function setupController(controller, model) {
      controller.set('dcInfo', model.data);
      controller.get('appCtrl').setUser();
    }
  });
});
define('netconfig/routes/dc', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      return this.store.getJSON('dc/').then(function (res) {
        return self.store.getJSON('dc_view/?dc=' + res.data[0].id).then(function (dc) {
          return { data: res, dc_data: dc };
        });
      });
      //return this.store.getJSON('dc/');
      //return $.get("http://siva-2356:3001/rest/v1/v1/dc_view")
    },

    setupController: function setupController(controller, model) {
      controller.set('inPage', false);
      controller.set('showLine', false);
      controller.set('dc_data', model.dc_data.data);
      controller.setupDC(model.data.data);
      //controller.drawLS(model.data)
      _ember['default'].run.schedule('afterRender', function () {
        $('.sub-menu-cont a[data-name="lan"]').addClass('active');
        controller.startcvxPoll();
      });
    },

    actions: {
      willTransition: function willTransition() {
        var ctrl = this.get('controller');
        ctrl.rmGraph();
        ctrl.set('inPage', false);
        ctrl.exitfullscreen();
        ctrl.stopPolling();
        ctrl.stopcvxPoll();
        ctrl.set('nightMode', false);
        $('.maincontainer').removeClass('background-black');
        $('text[label=device]').attr('fill', 'black');
        $('.sub-menu-cont a[data-name="lan"]').removeClass('active');
      }
    }
  });
});
define('netconfig/routes/foo', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('netconfig/routes/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        redirect: function redirect() {
            if (APP_META.isLogin) {
                this.transitionTo('monitoring.inventory');
            } else {
                this.transitionTo('login');
            }
        }
    });
});
define('netconfig/routes/inlinefilterview', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('inline_view/');
        },
        setupController: function setupController(controller, model) {
            var data = [];

            $(model.data).each(function (i, e) {
                var fid = [];
                data.push({ dc: e[0].dc, data: e, isShowData: true });
            });
            controller.set('content', data);
        }
    });
});
define('netconfig/routes/interfaces', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('wan_devices/');
        },
        setupController: function setupController(controller, model) {
            console.log("model data.");
            console.log(model);
            controller.set('content', { router: model });
            controller.set('isPoll', true);
            if (model[0] != undefined) {
                console.log("call processwidg");
                controller.processWidget(model[0].host);
            }
        },
        actions: {
            willTransition: function willTransition() {
                //this.controller.set('isPoll', false);
                var ctrl = this.get('controller');
                ctrl.stopPoll();
                ctrl.setProperties({ 'isPoll': false });
            }
        }
    });
});
define('netconfig/routes/lanbgp', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.store.getJSON('g_router/');
    },

    setupController: function setupController(controller, model) {
      controller.populatePod(model);
      controller.set('allcontent', model[0].routers);
      controller.set('content', { router: model });
      //controller.getDcs();
      controller.processWidget();
      controller.initPage();
      controller.set('isPoll', true);
    },

    actions: {
      willTransition: function willTransition() {
        var ctrl = this.get('controller');
        ctrl.stopPoll();
        ctrl.setProperties({ 'tblData': [], isPoll: false });
      }
    }
  });
});
define('netconfig/routes/lanconf/accesslist/extended', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      console.log("Reached extended model");
    },
    setupController: function setupController(controller, model) {
      controller.set('action', ['permit', 'deny']);
      controller.set('protocol', ['tcp', 'udp', 'icmp', 'ip']);
      controller.set('log', ['True', 'False']);
      controller.set('config', [{ 'id': 1, 'hidepcl': true }]);
      controller.setdefault();
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (!(transition.targetName == 'lanconf.index' || transition.targetName == 'lanconf/accesslist.standard' || transition.targetName == 'lanconf/accesslist.extended')) {
          console.log("Deleting lanconf from extended!");
          var controller = this.controllerFor('lanconf');
          delete controller['credentials'];
        }
        this.get('controller').send('willcancel');
      }
    }
  });
});
define('netconfig/routes/lanconf/accesslist/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      // console.log("Inside accesslist index model!")
      var self = this;
      var temp = [],
          data = {},
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "LAN").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('content', model);
      controller.set('types', ['standardACL', 'extendedACL']);
      controller.set('isPodTypeSelected', false);
      controller.set('podhosts', []);

      _ember['default'].run.schedule("afterRender", function () {
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (!(transition.targetName == 'lanconf/accesslist.index' || transition.targetName == 'lanconf/accesslist.standard' || transition.targetName == 'lanconf/accesslist.extended')) {
          console.log("deleting lanconf from index!");
          var controller = this.controllerFor('lanconf');
          delete controller['credentials'];
        }
      }
    }
  });
});
define('netconfig/routes/lanconf/accesslist/standard', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      console.log("Reached std model!");
    },
    setupController: function setupController(controller, model) {
      controller.set('action', ['permit', 'deny']);
      controller.set('log', ['True', 'False']);
      controller.set('config', [{ id: 1 }]);
      controller.setdefault();
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (!(transition.targetName == 'lanconf.index' || transition.targetName == 'lanconf/accesslist.standard' || transition.targetName == 'lanconf/accesslist.extended')) {
          console.log("Deleting lanconf from standard!");
          var controller = this.controllerFor('lanconf');
          delete controller['credentials'];
        }
        this.get('controller').send('willcancel');
      }
    }
  });
});
define('netconfig/routes/lanconf/cicd/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      var temp = [],
          data = {},
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "LAN_CICD").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          console.log(res.data);
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc, features: res.data.resp, custom_template: res.data.custom_template, imp: res.data.imp_key };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      controller.set('content', model);
      controller.set('types', ['standardACL', 'extendedACL']);
      controller.set('isPodTypeSelected', false);
      controller.set('podhosts', []);

      _ember['default'].run.schedule('afterRender', function () {
        controller.send('onLoad');
      });
    },
    actions: {
      // willTransition(transition) {

      // },
      // reloadPage:function(){
      //     this.refresh();
      // }
    }
  });
});
define('netconfig/routes/lanconf/command/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      var temp = [],
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "LAN").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      controller.set('content', model);
      controller.initEditor();
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.get('controller').get('isRouterConnected')) {
          this.get('controller').send('cancel');
        }
      },
      reloadPage: function reloadPage() {
        this.refresh();
      }
    }
  });
});
define('netconfig/routes/lanconf/configuser/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      return this.store.getJSON('podIps/?type=' + "LAN").then(function (res) {
        return res;
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      controller.set('content', model.data);
      controller.init();

      _ember['default'].run.schedule("afterRender", function () {
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.get('controller').get('isRouterConnected')) {
          this.get('controller').send('cancel');
        }
      }
    }
  });
});
define("netconfig/routes/lanconf/index", ["exports", "ember"], function (exports, _ember) {
  exports["default"] = _ember["default"].Route.extend({
    beforeModel: function beforeModel(transition) {
      this.transitionTo("lanconf/accesslist");
    },
    model: function model() {},
    setupController: function setupController(controller, model) {}
  });
});
define('netconfig/routes/lanconf/interfaces/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      var temp = [],
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "LAN").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      controller.set('content', model);
      controller.set('types', ['standard', 'extended']);
      controller.set('isPodTypeSelected', false);
      controller.set('podhosts', []);

      _ember['default'].run.schedule("afterRender", function () {
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition() {
        var ctrl = this.get('controller');
        ctrl.init();
        var formName = ctrl.get("formName");
        ctrl.set("pods", []);
        if (formName != null) {
          var cancelFun = "cancel" + formName;
          ctrl.send(cancelFun);
        }
        ctrl.set('pageMeta.offset', 0);
      }
    }
  });
});
define('netconfig/routes/lanconf/osupdate/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.controllerFor('lanconf').set('sub', true);
      $('.lan-sub').addClass('lan-highlight');
      $("input[type='file']").css("opacity", 1);
    },
    model: function model() {
      var self = this;
      return this.store.getJSON('get_appservers/').then(function (res) {
        return self.store.getJSON('router/').then(function (appres) {
          return { res: res, appres: appres };
        }, function (err) {
          (0, _netconfigUtilsNotify.customNotify)("error", "Error Fetching Data");
          console.log(err);
        });
      }, function (err) {
        console.log(err);
      });
    },
    setupController: function setupController(controller, model) {
      console.log(model);
      controller.set("content", model.appres.data);
      controller.set("appservers", model.res.appservers);
      controller.setDevices();
      controller.pageFunctions();
    },
    actions: {
      willTransition: function willTransition() {
        this.controllerFor('lanconf').set('sub', false);
        $('.lan-sub').removeClass('.lan-highlight');
        $("input[type='file']").css("opacity", 0);
        this.controller.set('fLeaf', []);
        this.controller.set('leaf', []);
        this.controller.set('superSpine', []);
        this.controller.set('spine', []);
        this.controller.set('CVX', []);
        this.controller.stopPolling();
      }
    }
  });
});
define('netconfig/routes/lanconf/osupdate/mlag', ['exports', 'netconfig/utils/notify'], function (exports, _netconfigUtilsNotify) {
  exports['default'] = Ember.Route.extend({

    update: false,

    beforeModel: function beforeModel(param1, param2) {
      this.controllerFor('lanconf').set('sub', true);
    },
    model: function model(param1, transition, param2) {
      var self = this;
      return this.store.getJSON('dc/').then(function (resDC) {
        console.log('res:: ', resDC);
        return self.store.getJSON('leafpair/?dc=' + resDC.data[0].attributes.name).then(function (res) {
          return res;
        }, function (err) {
          console.log(err);
        });
      }, function (err) {});
    },
    setupController: function setupController(controller, model) {
      return self.get('store').getJSON('osupdate-lock/').then(function (resLock) {

        controller.active();
        controller.set("allcontent", model.data);
        controller.set("content", model.data);
        controller.set("devices", null);
        controller.updateImageVar();
        controller.pageFunctions();

        if (!(resLock instanceof Array)) if (resLock.lock.status) {
          var user = controller.get('appCtrl.user');
          if (user.username == resLock.app_user) {
            // controller.active()
            // controller.set("content", model.data)
            // controller.updateImageVar()
            controller.set('session_id', resLock.session_id);
            controller.set('isUpdating', true);
            controller.updateStatus();
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', resLock.app_user + " running the os update task.");
            transition.abort();
          }
        }
      });
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.get('isUpdating')) {
          var r = confirm('Task is running. Are you sure?');
          if (r != true) {
            transition.abort();
            return false;
          }
        }
        this.controllerFor('lanconf').set('sub', false);
        $('.lan-sub .item.mlag').removeClass('active');
        this.controller.stopPolling();
      }
    }
  });
});
define('netconfig/routes/lanconf/osupdate/spine', ['exports', 'netconfig/utils/notify'], function (exports, _netconfigUtilsNotify) {
  exports['default'] = Ember.Route.extend({
    beforeModel: function beforeModel() {
      this.controllerFor('lanconf').set('sub', true);
    },
    model: function model() {
      return this.store.getJSON('router/').then(function (res) {
        return res;
      }, function (err) {
        console.log(err);
      });
    },
    setupController: function setupController(controller, model) {
      return self.get('store').getJSON('osupdate-lock/').then(function (resLock) {
        controller.active();
        controller.set('content', model.data);
        controller.deviceType();
        controller.updateImageVar();
        controller.pageFunctions();

        if (!(resLock instanceof Array)) if (resLock.lock.status) {
          var user = controller.get('appCtrl.user');
          if (user.username == resLock.app_user) {
            controller.set('session_id', resLock.session_id);
            controller.set('isUpdating', true);
            controller.updateStatus();
          } else {
            (0, _netconfigUtilsNotify.customNotify)('error', resLock.app_user + " running the os update task.");
            transition.abort();
          }
        }
      });
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.get('isUpdating')) {
          var r = confirm('Task is running. Are you sure?');
          if (r != true) {
            transition.abort();
            return false;
          }
        }
        this.controllerFor('lanconf').set('sub', false);
        $('.lan-sub .item.spine').removeClass('active');
        this.controller.set('spine', []);
        this.controller.set('superSpine', []);
        this.controller.set('CVX', []);
        this.controller.stopPolling();
      }
    }
  });
});
define('netconfig/routes/lanconf/osupdate/updatelist', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    beforeModel: function beforeModel(param1, param2) {
      this.controllerFor('lanconf').set('sub', true);
    },

    model: function model() {
      return this.store.getJSON('osupdatelist/', { limit: 30, offset: 0 }).then(function (res) {
        return res;
      }, function (err) {
        console.log(err);
      });
    },

    setupController: function setupController(controller, model) {
      console.log("model@@@@@@@");
      console.log(model);
      controller.set("content", model.data);
      controller.active();
    },

    actions: {
      willTransition: function willTransition(transition) {
        var pageMeta = this.controller.get('pageMeta');
        pageMeta.limit = 30;
        pageMeta.offset = 30;

        this.controllerFor('lanconf').set('sub', false);
        $('.lan-sub .item.updatelist').removeClass('active');
      }
    }
  });
});
define('netconfig/routes/lanconf/wanaccesslist/extended', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      console.log("Reached extended model");
    },
    setupController: function setupController(controller, model) {
      controller.set('action', ['permit', 'deny']);
      controller.set('protocol', ['tcp', 'udp', 'icmp', 'ip']);
      controller.set('log', ['True', 'False']);
      controller.set('config', [{ 'id': 1, 'hidepcl': true }]);
      controller.setdefault();
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (!(transition.targetName == 'lanconf/wanaccesslist.index' || transition.targetName == 'lanconf/wanaccesslist.standard' || transition.targetName == 'lanconf/wanaccesslist.extended')) {
          console.log("Deleting lanconf from extended!");
          var controller = this.controllerFor('lanconf');
          delete controller['credentials'];
        }
        this.get('controller').send('willcancel');
      }
    }
  });
});
define('netconfig/routes/lanconf/wanaccesslist/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      // console.log("Inside accesslist index model!")
      var self = this;
      var temp = [],
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "WAN").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },

    setupController: function setupController(controller, model) {

      this.get('store').getJSON('wan_devices/').then(function (resp) {

        var temp = {};
        var temp2 = [];
        for (var i = 0; i < resp.length; i++) {
          temp[resp[i].name] = [];
          temp[resp[i].name].push(resp[i].name);
          temp[resp[i].name].push(resp[i].host);
          temp2.push(temp[resp[i].name]);
        }
        self.set("testdata", true);

        controller.set('wandata', temp2);
      }, function (err) {
        (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
        self.set('isLoading', false);
      });

      controller.set('content', model);
      controller.set('types', ['standardACL', 'extendedACL']);
      controller.set('isPodTypeSelected', false);
      controller.set('podhosts', []);
      controller.set('testdata', true);

      _ember['default'].run.schedule("afterRender", function () {
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (!(transition.targetName == 'lanconf/wanaccesslist.index' || transition.targetName == 'lanconf/wanaccesslist.standard' || transition.targetName == 'lanconf/wanaccesslist.extended')) {
          console.log("deleting lanconf from index!");
          var controller = this.controllerFor('lanconf');
          delete controller['credentials'];
        }
      }
    }
  });
});
define('netconfig/routes/lanconf/wanaccesslist/standard', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      console.log("Reached std model!");
    },
    setupController: function setupController(controller, model) {
      controller.set('action', ['permit', 'deny']);
      controller.set('log', ['True', 'False']);
      controller.set('config', [{ id: 1 }]);
      controller.setdefault();
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (!(transition.targetName == 'lanconf/wanaccesslist.index' || transition.targetName == 'lanconf/wanaccesslist.standard' || transition.targetName == 'lanconf/wanaccesslist.extended')) {
          console.log("Deleting lanconf from standard!");
          var controller = this.controllerFor('lanconf');
          delete controller['credentials'];
        }
        this.get('controller').send('willcancel');
      }
    }
  });
});
define('netconfig/routes/lanconf/wancicd/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      var temp = [],
          data = {},
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "WAN_CICD").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc, features: res.data.resp, custom_template: res.data.custom_template, imp: res.data.imp_key };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      controller.set('content', model);
      controller.set('types', ['standardACL', 'extendedACL']);
      controller.set('isPodTypeSelected', false);
      controller.set('podhosts', []);

      _ember['default'].run.schedule('afterRender', function () {
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition(transition) {},
      reloadPage: function reloadPage() {
        this.refresh();
      }
    }
  });
});
define('netconfig/routes/lanconf/wancommand/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      var temp = [],
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "WAN").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      this.get('store').getJSON('wan_devices/').then(function (resp) {

        var temp = {};
        var temp2 = [];
        for (var i = 0; i < resp.length; i++) {
          temp[resp[i].name] = [];
          temp[resp[i].name].push(resp[i].name);
          temp[resp[i].name].push(resp[i].host);
          temp2.push(temp[resp[i].name]);
        }

        controller.set('wandata', temp2);
      }, function (err) {
        (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
        self.set('isLoading', false);
      });
      controller.set('content', model);
      controller.initEditor();
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.get('controller').get('isRouterConnected')) {
          this.get('controller').send('cancel');
        }
      },
      reloadPage: function reloadPage() {
        this.refresh();
      }
    }
  });
});
define('netconfig/routes/lanconf/waninterfaces/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      var temp = [],
          isAdminAcc = false;
      return this.store.getJSON('podIps/?type=' + "WAN").then(function (res) {
        return self.store.getJSON('get_approver/').then(function (ares) {
          if (ares.data[0] === "super_admin") {
            isAdminAcc = true;
            temp = ares.data.slice(1);
          } else {
            isAdminAcc = false;
            temp = ares.data;
          }
          return { routers: res.data.routers, approver: temp, isAdminAccount: isAdminAcc };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      this.get('store').getJSON('wan_devices/').then(function (resp) {

        var temp = {};
        var temp2 = [];
        for (var i = 0; i < resp.length; i++) {
          temp[resp[i].name] = [];
          temp[resp[i].name].push(resp[i].name);
          temp[resp[i].name].push(resp[i].host);
          temp2.push(temp[resp[i].name]);
        }

        controller.set('wandata', temp2);
      }, function (err) {
        (0, _netconfigUtilsNotify.customNotify)('error', "Could not login.");
        self.set('isLoading', false);
      });
      controller.set('content', model);
      controller.set('types', ['standard', 'extended']);
      controller.set('isPodTypeSelected', false);
      controller.set('podhosts', []);

      _ember['default'].run.schedule("afterRender", function () {
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition() {
        var ctrl = this.get('controller');
        ctrl.init();
        var formName = ctrl.get("formName");
        ctrl.set("pods", []);
        if (formName != null) {
          var cancelFun = "cancel" + formName;
          ctrl.send(cancelFun);
        }
        ctrl.set('pageMeta.offset', 0);
      }
    }
  });
});
define('netconfig/routes/login', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        redirect: function redirect() {
            if (APP_META.isLogin) {
                this.transitionTo('monitoring.inventory');
            }
        },
        setupController: function setupController(controller) {
            if (!APP_META.isLogin) {
                controller.set('appCtrl.login', false);
            } else {
                controller.set('appCtrl.login', true);
            }
        }
    });
});
define("netconfig/routes/monitoring/index", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        beforeModel: function beforeModel(transition) {

            this.transitionTo("monitoring.inventory");
        },
        model: function model() {

            console.log("model.");
        },
        setupController: function setupController(controller, model) {
            _ember["default"].run.schedule('afterRender', function () {
                $('.moni').find('a').addClass('active');
            });
        }
    });
});
define('netconfig/routes/monitoring/inventory', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      return this.store.getJSON("../get_user/").then(function (resUser) {

        if (resUser.is_staff) {
          return self.store.getJSON('router/').then(function (res) {
            return self.store.getJSON('dc/').then(function (resDc) {
              return self.store.getJSON("get_account_info/").then(function (Apres) {
                if (Apres.data.attributes.approver == 3 || Apres.data.attributes.approver == 4) {
                  Apres.data.attributes["toShow"] = false;
                } else {
                  Apres.data.attributes["toShow"] = true;
                }

                return { userData: resUser, router: res, dcInfo: resDc, approvers: Apres };
              }, function (err) {
                console.log(err);
              });
            }, function (err) {
              console.log(err);
            });
          }, function (err) {
            console.log(err);
          });
        } else {
          return self.store.getJSON('dc/').then(function (resDc) {
            return { userData: resUser, dcInfo: resDc };
          }, function (err) {
            console.log(err);
          });
        }
      }, function (err) {
        (0, _netconfigUtilsNotify.customNotify)("error", "Error Fetching Data");
      });
    },
    setupController: function setupController(controller, model) {
      controller.set("user", model.userData);
      controller.set('dcInfo', model.dcInfo.data);

      if (model.userData.is_staff) {
        controller.set('content', model.router);

        model.router['category'].unshift("All");
        model.router['podtype'].unshift("All");
        model.router['devicetype'].unshift("All");
        controller.set('category', ['All', 'Super spine', 'Spine', 'Leaf', 'Service Leaf', 'P2P Leaf', 'CVX'].filter(function (a) {
          return model.router['category'].indexOf(a) >= 0;
        }));
        controller.set('pod', ['All', 'Super spine', 'Pod 1', 'Pod 2', 'Pod 3', 'Pod 4'].filter(function (a) {
          return model.router['podtype'].indexOf(a) >= 0;
        }));
        controller.set('type', ['All', 'LAN', 'WAN'].filter(function (a) {
          return model.router['devicetype'].indexOf(a) >= 0;
        }));
        controller.set('allcontent', model.router['data']);
        controller.set('content', model.router['data']);
        controller.set("canShow", model.approvers["data"]["attributes"]);
      }

      controller.get('appCtrl').setUser();

      _ember['default'].run.schedule("afterRender", function () {
        $('.moni').find('a').addClass('active');
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition() {
        $('.moni').find('a').removeClass('active');
      }
    }
  });
});
define('netconfig/routes/monitoring/telemetry', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      return this.store.getJSON('router/').then(function (res) {

        return self.store.getJSON('grafana_alert/').then(function (grafana_res) {
          return { res: res, grafana_res: grafana_res };
        }, function (err) {
          self.transitionTo('error.unauthorized');
        });
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      // console.log("MODELSSSSS DATA")
      // console.log(model.grafana_res.data)
      controller.set('fieldTypes', model.grafana_res.data);
      controller.set('dcInfo', model.res.data);
      controller.get('appCtrl').setUser();

      _ember['default'].run.schedule("afterRender", function () {
        $('.moni').find('a').addClass('active');
        controller.send('onLoad');
      });
    },
    actions: {
      willTransition: function willTransition() {
        $('.moni').find('a').removeClass('active');
      }
    }

  });
});
define('netconfig/routes/mtrprofileview', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('mtr_view/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        },
        actions: {
            willTransition: function willTransition(transition) {
                var ctrl = this.get('controller');
                ctrl.setProperties({ 'isShowTrace': false });
            }
        }
    });
});
define('netconfig/routes/myservices', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Route.extend({
        beforeModel: function beforeModel(transition) {

            var self = this;

            return this.store.getJSON('instances/get_services/').then(function (res) {
                console.log("inside get services model", res['data']['data']);
                var service_id = "";
                if (res.data.data.length == 0) {
                    self.transitionTo('myservices.service-notfound');
                } else {

                    service_id = res['data']['data'][0].service_id;
                    self.transitionTo('myservices.index', service_id);
                }
            })['catch'](function (err) {
                self.transitionTo('error.unauthorized');
            });
        },

        model: function model() {
            var self = this;
            return this.store.getJSON('instances/get_services/').then(function (res) {

                if (res.data.length == 0) {

                    self.transitionTo('myservices.service-notfound');
                } else {
                    return res;
                }
            }, function (err) {
                self.transitionTo('error.unauthorized');
            });
        },

        setupController: function setupController(controller, model) {

            controller.set('servicecontent', model['data']['data']);
        }
    });
});
define('netconfig/routes/myservices/add', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {
            return param.id;
        },
        setupController: function setupController(controller, model) {
            console.log("service id is " + model);
            controller.set('serviceid', model);
            var serviceid = controller.get('serviceid');
            _ember['default'].run.schedule('afterRender', function () {
                $('.' + serviceid).find('a').addClass('active');
            });
        }
    });
});
define("netconfig/routes/myservices/edit", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({

        queryParams: {

            instancerow: {}
        },

        model: function model(param) {

            var instancerow = JSON.parse(param.instancerow);
            console.log("instancerow is>>>>>>>", instancerow);
            var data = { "instance_id": instancerow[0]['instance_id'] };
            var ipcontent = this.store.getJSON('instances/get_instance_iptables/', data);

            return _ember["default"].RSVP.hash({
                "ipcontent": ipcontent,
                "instancerow": instancerow,
                "serviceid": param.serviceid
            });
        },
        setupController: function setupController(controller, model) {

            console.log('instance content is', model["instancerow"]);

            console.log("ip content inside model!!!!!!", model['ipcontent']['data']['data']['rules']);
            if (model['ipcontent']['data']['data']['rules'] == null) {
                console.log("inside null!!!!!!!!!!!!");
                controller.set('ipcontent', { "rules": [] });
                controller.set('editcontent', {});
            } else {
                controller.set('ipcontent', model['ipcontent']['data']['data']);
                controller.set('editcontent', model['ipcontent']['data']['data']['rules']);
            }
            controller.set('instancecontent', model["instancerow"][0]);
            controller.set('serviceid', model['serviceid']);
            controller.set('instanceid', model['instancerow'][0]['instance_id']);

            var serviceid = controller.get('serviceid');
            _ember["default"].run.schedule('afterRender', function () {
                $('.' + serviceid).find('a').addClass('active');
            });
        }
    });
});
define('netconfig/routes/myservices/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {

            var self = this;

            console.log(param.id);
            var data = { "service_id": param.id };

            return this.store.getJSON('instances/get_service_instances/', data).then(function (res) {
                console.log("Response services");
                console.log(res);
                if (res.data.data.length == 0) {

                    self.transitionTo('myservices.instance-notfound', param.id);
                } else {
                    return [res, param.id];
                }
                //customNotify("success","200: "+res['data']['msg'])
                return [res, param.id];
            }, function (err) {
                (0, _netconfigUtilsNotify.customNotify)('error', "500: " + err['errors']['msg']);
                self.transitionTo('error.unauthorized');
            });
        },
        setupController: function setupController(controller, model) {

            console.log("instancecontent is", model[0]['data']['data']);

            if (model[0]['data']['data'].length != 0) {
                controller.set('instancecontent', model[0]['data']['data']);
            } else {
                // controller.set('nocontent',true)
            }

            controller.set('serviceid', model[1]);

            var serviceid = controller.get('serviceid');
            _ember['default'].run.schedule('afterRender', function () {
                $('.' + serviceid).find('a').addClass('active');
            });
        }

    });
});
define('netconfig/routes/myservices/instance-notfound', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({

        model: function model(param) {
            return param.serviceid;
        },
        setupController: function setupController(controller, model) {

            console.log("service id is " + model);
            controller.set('serviceid', model);

            var serviceid = controller.get('serviceid');
            _ember['default'].run.schedule('afterRender', function () {
                $('.' + serviceid).find('a').addClass('active');
            });
        }

    });
});
define('netconfig/routes/myservices/iptables/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({

    queryParams: {
      test: {}
    },
    model: function model(param) {

      console.log("param!!!!!!!!!!!!!", param.serviceid);

      var self = this;

      var data = { "instance_id": param.instanceid };
      return this.store.getJSON('instances/get_instance_iptables/', data).then(function (res) {

        if ((res.data.data.rules == null || res.data.data.rules.length == 0) && param.test != 1) {

          self.transitionTo('myservices.iptables.instanceiptables-notfound', param.serviceid, param.instanceid);
        } else {
          return _ember['default'].RSVP.hash({
            "res": res,
            "param": param
          });
        }
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {

      if (model['res']['data']['data']['rules'] === null || model['res']['data']['data']['rules'].length === 0) {
        controller.set('instanceipcontent', []);
      } else {
        controller.set('instanceipcontent', model['res']['data']['data']['rules']);
      }

      console.log("FORM DATA");
      console.log(model['res']['data']['data']);

      if (model['res']['data']['data']['rules'] == null) {
        controller.set('nullcontent', true);
      } else {
        controller.set('nullcontent', false);
      }

      controller.set('nullinput', false);
      controller.set('nulloutput', false);
      controller.set('nullforward', false);

      controller.set('ipv4', true);
      controller.set('ipv6', false);

      if (!model['res']['data']['data']['ipv4_type']) {
        controller.set('ipv4', false);
        controller.set('ipv6', true);
      }

      if (controller.get('nullcontent') == false) {
        var alllst = model['res']['data']['data']['rules'][0];
        //console.log(alllst)

        for (var rulelst in alllst) {
          var ruleitem = alllst[rulelst][0]['rule_list'];
          // console.log(rulelst)
          //console.log(ruleitem)
          if (ruleitem.length > 0) {
            continue;
          }
          if (rulelst === "input_list") {
            controller.set('nullinput', true);
          } else if (rulelst === "output_list") {
            controller.set('nulloutput', true);
          } else {
            controller.set('nullforward', true);
          }
        }

        var form_org = model['res']['data']['data']['rules'];

        for (var ruleslst in form_org[0]) {

          var properties = Object.keys(form_org[0][ruleslst][0]);

          if (properties.indexOf('default_policy') < properties.indexOf('rule_list')) {
            continue;
          }

          // console.log(form_org[0][ruleslst][0])
          if (ruleslst === "input_list") {
            if (controller.get('nullinput')) {
              continue;
            }
          } else if (ruleslst === "output_list") {
            if (controller.get('nulloutput')) {
              continue;
            }
          } else {
            if (controller.get('nullforward')) {
              continue;
            }
          }
          var defaultPolicy = form_org[0][ruleslst][0].default_policy;
          var ruleList = form_org[0][ruleslst][0].rule_list;

          delete form_org[0][ruleslst][0].default_policy;
          delete form_org[0][ruleslst][0].rule_list;

          form_org[0][ruleslst][0].default_policy = defaultPolicy;
          form_org[0][ruleslst][0].rule_list = ruleList;
        }
      }

      controller.set('instanceid', model['param']['instanceid']);
      controller.set('serviceid', model['param']['serviceid']);
      controller.set('form_data', model['res']['data']['data']['rules']);
      controller.set('form_default', model['res']['data']['data']['formDetails']['form_default']);
      controller.set('metaKeys', model['res']['data']['data']['formDetails']["metaKeys"]);

      var serviceid = controller.get('serviceid');
      _ember['default'].run.schedule('afterRender', function () {
        $('.' + serviceid).find('a').addClass('active');
      });

      controller.send("test");
      controller.send("onLoad");
    }
  });
});
define('netconfig/routes/myservices/iptables/instanceiptables-notfound', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {

            return [param.serviceid, param.instanceid];
        },
        setupController: function setupController(controller, model) {

            console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!! " + model[0]);
            controller.set('instanceid', model[1]);
            controller.set('serviceid', model[0]);

            var serviceid = controller.get('serviceid');
            _ember['default'].run.schedule('afterRender', function () {
                $('.' + serviceid).find('a').addClass('active');
            });
        }
    });
});
define('netconfig/routes/myservices/service-notfound', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('netconfig/routes/notfound', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("netconfig/routes/oauth2callback", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        model: function model(params, transition) {},
        setupController: function setupController(controller, model) {
            console.log("calling Controller.");
            controller.viewParam();
        }
    });
});
define("netconfig/routes/settings", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({

        model: function model() {
            return this.store.getJSON("../get_user/");
        },

        setupController: function setupController(controller, model) {
            controller.set("user", model);
        }
    });
});
define('netconfig/routes/settings/admin/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({

        model: function model() {
            return this.store.getJSON('con_admin/');
        },

        setupController: function setupController(controller, model) {
            controller.set('content', model);
        }
    });
});
define('netconfig/routes/settings/apikey', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('networkmon/agent_authtoken/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/settings/commits', ['exports', 'ember', 'ember-infinity/mixins/route', 'netconfig/utils/notify'], function (exports, _ember, _emberInfinityMixinsRoute, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var self = this;
      return this.store.getJSON('commits/', { limit: 30, offset: 0 }).then(function (res) {
        return res;
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      console.log(model);
      controller.set('content', model.data);
    },
    actions: {
      willTransition: function willTransition() {
        var pageMeta = this.controller.get('pageMeta');
        pageMeta.limit = 30;
        pageMeta.offset = 30;
      }
    }
  });
});
define("netconfig/routes/settings/index", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        beforeModel: function beforeModel(transition) {
            this.transitionTo("settings/routers");
        },
        model: function model() {
            console.log("model.");
        },
        setupController: function setupController(controller, model) {}
    });
});
define('netconfig/routes/settings/inlinefilters/add', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('dc/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', { dclst: model.data });
        }
    });
});
define('netconfig/routes/settings/inlinefilters/edit', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {
            var self = this;
            return this.store.getJSON('inlinefilter/' + param.id + '/').then(function (ires) {
                return self.store.getJSON('dc/').then(function (dres) {
                    var data = ires;
                    data.data.dclst = dres.data;
                    return data;
                });
            });
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/settings/inlinefilters/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('inlinefilter/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/settings/mtrprofiles/add', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('router/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/settings/mtrprofiles/edit', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {
            return this.store.getJSON('mtrprofile/' + param.id + '/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/settings/mtrprofiles/geo/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('api_location/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
            controller.initialize();
        }
    });
});
define('netconfig/routes/settings/mtrprofiles/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('mtrprofile/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/settings/routers/add', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            var self = this;
            return self.store.getJSON('dc/').then(function (dres) {
                return self.store.getJSON('deviceinfo/').then(function (dvres) {
                    var data = {};
                    data.dclst = dres.data;
                    data.dvlst = dvres.data;
                    return data;
                });
            });
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model);
        }
    });
});
define('netconfig/routes/settings/routers/edit', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {
            var self = this;
            console.log(param.id);
            return this.store.getJSON('router/' + param.id + '/').then(function (rres) {
                return self.store.getJSON('dc/').then(function (dres) {
                    return self.store.getJSON('deviceinfo/').then(function (dvres) {
                        var data = rres;
                        data.dclst = dres.data;
                        data.dvlst = dvres.data;
                        return data;
                    });
                });
            });
        },
        setupController: function setupController(controller, model) {
            console.log(model);
            controller.set('content', model);
        }
    });
});
define('netconfig/routes/settings/routers/index', ['exports', 'ember', 'netconfig/utils/notify'], function (exports, _ember, _netconfigUtilsNotify) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            var self = this;
            return this.store.getJSON('router/').then(function (res) {
                return res;
            }, function (err) {
                self.transitionTo('error.unauthorized');
            });
        },

        setupController: function setupController(controller, model) {
            model['category'].unshift("All");
            model['podtype'].unshift("All");
            model['devicetype'].unshift("All");
            controller.set('category', ['All', 'Super spine', 'Spine', 'Leaf', 'Service Leaf', 'P2P Leaf', 'CVX'].filter(function (a) {
                return model['category'].indexOf(a) >= 0;
            }));
            controller.set('pod', ['All', 'Super spine', 'Pod 1', 'Pod 2', 'Pod 3', 'Pod 4'].filter(function (a) {
                return model['podtype'].indexOf(a) >= 0;
            }));
            controller.set('type', ['All', 'LAN', 'WAN'].filter(function (a) {
                return model['devicetype'].indexOf(a) >= 0;
            }));
            controller.set('allcontent', model['data']);
            model["data"].forEach(function (key, index) {
                if (key["bgp_dc_status_set"].length !== 0) {
                    var startTime = new Date(key["bgp_dc_status_set"][0]["updated"]);
                    startTime = Date.parse(startTime);
                    var h = new Date(startTime).toLocaleString('en-US', { timeZone: 'IST' });
                    key["bgp_dc_status_set"][0]["updated"] = h;
                }
            });
            controller.set('content', model['data']);
            controller.pollingStatus();
        }
    });
});
define('netconfig/routes/settings/smtp', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('smtpsettings/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
            _ember['default'].run.schedule("afterRender", function () {
                controller.send('updateSMTPData');
            });
        }
    });
});
define('netconfig/routes/settings/stopbgpadv', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('wan_devices/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model);
            // Ember.run.schedule("afterRender", function() {
            //     controller.send('updateSMTPData')
            // })
        },
        actions: {
            willTransition: function willTransition() {
                var ctrl = this.get('controller');
                ctrl.send('cancel');
            }
        }
    });
});
define('netconfig/routes/settings/uncommits', ['exports', 'ember', 'ember-infinity/mixins/route', 'netconfig/utils/notify'], function (exports, _ember, _emberInfinityMixinsRoute, _netconfigUtilsNotify) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.getJSON('uncommits/', { limit: 30, offset: 0 }).then(function (res) {
        return res;
      }, function (err) {
        self.transitionTo('error.unauthorized');
      });
    },
    setupController: function setupController(controller, model) {
      console.log(model);
      controller.set('content', model.data);
    },
    actions: {
      willTransition: function willTransition() {
        var pageMeta = this.controller.get('pageMeta');
        pageMeta.limit = 30;
      }
    }
  });
});
define('netconfig/routes/settings/zohoserviceview/add', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('netconfig/routes/settings/zohoserviceview/edit', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(param) {
            return this.store.getJSON('zohoservices/' + param.id + '/');
        },
        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define('netconfig/routes/settings/zohoserviceview/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.getJSON('zohoservices/');
        },

        setupController: function setupController(controller, model) {
            controller.set('content', model.data);
        }
    });
});
define("netconfig/routes/testflow/index", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        beforeModel: function beforeModel(transition) {
            this.transitionTo("testflow.workflow");
        },
        model: function model() {
            console.log("model.");
        },
        setupController: function setupController(controller, model) {}
    });
});
define('netconfig/routes/testflow/pipeline', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {},
        setupController: function setupController(controller, model) {

            _ember['default'].run.schedule("afterRender", function () {
                controller.send('onLoad');
            });
        },
        actions: {}
    });
});
define('netconfig/routes/testflow/workflow', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        isAdmin: false,
        model: function model() {
            return this.store.getJSON('workflow/', { from: moment().startOf('day').format('YYYY-MM-DD HH:mm:ss'), to: moment().format('YYYY-MM-DD HH:mm:ss'), status: 'all', offset: 0, limit: 100 });
        },
        setupController: function setupController(controller, model) {
            var data = [];
            controller.set('content', model.data);
            console.log(model.data);
            var pageMeta = controller.get('pageMeta');
            pageMeta.from = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss');
            pageMeta.to = moment().format('YYYY-MM-DD HH:mm:ss');

            _ember['default'].run.schedule("afterRender", function () {
                controller.send("workflowOnLoad");
            });
        },

        actions: {
            willTransition: function willTransition() {
                var ctrl = this.get('controller');
                ctrl.set('pageMeta', { offset: 100, limit: 100, from: '', to: '', status: 'all' });
                ctrl.setProperties({ hasMore: true, approver_comment: "", isLoading: false, routerData: {}, parseData: [] });
            }
        }
    });
});
define('netconfig/routes/workflow', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        isAdmin: false,
        model: function model() {
            return this.store.getJSON('workflow/', { from: moment().startOf('day').format('YYYY-MM-DD HH:mm:ss'), to: moment().format('YYYY-MM-DD HH:mm:ss'), status: 'all', offset: 0, limit: 100 });
        },
        setupController: function setupController(controller, model) {
            var data = [];
            controller.set('content', model.data);
            console.log(model.data);
            var pageMeta = controller.get('pageMeta');
            pageMeta.from = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss');
            pageMeta.to = moment().format('YYYY-MM-DD HH:mm:ss');

            _ember['default'].run.schedule("afterRender", function () {
                controller.send("workflowOnLoad");
            });
        },

        actions: {
            willTransition: function willTransition() {
                var ctrl = this.get('controller');
                ctrl.set('pageMeta', { offset: 100, limit: 100, from: '', to: '', status: 'all' });
                ctrl.setProperties({ hasMore: true, approver_comment: "", isLoading: false, routerData: {}, parseData: [] });
            }
        }
    });
});
define('netconfig/routes/zohoservices', ['exports', 'ember'], function (exports, _ember) {
	exports['default'] = _ember['default'].Route.extend({
		model: function model() {
			return this.store.getJSON('zoho_view/');
		},
		setupController: function setupController(controller, model) {
			controller.set('content', model);
			controller.set('isPoll', true);
			controller.processZSRoute();
		},
		actions: {
			willTransition: function willTransition() {
				var ctrl = this.get('controller');
				ctrl.stopPoll();
				ctrl.setProperties({ 'content': [], 'isPoll': false });
			}
		}
	});
});
define('netconfig/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('netconfig/services/app-meta', ['exports'], function (exports) {
	var _Ember = Ember;
	var on = _Ember.on;
	var computed = _Ember.computed;
	var and = _Ember.computed.and;
	exports['default'] = Em.Service.extend({
		initialize: on('init', function () {
			this.setProperties(window.APP_META);
		})
	});
});
define('netconfig/services/current-plan', ['exports', 'ember'], function (exports, _ember) {

  var APP_META = window.APP_META;
  // const {computed: { oneWay }} = Ember;

  exports['default'] = _ember['default'].Service.extend({
    initContent: (function () {
      this.setProperties(APP_META.subscription);
    }).on('init') //No I18N

    // isRecInvEnabled: oneWay('is_recurring_invoice_supported_plan'),

    // isBillsEnabled: oneWay('is_bills_supported_plan'),
    // isRecBillsEnabled: oneWay('is_bills_supported_plan'),
    // isVendorPmtEnabled: oneWay('is_bills_supported_plan'),
    // isVendorCreditsEnabled: oneWay('is_bills_supported_plan'),

    // isPOEnabled: oneWay('is_inventory_supported_plan'),
    // isSOEnabled: oneWay('is_inventory_supported_plan'),
    // isInventoryEnabled: oneWay('is_inventory_supported_plan'),

    // isUKInternationalTradeEnabled: oneWay('is_international_trade_supported_plan'),
    // isVatMossEnabled: oneWay('is_international_trade_supported_plan'),
    // isECSalesEnabled: oneWay('is_international_trade_supported_plan')

  });
});
/*$Id$*/
define('netconfig/services/current-user', ['exports', 'ember'], function (exports, _ember) {

  // const { computed: {not} } = Ember;

  exports['default'] = _ember['default'].Service.extend({
    initContent: (function () {
      this.setProperties(window.APP_META.user);
    }).on('init') //No I18N
  });
});
/*$Id$*/
define('netconfig/services/fullscreen', ['exports', 'ember-fullscreen/services/fullscreen'], function (exports, _emberFullscreenServicesFullscreen) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFullscreenServicesFullscreen['default'];
    }
  });
});
define('netconfig/services/modal-context', ['exports', 'ember'], function (exports, _ember) {

  /*
   * This property is used to set properties for modals such as modalSize, bkdrpCSS, closeOnEscFunc
   * and closeModal.
   *
   * These properties will be set in the actions in applicationRoute - `connectModal` and `closeModal`
   * and observed in modalView.
   *
   * Since the view instance cannot be accessed in routes, there is no way to set properties directly
   * in the view, therefore they are set and observed in a global variable.
   *
   * Earlier these properties were set in the global `ZB` object and observed from it.
   * But in test cases the `ZB` object won't be available, which results in an error.
   *
   * Refer [here](github.com/emberjs/ember.js/pull/2959#issuecomment-20497404) why view instance
   * cannot be accessed in routes
  */

  exports['default'] = _ember['default'].Service.extend({
    isModalLoading: false
  });
});
define('netconfig/services/moment', ['exports', 'ember', 'ember-moment/services/moment', 'netconfig/config/environment'], function (exports, _ember, _emberMomentServicesMoment, _netconfigConfigEnvironment) {
  var get = _ember['default'].get;
  exports['default'] = _emberMomentServicesMoment['default'].extend({
    defaultFormat: get(_netconfigConfigEnvironment['default'], 'moment.outputFormat')
  });
});
define("netconfig/services/notification", ["exports"], function (exports) {
	var _Ember = Ember;
	var on = _Ember.on;
	var computed = _Ember.computed;
	var and = _Ember.computed.and;
	exports["default"] = Em.Service.extend({
		ndata: [],
		addNotifi: function addNotifi() {},
		removeNotif: function removeNotif() {}
	});
});
define('netconfig/services/permission', ['exports', 'ember'], function (exports, _ember) {
  var on = _ember['default'].on;
  exports['default'] = _ember['default'].Service.extend({
    initializeContent: on('init', function () {
      //No I18N
      this.setProperties(window.APP_META.permission);
    })
  });
});
/*$Id$*/
define('netconfig/services/poll', ['exports', 'ember', 'ember-runloop', 'ember-array/utils'], function (exports, _ember, _emberRunloop, _emberArrayUtils) {
    exports['default'] = _ember['default'].Service.extend({
        init: function init() {
            this._super.apply(this, arguments);
            this.set('_polls', (0, _emberArrayUtils.A)([]));
        },
        willDestroy: function willDestroy() {
            this.stopAll();
        },
        addPoll: function addPoll(_ref) {
            var interval = _ref.interval;
            var callback = _ref.callback;
            var args = _ref.args;
            var label = _ref.label;
            var ids = _ref.ids;

            if (interval <= 1) {
                throw new Error('Polling interval must be greater than 1');
            }

            var handle = this._schedule(callback, interval);
            var poll = { handle: handle, callback: callback, interval: interval };
            if (label) {
                poll.label = label;
            }
            this._polls.pushObject(poll);
            return handle;
        },
        startPoll: function startPoll(oldHandle) {
            var newHandle = this._startPoll('handle', oldHandle);
            return newHandle;
        },
        startPollByLabel: function startPollByLabel(label) {
            var newHandle = this._startPoll('label', label);
            return newHandle;
        },
        stopPoll: function stopPoll(handle) {
            clearInterval(handle);
        },
        stopPollByLabel: function stopPollByLabel(label) {
            var poll = this._polls.findBy('label', label);
            if (poll) {
                this.stopPoll(poll.handle);
            }
        },
        stopAll: function stopAll() {
            var handles = this._polls.mapBy('handle');
            handles.forEach(this.stopPoll);
        },
        _schedule: function _schedule(fn, interval, args, status, pid) {
            return setInterval((0, _emberRunloop.bind)(this, fn), interval);
        },
        _startPoll: function _startPoll(key, value) {
            var poll = this._polls.findBy(key, value);
            if (poll) {
                var callback = poll.callback;
                var interval = poll.interval;

                var newHandle = this._schedule(callback, interval);
                return newHandle;
            } else {
                console.warn('No poll was found for ' + key + ' {$value}');
            }
        }
    });
});
define('netconfig/services/store', ['exports', 'ember', 'netconfig/adapters/application'], function (exports, _ember, _netconfigAdaptersApplication) {
  exports['default'] = _ember['default'].Service.extend({

    adapter: _netconfigAdaptersApplication['default'].create(),

    /**
      Use this method to make api requests which cannot be made through models
       makes adapter's ajax request
      returns a promise resolving to raw json payload
      deserialization should be handled at the caller
    */
    post: function post(url, data) {

      var params = {
        type: 'POST', //No I18N
        dataType: 'json', //No I18N
        data: data
      };
      return this.adapter.ajax(url, params);
    },
    put: function put(url, data) {

      var params = {
        type: 'PUT', //No I18N
        dataType: 'json', //No I18N
        data: data
      };
      return this.adapter.ajax(url, params);
    },
    reqPayLoad: function reqPayLoad(url, data, typ) {
      var params = {
        type: typ === undefined ? 'POST' : typ,
        url: url,
        contentType: 'application/vnd.api+json',
        data: JSON.stringify(data)
      };
      return this.adapter.ajax(url, params);
    },
    'delete': function _delete(url, data) {
      var params = {
        type: 'DELETE', //No I18N
        dataType: 'json', //No I18N
        data: data
      };
      return this.adapter.ajax(url, params);
    },
    getJSON: function getJSON(url, data) {

      var params = {
        type: 'GET', //No I18N
        dataType: 'json', //No I18N
        data: data
      };
      return this.adapter.ajax(url, params);
    },
    getBinary: function getBinary(url, data) {

      var params = {
        type: 'GET', //No I18N
        data: data,
        xhrFields: {
          responseType: 'blob'
        }
      };
      return this.adapter.ajax(url, params);
    },

    ajax: function ajax(url, params) {
      return this.adapter.ajax(url, params);
    }
  });
});
/*$Id$*/
define("netconfig/templates/admin", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "netconfig/templates/admin.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("Admin Page.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/admin_login", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/admin_login.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loginBg");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loginoverlay");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loginContainer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "logo");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "src", "/static/netconf/app/images/zoho_nocops.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "login");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "username");
        dom.setAttribute(el5, "class", "required");
        dom.setAttribute(el5, "autocomplete", "off");
        dom.setAttribute(el5, "placeholder", "Enter username");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "password");
        dom.setAttribute(el5, "name", "password");
        dom.setAttribute(el5, "class", "required");
        dom.setAttribute(el5, "autocomplete", "off");
        dom.setAttribute(el5, "placeholder", "Enter Password");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3, 3, 5]), 1, 1);
        return morphs;
      },
      statements: [["inline", "bs-primary", [], ["action", "login", "btn_name", "Login", "class", "loginBtn", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [15, 16], [15, 98]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("	");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["left"], ["user", ["subexpr", "@mut", [["get", "user", ["loc", [null, [2, 23], [2, 27]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 1], [2, 29]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 18
          }
        },
        "moduleName": "netconfig/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n	");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isShowLeft", ["loc", [null, [1, 6], [1, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["attribute", "class", ["concat", ["maincontainer ", ["subexpr", "unless", [["get", "isShowLeft", ["loc", [null, [4, 39], [4, 49]]], 0, 0, 0, 0], "poslft0Imp"], [], ["loc", [null, [4, 30], [4, 64]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "outlet", ["loc", [null, [5, 1], [5, 11]]], 0, 0, 0, 0], ["inline", "outlet", ["modal"], [], ["loc", [null, [7, 0], [7, 18]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/bandwidth/clients/add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 46
          }
        },
        "moduleName": "netconfig/templates/bandwidth/clients/add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "client-add", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 18], [1, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 37], [1, 44]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 46]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/bandwidth/clients/allagents", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 71
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Add Connection");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 12
            },
            "end": {
              "line": 10,
              "column": 59
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Summary");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 12
            },
            "end": {
              "line": 11,
              "column": 64
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("All Agents");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 28
                },
                "end": {
                  "line": 25,
                  "column": 28
                }
              },
              "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-edit");
              dom.setAttribute(el1, "title", "Edit Agent");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 28
              },
              "end": {
                "line": 26,
                "column": 28
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" \n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createAttrMorph(element2, 'title');
            morphs[2] = dom.createElementMorph(element2);
            morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "item.client_details.0.status", ["loc", [null, [22, 93], [22, 123]]], 0, 0, 0, 0], "nicon-enable", "nicon-disable"], [], ["loc", [null, [22, 88], [22, 156]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "title", ["concat", [["subexpr", "if", [["get", "item.client_details.0.status", ["loc", [null, [22, 170], [22, 200]]], 0, 0, 0, 0], "Click to disable", "Click to enable"], [], ["loc", [null, [22, 165], [22, 239]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["changeStatus", ["get", "item.client_details.0", ["loc", [null, [22, 55], [22, 78]]], 0, 0, 0, 0]], [], ["loc", [null, [22, 31], [22, 80]]], 0, 0], ["block", "link-to", ["bandwidth/clients.edit", ["get", "item.agent_address", ["loc", [null, [23, 64], [23, 82]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 28], [25, 40]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 32
                },
                "end": {
                  "line": 55,
                  "column": 33
                }
              },
              "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "align", "center");
              var el3 = dom.createTextNode("\n                                            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "tableAct");
              var el4 = dom.createTextNode("\n                                                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("i");
              dom.setAttribute(el4, "class", "nicon-delete");
              dom.setAttribute(el4, "title", "Delete Connection");
              dom.setAttribute(el4, "style", "vertical-align: middle;");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [11, 1, 1]);
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
              morphs[5] = dom.createElementMorph(element1);
              return morphs;
            },
            statements: [["content", "cdata.server_address", ["loc", [null, [44, 44], [44, 68]]], 0, 0, 0, 0], ["content", "cdata.isp", ["loc", [null, [45, 44], [45, 57]]], 0, 0, 0, 0], ["content", "cdata.protocol", ["loc", [null, [46, 44], [46, 62]]], 0, 0, 0, 0], ["content", "cdata.noOfSessions", ["loc", [null, [47, 44], [47, 66]]], 0, 0, 0, 0], ["content", "cdata.targetBandwidth", ["loc", [null, [48, 44], [48, 69]]], 0, 0, 0, 0], ["element", "action", ["deleteClient", ["get", "cdata", ["loc", [null, [51, 122], [51, 127]]], 0, 0, 0, 0], ["get", "item", ["loc", [null, [51, 128], [51, 132]]], 0, 0, 0, 0]], [], ["loc", [null, [51, 98], [51, 134]]], 0, 0]],
            locals: ["cdata"],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 33
                },
                "end": {
                  "line": 59,
                  "column": 33
                }
              },
              "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              dom.setAttribute(el1, "class", "nodatarow");
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "colspan", "6");
              dom.setAttribute(el2, "align", "center");
              var el3 = dom.createTextNode("No data available");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 16
              },
              "end": {
                "line": 62,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "cellpadding", "0");
            dom.setAttribute(el1, "class", "tablesub bandwidthTbl");
            dom.setAttribute(el1, "cellspacing", "0");
            dom.setAttribute(el1, "border", "0");
            dom.setAttribute(el1, "width", "100%");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            dom.setAttribute(el4, "width", "23%");
            var el5 = dom.createTextNode("Server Address");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            dom.setAttribute(el4, "width", "10%");
            var el5 = dom.createTextNode("ISP");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            dom.setAttribute(el4, "width", "10%");
            var el5 = dom.createTextNode("Protocol");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("No Of Parallel TCP Streams");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            dom.setAttribute(el4, "width", "10%");
            var el5 = dom.createTextNode("Bandwidth(G");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "style", "text-transform: lowercase;");
            var el6 = dom.createTextNode("bps");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(")");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            dom.setAttribute(el4, "width", "18%");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "item.client_details", ["loc", [null, [42, 40], [42, 59]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [42, 32], [59, 42]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createElement("span");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "locsub");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "fr lstAct");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "nicon-delete");
          dom.setAttribute(el4, "title", "Delete Agent");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" \n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element4, [0]);
          var element6 = dom.childAt(element4, [6]);
          var element7 = dom.childAt(element6, [1]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createElementMorph(element5);
          morphs[2] = dom.createMorphAt(element4, 2, 2);
          morphs[3] = dom.createMorphAt(dom.childAt(element4, [4]), 0, 0);
          morphs[4] = dom.createElementMorph(element7);
          morphs[5] = dom.createMorphAt(element6, 3, 3);
          morphs[6] = dom.createMorphAt(element3, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "unless", [["get", "item.isShowData", ["loc", [null, [18, 73], [18, 88]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [18, 64], [18, 129]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showFData", ["get", "item", ["loc", [null, [18, 47], [18, 51]]], 0, 0, 0, 0]], [], ["loc", [null, [18, 26], [18, 53]]], 0, 0], ["content", "item.agent_address", ["loc", [null, [18, 145], [18, 167]]], 0, 0, 0, 0], ["content", "item.location", ["loc", [null, [18, 191], [18, 208]]], 0, 0, 0, 0], ["element", "action", ["deleteAgent", ["get", "item", ["loc", [null, [20, 54], [20, 58]]], 0, 0, 0, 0]], [], ["loc", [null, [20, 31], [20, 60]]], 0, 0], ["block", "if", [["get", "item.client_details", ["loc", [null, [21, 34], [21, 53]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [21, 28], [26, 35]]]], ["block", "unless", [["get", "item.isShowData", ["loc", [null, [29, 26], [29, 41]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [29, 16], [62, 27]]]]],
        locals: ["item"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 66,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/bandwidth/clients/allagents.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Bandwidth");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "subHdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        dom.setAttribute(el1, "style", "top:90px;");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "inlinefView");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [0]);
        var element9 = dom.childAt(element8, [1, 1, 0]);
        var element10 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element9);
        morphs[1] = dom.createMorphAt(element8, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["block", "link-to", ["bandwidth/clients.add"], ["class", "addbtn"], 0, null, ["loc", [null, [6, 4], [6, 83]]]], ["block", "link-to", ["bandwidth/clients.summary"], [], 1, null, ["loc", [null, [10, 12], [10, 71]]]], ["block", "link-to", ["bandwidth/clients.allagents"], [], 2, null, ["loc", [null, [11, 12], [11, 76]]]], ["block", "each", [["get", "content", ["loc", [null, [16, 16], [16, 23]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [16, 8], [64, 17]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("netconfig/templates/bandwidth/clients/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 58
          }
        },
        "moduleName": "netconfig/templates/bandwidth/clients/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "client-add", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 18], [1, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 37], [1, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "isEdit", true], ["loc", [null, [1, 0], [1, 58]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/bandwidth/clients/summary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 71
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Add Connection");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 12
            },
            "end": {
              "line": 10,
              "column": 59
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Summary");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 12
            },
            "end": {
              "line": 11,
              "column": 64
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("All Agents");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 24
              },
              "end": {
                "line": 38,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Target:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Gbps");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Achieved:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Gbps");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Lost Percent:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("%");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 2]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 2]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5, 2]), 0, 0);
            return morphs;
          },
          statements: [["inline", "to-fixed", [["get", "cdata.udp.target_bw", ["loc", [null, [35, 62], [35, 81]]], 0, 0, 0, 0]], [], ["loc", [null, [35, 51], [35, 83]]], 0, 0], ["inline", "to-fixed", [["get", "cdata.udp.achieved_bw", ["loc", [null, [36, 64], [36, 85]]], 0, 0, 0, 0]], [], ["loc", [null, [36, 53], [36, 87]]], 0, 0], ["inline", "to-fixed", [["get", "cdata.udp.lost_percent", ["loc", [null, [37, 68], [37, 90]]], 0, 0, 0, 0]], [], ["loc", [null, [37, 57], [37, 92]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 24
              },
              "end": {
                "line": 40,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        -\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 24
              },
              "end": {
                "line": 48,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Latest:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Mbps");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Avg:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Mbps");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Min:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Mbps");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Max:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Mbps");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 2]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 2]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5, 2]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7, 2]), 0, 0);
            return morphs;
          },
          statements: [["inline", "to-fixed", [["get", "cdata.single_tcp_session.latest", ["loc", [null, [44, 62], [44, 93]]], 0, 0, 0, 0]], [], ["loc", [null, [44, 51], [44, 95]]], 0, 0], ["inline", "to-fixed", [["get", "cdata.single_tcp_session.average", ["loc", [null, [45, 59], [45, 91]]], 0, 0, 0, 0]], [], ["loc", [null, [45, 48], [45, 93]]], 0, 0], ["inline", "to-fixed", [["get", "cdata.single_tcp_session.minimum", ["loc", [null, [46, 59], [46, 91]]], 0, 0, 0, 0]], [], ["loc", [null, [46, 48], [46, 93]]], 0, 0], ["inline", "to-fixed", [["get", "cdata.single_tcp_session.maximum", ["loc", [null, [47, 59], [47, 91]]], 0, 0, 0, 0]], [], ["loc", [null, [47, 48], [47, 93]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 24
              },
              "end": {
                "line": 50,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        -\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 24
              },
              "end": {
                "line": 56,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Latest:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Mbps");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Streams:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 2]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 2]), 0, 0);
            return morphs;
          },
          statements: [["inline", "to-fixed", [["get", "cdata.multiple_tcp_session.bandwidth", ["loc", [null, [54, 62], [54, 98]]], 0, 0, 0, 0]], [], ["loc", [null, [54, 51], [54, 100]]], 0, 0], ["content", "cdata.multiple_tcp_session.no_of_tcp_streams", ["loc", [null, [55, 52], [55, 100]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 56,
                "column": 24
              },
              "end": {
                "line": 58,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        -\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child6 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 28
              },
              "end": {
                "line": 62,
                "column": 73
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("View TCP");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child7 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 28
              },
              "end": {
                "line": 63,
                "column": 73
              }
            },
            "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("View UDP");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 12
            },
            "end": {
              "line": 67,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "valign", "top");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "valign", "top");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "valign", "top");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "valign", "top");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "valign", "top");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "valign", "top");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "valign", "top");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "tableAct");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("  ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "cGray");
          var el5 = dom.createTextNode("|");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" \n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var element3 = dom.childAt(element0, [13, 1]);
          var morphs = new Array(10);
          morphs[0] = dom.createMorphAt(element1, 0, 0);
          morphs[1] = dom.createMorphAt(element1, 2, 2);
          morphs[2] = dom.createMorphAt(element2, 0, 0);
          morphs[3] = dom.createMorphAt(element2, 2, 2);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
          morphs[6] = dom.createMorphAt(dom.childAt(element0, [9]), 1, 1);
          morphs[7] = dom.createMorphAt(dom.childAt(element0, [11]), 1, 1);
          morphs[8] = dom.createMorphAt(element3, 1, 1);
          morphs[9] = dom.createMorphAt(element3, 5, 5);
          return morphs;
        },
        statements: [["content", "cdata.source_id.agent_address", ["loc", [null, [30, 37], [30, 70]]], 0, 0, 0, 0], ["content", "cdata.source_id.location", ["loc", [null, [30, 73], [30, 101]]], 0, 0, 0, 0], ["content", "cdata.destination_id.agent_address", ["loc", [null, [31, 37], [31, 75]]], 0, 0, 0, 0], ["content", "cdata.destination_id.location", ["loc", [null, [31, 78], [31, 111]]], 0, 0, 0, 0], ["content", "cdata.isp", ["loc", [null, [32, 37], [32, 50]]], 0, 0, 0, 0], ["block", "if", [["get", "cdata.udp", ["loc", [null, [34, 30], [34, 39]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [34, 24], [40, 31]]]], ["block", "if", [["get", "cdata.single_tcp_session", ["loc", [null, [43, 30], [43, 54]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [43, 24], [50, 31]]]], ["block", "if", [["get", "cdata.multiple_tcp_session", ["loc", [null, [53, 30], [53, 56]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [53, 24], [58, 31]]]], ["block", "link-to", ["bandwidth.tcp", ["get", "cdata.id", ["loc", [null, [62, 55], [62, 63]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [62, 28], [62, 85]]]], ["block", "link-to", ["bandwidth.udp", ["get", "cdata.id", ["loc", [null, [63, 55], [63, 63]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [63, 28], [63, 85]]]]],
        locals: ["cdata"],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 16
            },
            "end": {
              "line": 71,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "nodatarow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "colspan", "6");
          dom.setAttribute(el2, "align", "center");
          var el3 = dom.createTextNode("No data available");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/bandwidth/clients/summary.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Bandwidth");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "subHdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        dom.setAttribute(el1, "style", "top:95px;");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "class", "table bandwidth_summary");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "width", "100%");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        dom.setAttribute(el4, "style", "background-color:#f5f5f5;");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "style", "border:0px;");
        dom.setAttribute(el5, "width", "10%");
        var el6 = dom.createTextNode("SOURCE IP");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "style", "border:0px;");
        dom.setAttribute(el5, "width", "10%");
        var el6 = dom.createTextNode("DESTINATION IP");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "style", "border:0px;");
        dom.setAttribute(el5, "width", "8%");
        var el6 = dom.createTextNode("ISP");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "style", "border:0px;");
        dom.setAttribute(el5, "width", "18%");
        var el6 = dom.createTextNode("UDP TEST");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "style", "border:0px;");
        dom.setAttribute(el5, "width", "18%");
        var el6 = dom.createTextNode("SINGLE TCP STREAM TEST");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "style", "border:0px;");
        dom.setAttribute(el5, "width", "18%");
        var el6 = dom.createTextNode("MULTIPLE TCP STREAMS TEST");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "style", "border:0px;");
        dom.setAttribute(el5, "width", "13%");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1, 1, 0]);
        var element6 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element5);
        morphs[1] = dom.createMorphAt(element4, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["block", "link-to", ["bandwidth/clients.add"], ["class", "addbtn"], 0, null, ["loc", [null, [6, 4], [6, 83]]]], ["block", "link-to", ["bandwidth/clients.summary"], [], 1, null, ["loc", [null, [10, 12], [10, 71]]]], ["block", "link-to", ["bandwidth/clients.allagents"], [], 2, null, ["loc", [null, [11, 12], [11, 76]]]], ["block", "each", [["get", "content", ["loc", [null, [28, 20], [28, 27]]], 0, 0, 0, 0]], [], 3, 4, ["loc", [null, [28, 12], [71, 25]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/bandwidth/tcp", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 53
            }
          },
          "moduleName": "netconfig/templates/bandwidth/tcp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Bandwidth");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 16
            },
            "end": {
              "line": 35,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/bandwidth/tcp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "today");
          var el2 = dom.createTextNode("Today");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "last24hours");
          var el2 = dom.createTextNode("Last 24 Hours");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "last3days");
          var el2 = dom.createTextNode("Last 3 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "last7days");
          var el2 = dom.createTextNode("Last 7 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 24
            },
            "end": {
              "line": 58,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/tcp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          return morphs;
        },
        statements: [["inline", "to-fixed", [["get", "content.summary.min_bandwidth", ["loc", [null, [55, 43], [55, 72]]], 0, 0, 0, 0]], [], ["loc", [null, [55, 32], [55, 74]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.avg_bandwidth", ["loc", [null, [56, 43], [56, 72]]], 0, 0, 0, 0]], [], ["loc", [null, [56, 32], [56, 74]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.max_bandwidth", ["loc", [null, [57, 43], [57, 72]]], 0, 0, 0, 0]], [], ["loc", [null, [57, 32], [57, 74]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 24
            },
            "end": {
              "line": 60,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/tcp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "colspan", "3");
          dom.setAttribute(el1, "align", "center");
          var el2 = dom.createTextNode("No data available");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 24
            },
            "end": {
              "line": 81,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/tcp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          return morphs;
        },
        statements: [["content", "content.summary.blocksize", ["loc", [null, [78, 28], [78, 57]]], 0, 0, 0, 0], ["content", "content.summary.duration", ["loc", [null, [79, 28], [79, 56]]], 0, 0, 0, 0], ["content", "content.summary.mss", ["loc", [null, [80, 28], [80, 51]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 24
            },
            "end": {
              "line": 83,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/tcp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "colspan", "3");
          dom.setAttribute(el1, "align", "center");
          var el2 = dom.createTextNode("No data available");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/bandwidth/tcp.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("TCP");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "bwGHdr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dwHdrInner");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "width", "80%");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Client");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Server");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(" - ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "cGray");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(" - ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "cGray");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dwHdrInner");
        var el4 = dom.createTextNode("\n             ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "fr bwDate");
        var el5 = dom.createTextNode("\n                 ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Date:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("             ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "readings_graph");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    \n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "summary_table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "summary_col");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Summary Bandwidth");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "table");
        dom.setAttribute(el4, "width", "100%");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Min(M");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("bps");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Avg(M");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("bps");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Max(M");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("bps");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "parameter_col");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Parameters");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "table");
        dom.setAttribute(el4, "width", "100%");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Blocksize(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("bytes");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Duration(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("seconds");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Mss(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("bytes");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 0]);
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1, 1, 3, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element2, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(element5, 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element5, [2]), 0, 0);
        morphs[4] = dom.createMorphAt(element6, 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element6, [2]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [3, 1]), 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element7, [1, 3, 3, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element7, [3, 3, 3, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["block", "link-to", ["bandwidth/clients"], [], 0, null, ["loc", [null, [4, 12], [4, 65]]]], ["content", "content.client.agent_address", ["loc", [null, [21, 28], [21, 60]]], 0, 0, 0, 0], ["content", "content.client.location", ["loc", [null, [21, 83], [21, 110]]], 0, 0, 0, 0], ["content", "content.server.agent_address", ["loc", [null, [22, 28], [22, 60]]], 0, 0, 0, 0], ["content", "content.server.location", ["loc", [null, [22, 83], [22, 110]]], 0, 0, 0, 0], ["block", "ember-chosen", [], ["name", "date", "action", "dateChanged", "placeholder", "select client..."], 1, null, ["loc", [null, [30, 16], [35, 33]]]], ["block", "if", [["get", "content.summary", ["loc", [null, [54, 30], [54, 45]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [54, 24], [60, 31]]]], ["block", "if", [["get", "content.summary", ["loc", [null, [77, 30], [77, 45]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [77, 24], [83, 31]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/bandwidth/udp", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 53
            }
          },
          "moduleName": "netconfig/templates/bandwidth/udp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Bandwidth");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 16
            },
            "end": {
              "line": 35,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/bandwidth/udp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "today");
          var el2 = dom.createTextNode("Today");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "last24hours");
          var el2 = dom.createTextNode("Last 24 Hours");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "last3days");
          var el2 = dom.createTextNode("Last 3 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "last7days");
          var el2 = dom.createTextNode("Last 7 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 24
            },
            "end": {
              "line": 64,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/udp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("%");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("%");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("%");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(fragment, [11]), 0, 0);
          return morphs;
        },
        statements: [["inline", "to-fixed", [["get", "content.summary.min_jitter", ["loc", [null, [58, 43], [58, 69]]], 0, 0, 0, 0]], [], ["loc", [null, [58, 32], [58, 71]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.avg_jitter", ["loc", [null, [59, 43], [59, 69]]], 0, 0, 0, 0]], [], ["loc", [null, [59, 32], [59, 71]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.max_jitter", ["loc", [null, [60, 43], [60, 69]]], 0, 0, 0, 0]], [], ["loc", [null, [60, 32], [60, 71]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.min_lost_percent", ["loc", [null, [61, 43], [61, 75]]], 0, 0, 0, 0]], [], ["loc", [null, [61, 32], [61, 77]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.avg_lost_percent", ["loc", [null, [62, 43], [62, 75]]], 0, 0, 0, 0]], [], ["loc", [null, [62, 32], [62, 77]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.max_lost_percent", ["loc", [null, [63, 43], [63, 75]]], 0, 0, 0, 0]], [], ["loc", [null, [63, 32], [63, 77]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 64,
              "column": 24
            },
            "end": {
              "line": 66,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/udp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "colspan", "6");
          dom.setAttribute(el1, "align", "center");
          var el2 = dom.createTextNode("No data available");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 24
            },
            "end": {
              "line": 85,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/udp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          return morphs;
        },
        statements: [["inline", "to-fixed", [["get", "content.summary.blocksize", ["loc", [null, [83, 43], [83, 68]]], 0, 0, 0, 0]], [], ["loc", [null, [83, 32], [83, 70]]], 0, 0], ["inline", "to-fixed", [["get", "content.summary.duration", ["loc", [null, [84, 43], [84, 67]]], 0, 0, 0, 0]], [], ["loc", [null, [84, 32], [84, 69]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 24
            },
            "end": {
              "line": 87,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/bandwidth/udp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "colspan", "2");
          dom.setAttribute(el1, "align", "center");
          var el2 = dom.createTextNode("No data available");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/bandwidth/udp.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("UDP");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "bwGHdr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dwHdrInner");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "width", "80%");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Client");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Server");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(" - ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "cGray");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(" - ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "cGray");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dwHdrInner");
        var el4 = dom.createTextNode("\n             ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "fr bwDate");
        var el5 = dom.createTextNode("\n                 ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Date:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("             ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "readings_graph");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    \n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "summary_table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "summary_col");
        dom.setAttribute(el3, "style", "width:69%;");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Summary Bandwidth");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "table");
        dom.setAttribute(el4, "width", "100%");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Min Jitter(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("ms");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Avg Jitter(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("ms");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Max Jitter(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("ms");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Min Lost%");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Avg Lost%");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Max Lost%");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "parameter_col");
        dom.setAttribute(el3, "style", "width:29%");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Parameters");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "table");
        dom.setAttribute(el4, "width", "100%");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Blocksize(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("bytes");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Duration(");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "style", "text-transform: lowercase;");
        var el9 = dom.createTextNode("seconds");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(")");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 0]);
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1, 1, 3, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element2, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(element5, 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element5, [2]), 0, 0);
        morphs[4] = dom.createMorphAt(element6, 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element6, [2]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [3, 1]), 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element7, [1, 3, 3, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element7, [3, 3, 3, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["block", "link-to", ["bandwidth/clients"], [], 0, null, ["loc", [null, [4, 12], [4, 65]]]], ["content", "content.client.agent_address", ["loc", [null, [21, 28], [21, 60]]], 0, 0, 0, 0], ["content", "content.client.location", ["loc", [null, [21, 83], [21, 110]]], 0, 0, 0, 0], ["content", "content.server.agent_address", ["loc", [null, [22, 28], [22, 60]]], 0, 0, 0, 0], ["content", "content.server.location", ["loc", [null, [22, 83], [22, 110]]], 0, 0, 0, 0], ["block", "ember-chosen", [], ["name", "date", "action", "dateChanged", "placeholder", "select client..."], 1, null, ["loc", [null, [30, 16], [35, 33]]]], ["block", "if", [["get", "content.summary", ["loc", [null, [57, 30], [57, 45]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [57, 24], [66, 31]]]], ["block", "if", [["get", "content.summary", ["loc", [null, [82, 30], [82, 45]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [82, 24], [87, 31]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/bgp", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 24
                },
                "end": {
                  "line": 29,
                  "column": 23
                }
              },
              "moduleName": "netconfig/templates/bgp.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "src", "/static/netconf/app/images/checked.svg");
              dom.setAttribute(el1, "width", "16");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("             \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 23
                },
                "end": {
                  "line": 31,
                  "column": 23
                }
              },
              "moduleName": "netconfig/templates/bgp.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                       ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "src", "/static/netconf/app/images/cancel.svg");
              dom.setAttribute(el1, "width", "16");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 54,
                      "column": 48
                    },
                    "end": {
                      "line": 54,
                      "column": 110
                    }
                  },
                  "moduleName": "netconfig/templates/bgp.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "bgppeer.flat_count", ["loc", [null, [54, 88], [54, 110]]], 0, 0, 0, 0]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 54,
                      "column": 110
                    },
                    "end": {
                      "line": 54,
                      "column": 119
                    }
                  },
                  "moduleName": "netconfig/templates/bgp.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("-");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 62,
                        "column": 99
                      },
                      "end": {
                        "line": 62,
                        "column": 141
                      }
                    },
                    "moduleName": "netconfig/templates/bgp.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("-");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 63,
                        "column": 52
                      },
                      "end": {
                        "line": 65,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/bgp.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "net_advList");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "bgppeeradv.network", ["loc", [null, [64, 82], [64, 104]]], 0, 0, 0, 0]],
                  locals: ["bgppeeradv"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 58,
                      "column": 40
                    },
                    "end": {
                      "line": 68,
                      "column": 40
                    }
                  },
                  "moduleName": "netconfig/templates/bgp.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                             ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("tr");
                  var el2 = dom.createTextNode("\n                                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "colspan", "5");
                  dom.setAttribute(el2, "style", "padding-botton:20px");
                  var el3 = dom.createTextNode("\n                                                    ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("h3");
                  dom.setAttribute(el3, "class", "advList_title");
                  var el4 = dom.createTextNode("Advertised List:");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1, 3]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element0, 2, 2);
                  morphs[1] = dom.createMorphAt(element0, 4, 4);
                  return morphs;
                },
                statements: [["block", "unless", [["get", "bgppeer.bgp_advertisement_set", ["loc", [null, [62, 109], [62, 138]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [62, 99], [62, 152]]]], ["block", "each", [["get", "bgppeer.bgp_advertisement_set", ["loc", [null, [63, 60], [63, 89]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [63, 52], [65, 61]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 36
                  },
                  "end": {
                    "line": 69,
                    "column": 36
                  }
                },
                "moduleName": "netconfig/templates/bgp.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "align", "right");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "bgprname");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("<td><span class=\"bgpadv\" {{action 'showadvlst' bgppeer bgppeer}}>{{bgppeer.peer_host}}</span></td>");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var element2 = dom.childAt(element1, [1, 0]);
                var morphs = new Array(11);
                morphs[0] = dom.createAttrMorph(element1, 'ids');
                morphs[1] = dom.createAttrMorph(element1, 'class');
                morphs[2] = dom.createAttrMorph(element2, 'class');
                morphs[3] = dom.createElementMorph(element2);
                morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
                morphs[5] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
                morphs[6] = dom.createMorphAt(dom.childAt(element1, [9]), 0, 0);
                morphs[7] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
                morphs[8] = dom.createMorphAt(dom.childAt(element1, [13]), 0, 0);
                morphs[9] = dom.createMorphAt(dom.childAt(element1, [15]), 0, 0);
                morphs[10] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["attribute", "ids", ["concat", [["get", "bgppeer.host", ["loc", [null, [48, 51], [48, 63]]], 0, 0, 0, 0], "_", ["get", "bgppeer.peer_host", ["loc", [null, [48, 68], [48, 85]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", ["bgp_", ["subexpr", "tolowercase", [["get", "bgppeer.peer_state", ["loc", [null, [48, 114], [48, 132]]], 0, 0, 0, 0]], [], ["loc", [null, [48, 100], [48, 134]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "bgppeer.isShowAdvData", ["loc", [null, [49, 158], [49, 179]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [49, 153], [49, 220]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showAdvData", ["get", "bgppeer", ["loc", [null, [49, 108], [49, 115]]], 0, 0, 0, 0], ["get", "item", ["loc", [null, [49, 116], [49, 120]]], 0, 0, 0, 0], ["get", "item.wData.bgp-peer", ["loc", [null, [49, 121], [49, 140]]], 0, 0, 0, 0]], [], ["loc", [null, [49, 85], [49, 142]]], 0, 0], ["content", "bgppeer.peer_host", ["loc", [null, [51, 48], [51, 69]]], 0, 0, 0, 0], ["content", "bgppeer.peer_as", ["loc", [null, [52, 48], [52, 67]]], 0, 0, 0, 0], ["content", "bgppeer.Description", ["loc", [null, [53, 48], [53, 71]]], 0, 0, 0, 0], ["block", "if", [["subexpr", "not-eq", [["get", "bgppeer.flat_count", ["loc", [null, [54, 62], [54, 80]]], 0, 0, 0, 0], null], [], ["loc", [null, [54, 54], [54, 86]]], 0, 0]], [], 0, 1, ["loc", [null, [54, 48], [54, 126]]]], ["content", "bgppeer.peer_state", ["loc", [null, [55, 48], [55, 70]]], 0, 0, 0, 0], ["content", "bgppeer.elapsed_time", ["loc", [null, [56, 48], [56, 72]]], 0, 0, 0, 0], ["block", "if", [["get", "bgppeer.isShowAdvData", ["loc", [null, [58, 46], [58, 67]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [58, 40], [68, 47]]]]],
              locals: ["bgppeer"],
              templates: [child0, child1, child2]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 23
                },
                "end": {
                  "line": 72,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/bgp.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1, "cellpadding", "0");
              dom.setAttribute(el1, "class", "table");
              dom.setAttribute(el1, "cellspacing", "0");
              dom.setAttribute(el1, "border", "0");
              dom.setAttribute(el1, "width", "100%");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("thead");
              var el3 = dom.createTextNode("\n                                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("tr");
              var el4 = dom.createTextNode("\n                                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("td");
              dom.setAttribute(el4, "style", "text-align:center");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "bgprname");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("td");
              var el5 = dom.createTextNode("Peer-Address");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("td");
              var el5 = dom.createTextNode("Peer-As");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("td");
              dom.setAttribute(el4, "width", "20%");
              var el5 = dom.createTextNode("Description");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("td");
              dom.setAttribute(el4, "nowrap", "");
              var el5 = dom.createTextNode("Flap-Count");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("td");
              var el5 = dom.createTextNode("Peer-State");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("td");
              dom.setAttribute(el4, "nowrap", "");
              var el5 = dom.createTextNode("Elapsed-Time");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tbody");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var element4 = dom.childAt(element3, [1, 1, 1, 0]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element4, 'class');
              morphs[1] = dom.createElementMorph(element4);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "item.isShowAllAdvList", ["loc", [null, [37, 161], [37, 182]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [37, 156], [37, 223]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showAllAdvList", ["get", "item", ["loc", [null, [37, 119], [37, 123]]], 0, 0, 0, 0], ["get", "item.wData.bgp-peer", ["loc", [null, [37, 124], [37, 143]]], 0, 0, 0, 0]], [], ["loc", [null, [37, 93], [37, 145]]], 0, 0], ["block", "each", [["get", "item.wData.bgp-peer", ["loc", [null, [47, 44], [47, 63]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [47, 36], [69, 45]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 20
              },
              "end": {
                "line": 74,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/bgp.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "subtabledata");
            var el2 = dom.createTextNode("\n                           ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "bgprname");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("  ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        \n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var element6 = dom.childAt(element5, [1]);
            var morphs = new Array(5);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            morphs[1] = dom.createElementMorph(element6);
            morphs[2] = dom.createMorphAt(element5, 3, 3);
            morphs[3] = dom.createMorphAt(element5, 5, 5);
            morphs[4] = dom.createMorphAt(element5, 7, 7);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "unless", [["get", "item.isShowPeer", ["loc", [null, [25, 112], [25, 127]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [25, 103], [25, 168]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showPeers", ["get", "item", ["loc", [null, [25, 86], [25, 90]]], 0, 0, 0, 0]], [], ["loc", [null, [25, 65], [25, 92]]], 0, 0], ["content", "item.name", ["loc", [null, [25, 184], [25, 197]]], 0, 0, 0, 0], ["block", "if", [["get", "item.status", ["loc", [null, [27, 30], [27, 41]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [27, 24], [31, 30]]]], ["block", "unless", [["get", "item.isShowPeer", ["loc", [null, [33, 33], [33, 48]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [33, 23], [72, 35]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 12
            },
            "end": {
              "line": 76,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/bgp.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "bgpdc");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "bgplview");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "bgprname");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element8, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element9, 'class');
          morphs[1] = dom.createElementMorph(element9);
          morphs[2] = dom.createMorphAt(element8, 2, 2);
          morphs[3] = dom.createMorphAt(element7, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "unless", [["get", "item.isShowData", ["loc", [null, [21, 94], [21, 109]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [21, 85], [21, 150]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showFData", ["get", "item", ["loc", [null, [21, 68], [21, 72]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 47], [21, 74]]], 0, 0], ["content", "item.dc", ["loc", [null, [21, 165], [21, 176]]], 0, 0, 0, 0], ["block", "unless", [["get", "item.isShowData", ["loc", [null, [23, 30], [23, 45]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 20], [74, 31]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 92,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/bgp.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("BGP");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "data-centre");
        var el4 = dom.createElement("b");
        var el5 = dom.createTextNode(" Data Center:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        \n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "inlinefView");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" {{#if isShowAdv}}\n        <div class=\"advlst\">\n            <div class=\"advlstHdr\">\n                <h4>Advertised List</h4>\n                <span class=\"advCls\" {{action 'closeAdv'}}>×</span>\n            </div>\n            <ul>\n                {{#each advData.adv as |item|}}\n                    <li>{{item.network}}</li>\n                {{/each}}\n            </ul>\n        </div>\n    {{/if}} ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [0, 1]);
        var element11 = dom.childAt(element10, [1, 0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element11);
        morphs[1] = dom.createMorphAt(dom.childAt(element10, [5]), 2, 2);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["content", "dcInfo.0.attributes.name", ["loc", [null, [5, 64], [5, 94]]], 0, 0, 0, 0], ["block", "each", [["get", "content.router", ["loc", [null, [18, 20], [18, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [18, 12], [76, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/bgpalarms", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/bgpalarms.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item1");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item2");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item3 bgp-alarm");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item4 bgp-alarm");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[4] = dom.createUnsafeMorphAt(dom.childAt(element0, [7]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["subexpr", "eq", [["get", "i.status", ["loc", [null, [25, 32], [25, 40]]], 0, 0, 0, 0], "Established"], [], ["loc", [null, [25, 28], [25, 55]]], 0, 0], "status-color-red", "status-color-green"], [], ["loc", [null, [25, 19], [25, 97]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "i.router", ["loc", [null, [26, 28], [26, 40]]], 0, 0, 0, 0], ["content", "i.peer", ["loc", [null, [27, 28], [27, 38]]], 0, 0, 0, 0], ["content", "i.status", ["loc", [null, [28, 38], [28, 50]]], 0, 0, 0, 0], ["inline", "timestampdate", [["get", "i.timestamp", ["loc", [null, [29, 55], [29, 66]]], 0, 0, 0, 0], "Asia/Kolkata"], [], ["loc", [null, [29, 38], [29, 84]]], 0, 0]],
        locals: ["i"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 38,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/bgpalarms.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "loading-page-scroll", ["loc", [null, [37, 4], [37, 27]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/bgpalarms.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("BGP Alarms");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "cmmt_s");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "a_bar");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cmmt_s_r");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "width", "100%");
        dom.setAttribute(el3, "cellpadding", "0");
        dom.setAttribute(el3, "cellspacing", "0");
        dom.setAttribute(el3, "border", "0");
        dom.setAttribute(el3, "class", "table");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.setAttribute(el6, "class", "item1");
        var el7 = dom.createTextNode("Device");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.setAttribute(el6, "class", "item2 bgp-alarm");
        var el7 = dom.createTextNode("Peer");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.setAttribute(el6, "class", "item3");
        var el7 = dom.createTextNode("Status");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.setAttribute(el6, "class", "item4 bgp-alarm");
        var el7 = dom.createTextNode("Time");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var element2 = dom.childAt(element1, [1, 0]);
        var element3 = dom.childAt(element1, [5, 1, 1, 0]);
        var element4 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element2);
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [1, 1, 3]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 35], [3, 57]]], 0, 0], ["element", "action", ["search"], [], ["loc", [null, [7, 32], [7, 51]]], 0, 0], ["block", "each", [["get", "content", ["loc", [null, [24, 14], [24, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [24, 6], [31, 15]]]], ["block", "infinite-scroll", [], ["content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [36, 29], [36, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "hasMore", ["subexpr", "@mut", [["get", "hasMore", ["loc", [null, [36, 45], [36, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollable", ".innerContainer"], 1, null, ["loc", [null, [36, 2], [38, 22]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/common/confirmmodal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/common/confirmmodal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-md-2");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-attention-circle confirm-icon");
          dom.setAttribute(el2, "style", "color:#FFA500");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/common/confirmmodal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "msgArgs", ["loc", [null, [9, 7], [9, 18]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/common/confirmmodal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "checkbox");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n   ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element1, 0, 0);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "chkBoxValue", ["loc", [null, [14, 62], [14, 73]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [14, 30], [14, 75]]], 0, 0], ["content", "chkBoxLabel", ["loc", [null, [14, 75], [14, 90]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 20,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/common/confirmmodal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("small");
          dom.setAttribute(el1, "class", "text-muted");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 0, 0);
          morphs[1] = dom.createMorphAt(element0, 2, 2);
          return morphs;
        },
        statements: [["content", "notes", ["loc", [null, [19, 30], [19, 39]]], 0, 0, 0, 0], ["content", "notesArgs", ["loc", [null, [19, 40], [19, 53]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/common/confirmmodal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "padding-left: 2px");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "alert-actions btn-toolbar");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    \n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [1]);
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [1]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element2, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element2, 3, 3);
        morphs[4] = dom.createMorphAt(element2, 5, 5);
        morphs[5] = dom.createMorphAt(element2, 7, 7);
        morphs[6] = dom.createAttrMorph(element4, 'class');
        morphs[7] = dom.createElementMorph(element4);
        morphs[8] = dom.createMorphAt(element4, 1, 1);
        morphs[9] = dom.createMorphAt(element3, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "showIcon", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["attribute", "class", ["concat", ["col-md-10 modal-confirmTxt ", ["subexpr", "unless", [["get", "showIcon", ["loc", [null, [6, 48], [6, 56]]], 0, 0, 0, 0], "col-md-offset-2"], [], ["loc", [null, [6, 39], [6, 76]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "msg", ["loc", [null, [7, 5], [7, 12]]], 0, 0, 0, 0], ["block", "if", [["get", "msgArgs", ["loc", [null, [8, 8], [8, 15]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [8, 2], [10, 9]]]], ["block", "if", [["get", "showChkBox", ["loc", [null, [12, 8], [12, 18]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [12, 2], [16, 9]]]], ["block", "if", [["get", "notes", ["loc", [null, [18, 8], [18, 13]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [18, 2], [20, 9]]]], ["attribute", "class", ["concat", ["btn btn-default ", ["subexpr", "unless", [["get", "sBtnNeed", ["loc", [null, [23, 42], [23, 50]]], 0, 0, 0, 0], "invisible"], [], ["loc", [null, [23, 33], [23, 64]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["secondaryAction"], [], ["loc", [null, [23, 66], [23, 94]]], 0, 0], ["content", "sBtn", ["loc", [null, [24, 4], [24, 12]]], 0, 0, 0, 0], ["inline", "bs-primary", [], ["btn_name", ["subexpr", "@mut", [["get", "pBtn", ["loc", [null, [26, 24], [26, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "action", "confirmAction", "disabledWhen", ["subexpr", "@mut", [["get", "disablePBtn", ["loc", [null, [26, 65], [26, 76]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [26, 2], [26, 78]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("netconfig/templates/common/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/common/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading text-center");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "load-circle1");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "load-circle2");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "load-circle3");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "load-circle4");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "load-circle5");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/common/modallayout", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/common/modallayout.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal-header");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "close");
          dom.setAttribute(el2, "data-dismiss", "modal");
          var el3 = dom.createTextNode("×");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2, "class", "modal-title");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element3);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["closeModal"], [], ["loc", [null, [8, 69], [8, 92]]], 0, 0], ["content", "view.modalTitle", ["loc", [null, [9, 36], [9, 55]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 10
            },
            "end": {
              "line": 15,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/common/modallayout.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["common/loading"], [], ["loc", [null, [14, 14], [14, 42]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 10
            },
            "end": {
              "line": 17,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/common/modallayout.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [16, 12], [16, 21]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 24,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/common/modallayout.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal-footer");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "btn btn-default");
          var el3 = dom.createTextNode("Cancel");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["closeModal"], [], ["loc", [null, [21, 58], [21, 81]]], 0, 0], ["inline", "bs-primary", [], ["action", "saveAgentConf", "isLoading", ["subexpr", "@mut", [["get", "model.isSaving", ["loc", [null, [22, 58], [22, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [22, 12], [22, 74]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/common/modallayout.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "modal fade show");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "modal-content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "modal-body modal-loading");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(fragment, [2, 1]);
        var element6 = dom.childAt(element5, [1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element4, 'class');
        morphs[1] = dom.createAttrMorph(element5, 'class');
        morphs[2] = dom.createMorphAt(element6, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
        morphs[4] = dom.createMorphAt(element6, 5, 5);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["modal-backdrop fade ", ["get", "view.bkpDrpClass", ["loc", [null, [1, 34], [1, 50]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", ["modal-dialog ", ["get", "view.modalClass", ["loc", [null, [3, 29], [3, 44]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "view.modalContext.modalHeader", ["loc", [null, [6, 14], [6, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [6, 8], [11, 15]]]], ["block", "if", [["get", "modalContext.isModalLoading", ["loc", [null, [13, 16], [13, 43]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [13, 10], [17, 17]]]], ["block", "if", [["get", "view.modalContext.modalFooter", ["loc", [null, [19, 14], [19, 43]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [19, 8], [24, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("netconfig/templates/components/alarm-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 14
            },
            "end": {
              "line": 28,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/components/alarm-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item1");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item2");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item3 bgp-alarm");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item4 bgp-alarm");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[4] = dom.createUnsafeMorphAt(dom.childAt(element0, [7]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["subexpr", "eq", [["get", "i.status", ["loc", [null, [22, 38], [22, 46]]], 0, 0, 0, 0], "Established"], [], ["loc", [null, [22, 34], [22, 61]]], 0, 0], "status-color-red", "status-color-green"], [], ["loc", [null, [22, 25], [22, 103]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "i.router", ["loc", [null, [23, 34], [23, 46]]], 0, 0, 0, 0], ["content", "i.peer", ["loc", [null, [24, 34], [24, 44]]], 0, 0, 0, 0], ["content", "i.status", ["loc", [null, [25, 44], [25, 56]]], 0, 0, 0, 0], ["inline", "timestampdate", [["get", "i.timestamp", ["loc", [null, [26, 61], [26, 72]]], 0, 0, 0, 0], "Asia/Kolkata"], [], ["loc", [null, [26, 44], [26, 90]]], 0, 0]],
        locals: ["i"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/alarm-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      BGP Alarms\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--body--content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "lan--commit");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "lan--commit--log");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("table");
        dom.setAttribute(el6, "cellspacing", "100px");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("thead");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("tr");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item1");
        var el10 = dom.createTextNode("Device");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item2 bgp-alarm");
        var el10 = dom.createTextNode("Peer");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item3");
        var el10 = dom.createTextNode("Status");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item4 bgp-alarm");
        var el10 = dom.createTextNode("Time");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("tbody");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3, 1, 1, 1, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "data", ["loc", [null, [21, 22], [21, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [21, 14], [28, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/arp-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/arp-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      ARP\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "arpFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/bs-primary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/components/bs-primary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("       ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "loadingTxt", ["loc", [null, [4, 7], [4, 21]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/components/bs-primary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("	   ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "btn_name", ["loc", [null, [6, 4], [6, 16]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 1
            }
          },
          "moduleName": "netconfig/templates/components/bs-primary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("	");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "appMeta.staticimgUrl", ["loc", [null, [2, 13], [2, 33]]], 0, 0, 0, 0], "images/spin.svg"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "loadingTxt", ["loc", [null, [3, 10], [3, 20]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 4], [7, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 1
              },
              "end": {
                "line": 10,
                "column": 0
              }
            },
            "moduleName": "netconfig/templates/components/bs-primary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "label", ["loc", [null, [9, 4], [9, 13]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 0
              },
              "end": {
                "line": 12,
                "column": 0
              }
            },
            "moduleName": "netconfig/templates/components/bs-primary.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "btn_name", ["loc", [null, [11, 4], [11, 16]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 1
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/components/bs-primary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "label", ["loc", [null, [8, 11], [8, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [8, 1], [12, 0]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/bs-primary.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoading", ["loc", [null, [1, 6], [1, 15]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [12, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/components/client-add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 12
            },
            "end": {
              "line": 3,
              "column": 53
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Bandwidth");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 26
            },
            "end": {
              "line": 5,
              "column": 44
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Edit");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 44
            },
            "end": {
              "line": 5,
              "column": 55
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 20
              },
              "end": {
                "line": 16,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/components/client-add.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'value');
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            morphs[2] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.agent_address", ["loc", [null, [15, 41], [15, 59]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.agent_address", ["loc", [null, [15, 63], [15, 85]]], 0, 0, 0, 0], ["content", "item.location", ["loc", [null, [15, 86], [15, 103]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 16
            },
            "end": {
              "line": 17,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.clients", ["loc", [null, [14, 28], [14, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 20], [16, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 16
            },
            "end": {
              "line": 25,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "udp");
          var el2 = dom.createTextNode("UDP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "tcp");
          var el2 = dom.createTextNode("TCP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "both");
          var el2 = dom.createTextNode("TCP & UDP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 20
              },
              "end": {
                "line": 32,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/components/client-add.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'value');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            morphs[2] = dom.createMorphAt(element0, 2, 2);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.agent_address", ["loc", [null, [31, 41], [31, 59]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.agent_address", ["loc", [null, [31, 63], [31, 85]]], 0, 0, 0, 0], ["content", "item.location", ["loc", [null, [31, 86], [31, 103]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 16
            },
            "end": {
              "line": 33,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.servers", ["loc", [null, [30, 28], [30, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [30, 20], [32, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 12
            },
            "end": {
              "line": 40,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Number of Parallel TCP streams");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "noOfSessions");
          dom.setAttribute(el2, "value", "1");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 12
            },
            "end": {
              "line": 46,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Target Bandwidth in Gbps (for UDP)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "targetBandwidth");
          dom.setAttribute(el2, "value", "0.001");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 16
            },
            "end": {
              "line": 52,
              "column": 115
            }
          },
          "moduleName": "netconfig/templates/components/client-add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "reset");
          dom.setAttribute(el1, "class", "btn btn-cancel");
          var el2 = dom.createTextNode("Cancel");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 59,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/client-add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Client");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "addbandwidth");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "required");
        var el6 = dom.createTextNode("Client Address");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "required");
        var el6 = dom.createTextNode("Protocol");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "required");
        var el6 = dom.createTextNode("Server Address");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "required");
        var el6 = dom.createTextNode("ISP");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "isp");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            \n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(fragment, [2, 1, 1]);
        var element4 = dom.childAt(element3, [12]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]), 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]), 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5]), 3, 3);
        morphs[5] = dom.createMorphAt(element3, 7, 7);
        morphs[6] = dom.createMorphAt(element3, 8, 8);
        morphs[7] = dom.createMorphAt(element4, 1, 1);
        morphs[8] = dom.createMorphAt(element4, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["bandwidth/clients"], [], 0, null, ["loc", [null, [3, 12], [3, 65]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [5, 32], [5, 38]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [5, 26], [5, 62]]]], ["block", "ember-chosen", [], ["name", "client_address", "action", "clientchanged", "placeholder", "select client..."], 3, null, ["loc", [null, [13, 16], [17, 33]]]], ["block", "ember-chosen", [], ["name", "protocol", "action", "protocolchanged", "placeholder", "Select a protocol..."], 4, null, ["loc", [null, [21, 16], [25, 33]]]], ["block", "ember-chosen", [], ["name", "server_address", "placeholder", "select server..."], 5, null, ["loc", [null, [29, 16], [33, 33]]]], ["block", "if", [["get", "isShowSession", ["loc", [null, [35, 18], [35, 31]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [35, 12], [40, 19]]]], ["block", "if", [["get", "isTargetBand", ["loc", [null, [41, 18], [41, 30]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [41, 12], [46, 19]]]], ["block", "link-to", ["bandwidth/clients.summary"], [], 8, null, ["loc", [null, [52, 16], [52, 127]]]], ["inline", "bs-primary", [], ["action", "addbandwidth", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [53, 61], [53, 69]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [53, 16], [53, 71]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("netconfig/templates/components/commit-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 14
            },
            "end": {
              "line": 28,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/components/commit-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item1");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item2");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item3");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "item4");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[4] = dom.createUnsafeMorphAt(dom.childAt(element0, [7]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["subexpr", "eq", [["get", "i.table", ["loc", [null, [22, 40], [22, 47]]], 0, 0, 0, 0], "PrefixEditLog"], [], ["loc", [null, [22, 36], [22, 64]]], 0, 0], "status-color-red", "status-color-green"], [], ["loc", [null, [22, 27], [22, 106]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "i.router", ["loc", [null, [23, 36], [23, 48]]], 0, 0, 0, 0], ["content", "i.r_username", ["loc", [null, [24, 36], [24, 52]]], 0, 0, 0, 0], ["content", "i.ctext", ["loc", [null, [25, 36], [25, 47]]], 0, 0, 0, 0], ["inline", "timestampdate", [["get", "i.c_timestamp", ["loc", [null, [26, 53], [26, 66]]], 0, 0, 0, 0], "Asia/Kolkata"], [], ["loc", [null, [26, 36], [26, 84]]], 0, 0]],
        locals: ["i"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/commit-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      Commits\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--body--content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "lan--commit");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "lan--commit--log");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("table");
        dom.setAttribute(el6, "cellspacing", "100px");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("thead");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("tr");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item1");
        var el10 = dom.createTextNode("Device");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item2");
        var el10 = dom.createTextNode("Device User");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item3");
        var el10 = dom.createTextNode("Configuration");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("th");
        dom.setAttribute(el9, "class", "item4");
        var el10 = dom.createTextNode("Time");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("tbody");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3, 1, 1, 1, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "data", ["loc", [null, [21, 22], [21, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [21, 14], [28, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/comp-po", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 32
                  },
                  "end": {
                    "line": 18,
                    "column": 32
                  }
                },
                "moduleName": "netconfig/templates/components/comp-po.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createElement("input");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("button");
                dom.setAttribute(el2, "class", "submit");
                var el3 = dom.createTextNode("update");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("button");
                dom.setAttribute(el2, "class", "delete");
                var el3 = dom.createTextNode("cancel");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var element6 = dom.childAt(element5, [0]);
                var element7 = dom.childAt(element5, [1]);
                var element8 = dom.childAt(element5, [2]);
                var morphs = new Array(4);
                morphs[0] = dom.createAttrMorph(element6, 'name');
                morphs[1] = dom.createAttrMorph(element6, 'value');
                morphs[2] = dom.createElementMorph(element7);
                morphs[3] = dom.createElementMorph(element8);
                return morphs;
              },
              statements: [["attribute", "name", ["concat", [["get", "item.name", ["loc", [null, [17, 56], [17, 65]]], 0, 0, 0, 0], "-", ["get", "term.name", ["loc", [null, [17, 70], [17, 79]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["get", "term.then.local-preference.local-preference", ["loc", [null, [17, 91], [17, 134]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["update", ["get", "item", ["loc", [null, [17, 179], [17, 183]]], 0, 0, 0, 0], ["get", "term", ["loc", [null, [17, 184], [17, 188]]], 0, 0, 0, 0]], [], ["loc", [null, [17, 161], [17, 190]]], 0, 0], ["element", "action", ["edit", ["get", "term", ["loc", [null, [17, 245], [17, 249]]], 0, 0, 0, 0]], [], ["loc", [null, [17, 229], [17, 251]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 19,
                      "column": 32
                    },
                    "end": {
                      "line": 21,
                      "column": 32
                    }
                  },
                  "moduleName": "netconfig/templates/components/comp-po.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("button");
                  dom.setAttribute(el2, "class", "default");
                  var el3 = dom.createTextNode("edit");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var element4 = dom.childAt(element3, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element3, 0, 0);
                  morphs[1] = dom.createElementMorph(element4);
                  return morphs;
                },
                statements: [["content", "term.then.local-preference.local-preference", ["loc", [null, [20, 41], [20, 88]]], 0, 0, 0, 0], ["element", "action", ["edit", ["get", "term", ["loc", [null, [20, 129], [20, 133]]], 0, 0, 0, 0]], [], ["loc", [null, [20, 113], [20, 135]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 21,
                      "column": 32
                    },
                    "end": {
                      "line": 23,
                      "column": 32
                    }
                  },
                  "moduleName": "netconfig/templates/components/comp-po.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createTextNode("-");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 32
                  },
                  "end": {
                    "line": 24,
                    "column": 32
                  }
                },
                "moduleName": "netconfig/templates/components/comp-po.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "term.then.local-preference.local-preference", ["loc", [null, [19, 38], [19, 81]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [19, 32], [23, 39]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 20
                  },
                  "end": {
                    "line": 31,
                    "column": 20
                  }
                },
                "moduleName": "netconfig/templates/components/comp-po.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createTextNode("\n                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("pre");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'id');
                morphs[1] = dom.createMorphAt(element2, 0, 0);
                return morphs;
              },
              statements: [["attribute", "id", ["concat", [["get", "item.name", ["loc", [null, [29, 35], [29, 44]]], 0, 0, 0, 0], "-", ["get", "term.name", ["loc", [null, [29, 49], [29, 58]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "term.info", ["loc", [null, [29, 62], [29, 75]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 16
                },
                "end": {
                  "line": 32,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/components/comp-po.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "termitem");
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "ps-name-val");
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "ps-lp");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1]);
              var element10 = dom.childAt(element9, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createElementMorph(element10);
              morphs[1] = dom.createMorphAt(element10, 1, 1);
              morphs[2] = dom.createMorphAt(dom.childAt(element9, [3]), 1, 1);
              morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["element", "action", ["showTerm", ["get", "term", ["loc", [null, [12, 74], [12, 78]]], 0, 0, 0, 0]], [], ["loc", [null, [12, 54], [12, 80]]], 0, 0], ["content", "term.name", ["loc", [null, [13, 32], [13, 45]]], 0, 0, 0, 0], ["block", "if", [["get", "term.edit", ["loc", [null, [16, 38], [16, 47]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [16, 32], [24, 39]]]], ["block", "if", [["get", "term.show", ["loc", [null, [27, 26], [27, 35]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [27, 20], [31, 27]]]]],
            locals: ["term"],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 35,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/components/comp-po.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2, "class", "po-statement");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            dom.setAttribute(el3, "class", "lptitle");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "ps-name");
            var el5 = dom.createTextNode("Term");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "ps-lp");
            var el5 = dom.createTextNode("Local Preference");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 3, 3);
            return morphs;
          },
          statements: [["block", "each", [["get", "item.term", ["loc", [null, [10, 24], [10, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [10, 16], [32, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/components/comp-po.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "po-title");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1]);
          var element12 = dom.childAt(element11, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element12, 'class');
          morphs[1] = dom.createElementMorph(element12);
          morphs[2] = dom.createMorphAt(element11, 3, 3);
          morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "item.show", ["loc", [null, [4, 30], [4, 39]]], 0, 0, 0, 0], "comp", "exp"], [], ["loc", [null, [4, 25], [4, 54]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["exp", ["get", "item", ["loc", [null, [4, 71], [4, 75]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 56], [4, 77]]], 0, 0], ["content", "item.name", ["loc", [null, [4, 97], [4, 110]]], 0, 0, 0, 0], ["block", "if", [["get", "item.show", ["loc", [null, [6, 14], [6, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [6, 8], [35, 15]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/components/comp-po.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popSlideDiv animation fadeIn");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "psinfo");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "close");
          var el4 = dom.createTextNode("x");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "value");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "info");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("pre");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1, 1]), 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["showDetail"], [], ["loc", [null, [42, 32], [42, 55]]], 0, 0], ["content", "psInfo", ["loc", [null, [45, 21], [45, 31]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 7
          }
        },
        "moduleName": "netconfig/templates/components/comp-po.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "po-component");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "po", ["loc", [null, [2, 12], [2, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 4], [36, 13]]]], ["block", "if", [["get", "showInfo", ["loc", [null, [39, 6], [39, 14]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [39, 0], [50, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/components/con-mon-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/con-mon-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/con-mon-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Connectivity Monitor\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "conmonbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      \n        \n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "conmonFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "width", "300px");
        dom.setAttribute(el2, "height", "400px");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/cpu-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/cpu-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/cpu-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      CPU Utilization\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "cpubtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  \n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "cpuFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [25, 16], [25, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/cur-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 24
            },
            "end": {
              "line": 17,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/cur-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [16, 42], [16, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [16, 68], [16, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [16, 88], [16, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [16, 101], [16, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/cur-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Power Sensor\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "currbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "curFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [8, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [13, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [15, 32], [15, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [15, 24], [17, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [20, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [27, 16], [27, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/device-category-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/device-category-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      Device Category\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "category_chart");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/device-status-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/device-status-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      Device Status\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "status_chart");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/drag-drop-zone", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/drag-drop-zone.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/drag-drop", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/drag-drop.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/ember-chosen", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/components/ember-chosen.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [3, 4], [3, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/components/ember-chosen.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/components/ember-chosen.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "disabled", "");
            var el2 = dom.createTextNode("Invalid Attributes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 12
                    },
                    "end": {
                      "line": 17,
                      "column": 12
                    }
                  },
                  "moduleName": "netconfig/templates/components/ember-chosen.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("option");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element1, 'value');
                  morphs[1] = dom.createAttrMorph(element1, 'selected');
                  morphs[2] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "value", ["get", "option.value", ["loc", [null, [16, 30], [16, 42]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "selected", ["concat", [["subexpr", "if", [["get", "option.selected", ["loc", [null, [16, 60], [16, 75]]], 0, 0, 0, 0], "selected"], [], ["loc", [null, [16, 55], [16, 88]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "option.label", ["loc", [null, [16, 90], [16, 106]]], 0, 0, 0, 0]],
                locals: ["option"],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 17,
                      "column": 12
                    },
                    "end": {
                      "line": 19,
                      "column": 12
                    }
                  },
                  "moduleName": "netconfig/templates/components/ember-chosen.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("option");
                  dom.setAttribute(el1, "disabled", "");
                  var el2 = dom.createTextNode("No Options Available");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 8
                  },
                  "end": {
                    "line": 21,
                    "column": 8
                  }
                },
                "moduleName": "netconfig/templates/components/ember-chosen.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("optgroup");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'label');
                morphs[1] = dom.createMorphAt(element2, 1, 1);
                return morphs;
              },
              statements: [["attribute", "label", ["get", "group.label", ["loc", [null, [14, 28], [14, 39]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "group.options", ["loc", [null, [15, 20], [15, 33]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [15, 12], [19, 21]]]]],
              locals: ["group"],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 8
                  },
                  "end": {
                    "line": 23,
                    "column": 8
                  }
                },
                "moduleName": "netconfig/templates/components/ember-chosen.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                dom.setAttribute(el1, "disabled", "");
                var el2 = dom.createTextNode("No Options Available");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 24,
                  "column": 6
                }
              },
              "moduleName": "netconfig/templates/components/ember-chosen.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "options", ["loc", [null, [13, 16], [13, 23]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [13, 8], [23, 17]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 8
                  },
                  "end": {
                    "line": 27,
                    "column": 8
                  }
                },
                "moduleName": "netconfig/templates/components/ember-chosen.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element0, 'value');
                morphs[1] = dom.createAttrMorph(element0, 'selected');
                morphs[2] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["get", "option.value", ["loc", [null, [26, 26], [26, 38]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "selected", ["concat", [["subexpr", "if", [["get", "option.selected", ["loc", [null, [26, 56], [26, 71]]], 0, 0, 0, 0], "selected"], [], ["loc", [null, [26, 51], [26, 84]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "option.label", ["loc", [null, [26, 86], [26, 102]]], 0, 0, 0, 0]],
              locals: ["option"],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 8
                  },
                  "end": {
                    "line": 29,
                    "column": 8
                  }
                },
                "moduleName": "netconfig/templates/components/ember-chosen.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                dom.setAttribute(el1, "disabled", "");
                var el2 = dom.createTextNode("No Options Available");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 30,
                  "column": 6
                }
              },
              "moduleName": "netconfig/templates/components/ember-chosen.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "options", ["loc", [null, [25, 16], [25, 23]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [25, 8], [29, 17]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 31,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/components/ember-chosen.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "validGroupPath", ["loc", [null, [12, 12], [12, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [12, 6], [30, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 32,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/components/ember-chosen.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "skipEmptyItem", ["loc", [null, [5, 14], [5, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 4], [7, 15]]]], ["block", "if", [["get", "invalidAttrs", ["loc", [null, [9, 10], [9, 22]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [9, 4], [31, 11]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/ember-chosen.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("select");
        dom.setAttribute(el1, "size", "1");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element3, 'id');
        morphs[1] = dom.createAttrMorph(element3, 'name');
        morphs[2] = dom.createAttrMorph(element3, 'class');
        morphs[3] = dom.createAttrMorph(element3, 'onchange');
        morphs[4] = dom.createAttrMorph(element3, 'multiple');
        morphs[5] = dom.createAttrMorph(element3, 'disabled');
        morphs[6] = dom.createMorphAt(element3, 1, 1);
        return morphs;
      },
      statements: [["attribute", "id", ["concat", ["ember-chosen-", ["get", "elementId", ["loc", [null, [1, 36], [1, 45]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "name", ["get", "name", ["loc", [null, [1, 56], [1, 60]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "class", ["loc", [null, [1, 72], [1, 77]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["selectValue"], [], ["loc", [null, [null, null], [1, 114]]], 0, 0], 0, 0, 0, 0], ["attribute", "multiple", ["get", "multiple", ["loc", [null, [1, 126], [1, 134]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "disabled", ["get", "disabled", ["loc", [null, [1, 148], [1, 156]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "hasBlock", ["loc", [null, [2, 8], [2, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 2], [32, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/components/fan-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 24
            },
            "end": {
              "line": 17,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/fan-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [16, 42], [16, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [16, 68], [16, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [16, 88], [16, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [16, 101], [16, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/fan-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Fan Speed\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      \n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "fanbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "fanFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [8, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [13, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [15, 32], [15, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [15, 24], [17, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [20, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [27, 16], [27, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/infinite-scroll", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 27
            }
          },
          "moduleName": "netconfig/templates/components/infinite-scroll.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [1, 18], [1, 27]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 34
          }
        },
        "moduleName": "netconfig/templates/components/infinite-scroll.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isFetching", ["loc", [null, [1, 6], [1, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [1, 34]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/infinity-loader", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/components/infinity-loader.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "netconfig/templates/components/infinity-loader.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "loadedText", ["loc", [null, [5, 10], [5, 24]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "netconfig/templates/components/infinity-loader.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "loadingText", ["loc", [null, [7, 10], [7, 25]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/components/infinity-loader.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "infinityModel.reachedInfinity", ["loc", [null, [4, 8], [4, 37]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 2], [8, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/infinity-loader.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/components/inline-filters", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 12
            },
            "end": {
              "line": 3,
              "column": 63
            }
          },
          "moduleName": "netconfig/templates/components/inline-filters.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Inline Filters");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 26
            },
            "end": {
              "line": 5,
              "column": 44
            }
          },
          "moduleName": "netconfig/templates/components/inline-filters.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Edit");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 44
            },
            "end": {
              "line": 5,
              "column": 55
            }
          },
          "moduleName": "netconfig/templates/components/inline-filters.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 16
            },
            "end": {
              "line": 23,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/inline-filters.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "udp");
          var el2 = dom.createTextNode("UDP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "tcp");
          var el2 = dom.createTextNode("TCP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "icmp");
          var el2 = dom.createTextNode("ICMP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "telnet");
          var el2 = dom.createTextNode("Telnet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "udpall");
          var el2 = dom.createTextNode("UDPALL");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 20
              },
              "end": {
                "line": 38,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/components/inline-filters.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'value');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.attributes.name", ["loc", [null, [37, 41], [37, 61]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.attributes.name", ["loc", [null, [37, 65], [37, 89]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 16
            },
            "end": {
              "line": 39,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/inline-filters.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.dclst", ["loc", [null, [36, 28], [36, 41]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [36, 20], [38, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 42,
              "column": 16
            },
            "end": {
              "line": 42,
              "column": 112
            }
          },
          "moduleName": "netconfig/templates/components/inline-filters.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "reset");
          dom.setAttribute(el1, "class", "btn btn-cancel");
          var el2 = dom.createTextNode("Cancel");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/inline-filters.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "addinlinefilter");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "name");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Protocol");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("IP List");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("textarea");
        dom.setAttribute(el5, "name", "iplist");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Port List");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("textarea");
        dom.setAttribute(el5, "name", "portlist");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("DataCenter");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            \n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var element2 = dom.childAt(fragment, [2, 1, 1]);
        var element3 = dom.childAt(element2, [7]);
        var element4 = dom.childAt(element2, [11]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 3, 3);
        morphs[3] = dom.createAttrMorph(element3, 'class');
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [9]), 3, 3);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/inlinefilters"], [], 0, null, ["loc", [null, [3, 12], [3, 75]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [5, 32], [5, 38]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [5, 26], [5, 62]]]], ["block", "ember-chosen", [], ["name", "protocol", "action", "protocolchanged", "placeholder", "Select a protocol..."], 3, null, ["loc", [null, [17, 16], [23, 33]]]], ["attribute", "class", ["concat", ["formRow ", ["subexpr", "unless", [["get", "isShowPort", ["loc", [null, [29, 41], [29, 51]]], 0, 0, 0, 0], "dnone"], [], ["loc", [null, [29, 32], [29, 61]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "ember-chosen", [], ["name", "dc", "placeholder", "select dc..."], 4, null, ["loc", [null, [35, 16], [39, 33]]]], ["block", "link-to", ["settings/inlinefilters"], [], 5, null, ["loc", [null, [42, 16], [42, 124]]]], ["inline", "bs-primary", [], ["action", "addinlinefilter", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [43, 64], [43, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [43, 16], [43, 74]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/components/int-details", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/int-details.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "Cmp_int_details");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formRow");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("TYPE");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3, "type", "text");
        dom.setAttribute(el3, "style", "text-transform: capitalize");
        dom.setAttribute(el3, "readonly", "");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formRow");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3, "type", "text");
        dom.setAttribute(el3, "style", "text-transform: capitalize");
        dom.setAttribute(el3, "readonly", "");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 3]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element2, [3]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element1, 'value');
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[2] = dom.createAttrMorph(element3, 'value');
        return morphs;
      },
      statements: [["attribute", "value", ["concat", [["get", "cate", ["loc", [null, [4, 32], [4, 36]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [7, 11], [7, 20]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "type", ["loc", [null, [8, 32], [8, 36]]], 0, 0, 0, 0], ["get", "number", ["loc", [null, [8, 40], [8, 46]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/interface-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/interface-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      Interfaces\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "interfaceFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/json-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/json-view.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/lldp-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/lldp-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      LLDP\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "lldpFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/mem-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/mem-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/components/mem-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Memory Usage\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "membtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "memFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/mtr-profiles", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 12
            },
            "end": {
              "line": 3,
              "column": 59
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("MTR Profiles");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 26
            },
            "end": {
              "line": 5,
              "column": 44
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Edit");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 44
            },
            "end": {
              "line": 5,
              "column": 55
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 16
            },
            "end": {
              "line": 21,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "icmp");
          var el2 = dom.createTextNode("ICMP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "udp");
          var el2 = dom.createTextNode("UDP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "tcp");
          var el2 = dom.createTextNode("TCP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 16
            },
            "end": {
              "line": 27,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "router");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 20
                },
                "end": {
                  "line": 32,
                  "column": 20
                }
              },
              "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element2, 'value');
              morphs[1] = dom.createMorphAt(element2, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item.attributes.host", ["loc", [null, [31, 41], [31, 61]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.attributes.host", ["loc", [null, [31, 65], [31, 89]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 16
              },
              "end": {
                "line": 33,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "content", ["loc", [null, [30, 28], [30, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [30, 20], [32, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 16
            },
            "end": {
              "line": 34,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "routerChanged", "name", "router", "class", "required", "placeholder", "Select a router..."], 0, null, ["loc", [null, [28, 16], [33, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 16
            },
            "end": {
              "line": 41,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "network");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 46,
                    "column": 28
                  },
                  "end": {
                    "line": 48,
                    "column": 28
                  }
                },
                "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'value');
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "item.peer", ["loc", [null, [47, 45], [47, 54]]], 0, 0, 0, 0], "-", ["get", "subnet", ["loc", [null, [47, 59], [47, 65]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "subnet", ["loc", [null, [47, 69], [47, 79]]], 0, 0, 0, 0]],
              locals: ["subnet"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 20
                },
                "end": {
                  "line": 50,
                  "column": 20
                }
              },
              "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("optgroup");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [3]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'label');
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "label", ["get", "item.peer", ["loc", [null, [45, 42], [45, 51]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "item.subnets", ["loc", [null, [46, 36], [46, 48]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [46, 28], [48, 37]]]]],
            locals: ["item"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 16
              },
              "end": {
                "line": 51,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "routeData.bgpnetwork", ["loc", [null, [43, 28], [43, 48]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [43, 20], [50, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 16
            },
            "end": {
              "line": 52,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "networkChanged", "name", "network", "class", "required", "placeholder", "Select a group..."], 0, null, ["loc", [null, [42, 16], [51, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 16
            },
            "end": {
              "line": 82,
              "column": 110
            }
          },
          "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "reset");
          dom.setAttribute(el1, "class", "btn btn-cancel");
          var el2 = dom.createTextNode("Cancel");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/mtr-profiles.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "addmtrprofile");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Destination host");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "destination_host");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Protocol");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Router");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Network");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Peer");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "peer");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("<div class=\"formRow\">\n                <label>Router</label>\n{{#if isEdit}}\n                <input type=\"text\" name=\"router\" readonly/>\n                {{else}}\n                {{#ember-chosen name=\"router\" placeholder=\"Select a router...\"}}\n                    {{#each routeData as |item|}}\n                        <option value=\"{{item}}\">{{item}}</option>\n                    {{/each}}\n                {{/ember-chosen}}\n                {{/if}}            </div>");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Ttl");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "ttl");
        dom.setAttribute(el5, "class", "required");
        dom.setAttribute(el5, "isregex", "intiger");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow mT20");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "w180 fl ");
        var el6 = dom.createTextNode("DNS");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0, 1]);
        var element4 = dom.childAt(fragment, [2, 1, 1]);
        var element5 = dom.childAt(element4, [17]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [3]), 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [5]), 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [7]), 3, 3);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [15]), 3, 3);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/mtrprofiles"], [], 0, null, ["loc", [null, [3, 12], [3, 71]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [5, 32], [5, 38]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [5, 26], [5, 62]]]], ["block", "ember-chosen", [], ["name", "protocol", "placeholder", "Select a protocol..."], 3, null, ["loc", [null, [17, 16], [21, 33]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [25, 22], [25, 28]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [25, 16], [34, 23]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [39, 22], [39, 28]]], 0, 0, 0, 0]], [], 6, 7, ["loc", [null, [39, 16], [52, 23]]]], ["inline", "switch-btn", [], ["btnActive", true, "name", "dns"], ["loc", [null, [78, 16], [78, 56]]], 0, 0], ["block", "link-to", ["settings/mtrprofiles"], [], 8, null, ["loc", [null, [82, 16], [82, 122]]]], ["inline", "bs-primary", [], ["action", "addMTRProfile", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [83, 62], [83, 70]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [83, 16], [83, 72]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("netconfig/templates/components/ndp-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/ndp-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      NDP\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "ndpFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/packet-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/packet-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/packet-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Packet Loss\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "packetbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  \n \n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "packetlossFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/pop-over", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/components/pop-over.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "arrow");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n	 ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("×");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popover-content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          morphs[3] = dom.createElementMorph(element1);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["popover-title ", ["subexpr", "unless", [["get", "title", ["loc", [null, [3, 36], [3, 41]]], 0, 0, 0, 0], "hide"], [], ["loc", [null, [3, 27], [3, 50]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "t-lang", [["get", "title", ["loc", [null, [4, 13], [4, 18]]], 0, 0, 0, 0], ["get", "titleArgs", ["loc", [null, [4, 19], [4, 28]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 4], [4, 30]]], 0, 0], ["attribute", "class", ["subexpr", "if", [["get", "canShowClose", ["loc", [null, [5, 35], [5, 47]]], 0, 0, 0, 0], "close", "hide"], [], ["loc", [null, [null, null], [5, 64]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["close"], ["bubbles", false], ["loc", [null, [5, 65], [5, 97]]], 0, 0], ["content", "yield", ["loc", [null, [8, 4], [8, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/pop-over.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "canShow", ["loc", [null, [1, 6], [1, 13]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [10, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/port-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/port-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      Port Channel\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "portFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/routed-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/routed-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      Routed Ports\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "routedFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/router-page", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 12
            },
            "end": {
              "line": 3,
              "column": 50
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Routers");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 26
            },
            "end": {
              "line": 5,
              "column": 44
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Edit");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 44
            },
            "end": {
              "line": 5,
              "column": 55
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 20
              },
              "end": {
                "line": 14,
                "column": 131
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "radiolabel");
            var el2 = dom.createTextNode("WAN");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 20
              },
              "end": {
                "line": 15,
                "column": 131
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "radiolabel");
            var el2 = dom.createTextNode("LAN");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 24
                },
                "end": {
                  "line": 20,
                  "column": 141
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "radiolabel");
              var el2 = dom.createTextNode("IP address");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 24
                },
                "end": {
                  "line": 21,
                  "column": 140
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "radiolabel");
              var el2 = dom.createTextNode("Range");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 24
                },
                "end": {
                  "line": 22,
                  "column": 143
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "radiolabel");
              var el2 = dom.createTextNode("Network");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 24
                },
                "end": {
                  "line": 25,
                  "column": 112
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode(" Host IP ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("input");
              dom.setAttribute(el1, "type", "text");
              dom.setAttribute(el1, "name", "ipaddr");
              dom.setAttribute(el1, "class", "required");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 24
                },
                "end": {
                  "line": 29,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode(" From IP Address ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("input");
              dom.setAttribute(el1, "type", "text");
              dom.setAttribute(el1, "name", "start_ip");
              dom.setAttribute(el1, "class", "required");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode(" To IP Address ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("input");
              dom.setAttribute(el1, "type", "text");
              dom.setAttribute(el1, "name", "end_ip");
              dom.setAttribute(el1, "class", "required");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 24
                },
                "end": {
                  "line": 30,
                  "column": 116
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode(" Network ID ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("input");
              dom.setAttribute(el1, "type", "text");
              dom.setAttribute(el1, "name", "net");
              dom.setAttribute(el1, "class", "required");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 16
              },
              "end": {
                "line": 32,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createTextNode(" Host Address Type ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("   \n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("   \n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(fragment, [3]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(element4, 3, 3);
            morphs[1] = dom.createMorphAt(element4, 5, 5);
            morphs[2] = dom.createMorphAt(element4, 7, 7);
            morphs[3] = dom.createMorphAt(element5, 1, 1);
            morphs[4] = dom.createMorphAt(element5, 3, 3);
            morphs[5] = dom.createMorphAt(element5, 5, 5);
            return morphs;
          },
          statements: [["block", "radio-button", [], ["value", "ip", "groupValue", ["subexpr", "@mut", [["get", "host_type", ["loc", [null, [20, 62], [20, 71]]], 0, 0, 0, 0]], [], [], 0, 0], "changed", "hostTypeChanged"], 0, null, ["loc", [null, [20, 24], [20, 158]]]], ["block", "radio-button", [], ["value", "range", "groupValue", ["subexpr", "@mut", [["get", "host_type", ["loc", [null, [21, 65], [21, 74]]], 0, 0, 0, 0]], [], [], 0, 0], "changed", "hostTypeChanged"], 1, null, ["loc", [null, [21, 24], [21, 157]]]], ["block", "radio-button", [], ["value", "network", "groupValue", ["subexpr", "@mut", [["get", "host_type", ["loc", [null, [22, 67], [22, 76]]], 0, 0, 0, 0]], [], [], 0, 0], "changed", "hostTypeChanged"], 2, null, ["loc", [null, [22, 24], [22, 160]]]], ["block", "if", [["get", "ip", ["loc", [null, [25, 30], [25, 32]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [25, 24], [25, 119]]]], ["block", "if", [["get", "range", ["loc", [null, [26, 30], [26, 35]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [26, 24], [29, 31]]]], ["block", "if", [["get", "network", ["loc", [null, [30, 30], [30, 37]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [30, 24], [30, 123]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 12
            },
            "end": {
              "line": 33,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Device Type");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("   \n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element6, 3, 3);
          morphs[1] = dom.createMorphAt(element6, 5, 5);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "radio-button", [], ["value", "WAN", "groupValue", ["subexpr", "@mut", [["get", "devtype", ["loc", [null, [14, 59], [14, 66]]], 0, 0, 0, 0]], [], [], 0, 0], "changed", "deviceTypeToggled"], 0, null, ["loc", [null, [14, 20], [14, 148]]]], ["block", "radio-button", [], ["value", "LAN", "groupValue", ["subexpr", "@mut", [["get", "devtype", ["loc", [null, [15, 59], [15, 66]]], 0, 0, 0, 0]], [], [], 0, 0], "changed", "deviceTypeToggled"], 1, null, ["loc", [null, [15, 20], [15, 148]]]], ["block", "if", [["get", "islan", ["loc", [null, [17, 22], [17, 27]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [17, 16], [32, 23]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 12
            },
            "end": {
              "line": 44,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Device Type");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "devicetype");
          dom.setAttribute(el2, "readonly", "");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Host (IP address)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "host");
          dom.setAttribute(el2, "class", "required");
          dom.setAttribute(el2, "readonly", "");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 16
              },
              "end": {
                "line": 50,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createTextNode("Host (IP address)");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "text");
            dom.setAttribute(el2, "name", "host");
            dom.setAttribute(el2, "class", "required");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 12
            },
            "end": {
              "line": 51,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "islan", ["loc", [null, [45, 26], [45, 31]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [45, 16], [50, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 12
            },
            "end": {
              "line": 69,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Port");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "port");
          dom.setAttribute(el2, "class", "required");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Name");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "name");
          dom.setAttribute(el2, "class", "required");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 24
              },
              "end": {
                "line": 75,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element3, 'value');
            morphs[1] = dom.createMorphAt(element3, 0, 0);
            morphs[2] = dom.createMorphAt(element3, 2, 2);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.id", ["loc", [null, [74, 45], [74, 52]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.attributes.vendor", ["loc", [null, [74, 56], [74, 82]]], 0, 0, 0, 0], ["content", "item.attributes.modelname", ["loc", [null, [74, 83], [74, 112]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 20
            },
            "end": {
              "line": 76,
              "column": 20
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.dvlst", ["loc", [null, [73, 32], [73, 45]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [73, 24], [75, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 81,
                "column": 24
              },
              "end": {
                "line": 83,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element2, 'value');
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.attributes.name", ["loc", [null, [82, 45], [82, 65]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.attributes.name", ["loc", [null, [82, 69], [82, 93]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 80,
              "column": 20
            },
            "end": {
              "line": 84,
              "column": 20
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.dclst", ["loc", [null, [81, 32], [81, 45]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [81, 24], [83, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 12
            },
            "end": {
              "line": 91,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Enable password");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "password");
          dom.setAttribute(el2, "name", "enpwd");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 96,
                  "column": 24
                },
                "end": {
                  "line": 98,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'value');
              morphs[1] = dom.createMorphAt(element1, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "cat", ["loc", [null, [97, 45], [97, 48]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "cat", ["loc", [null, [97, 52], [97, 59]]], 0, 0, 0, 0]],
            locals: ["cat"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 95,
                "column": 20
              },
              "end": {
                "line": 99,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "categories", ["loc", [null, [96, 32], [96, 42]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [96, 24], [98, 33]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 104,
                  "column": 24
                },
                "end": {
                  "line": 106,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/components/router-page.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'value');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [105, 45], [105, 48]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [105, 52], [105, 59]]], 0, 0, 0, 0]],
            locals: ["pod"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 103,
                "column": 20
              },
              "end": {
                "line": 107,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "podtypes", ["loc", [null, [104, 32], [104, 40]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [104, 24], [106, 33]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 16
              },
              "end": {
                "line": 118,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createTextNode("Rack Label");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "text");
            dom.setAttribute(el2, "name", "racklabel");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createTextNode("Tag");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "text");
            dom.setAttribute(el2, "name", "tag");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 12
            },
            "end": {
              "line": 119,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Category");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Pod Type");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 3, 3);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["name", "category", "placeholder", "Select Category..."], 0, null, ["loc", [null, [95, 20], [99, 37]]]], ["block", "ember-chosen", [], ["name", "podtype", "placeholder", "Select Pod type..."], 1, null, ["loc", [null, [103, 20], [107, 37]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [109, 22], [109, 28]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [109, 16], [118, 23]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child11 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 121,
                "column": 36
              },
              "end": {
                "line": 121,
                "column": 126
              }
            },
            "moduleName": "netconfig/templates/components/router-page.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "reset");
            dom.setAttribute(el1, "class", "btn btn-cancel");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 121,
              "column": 16
            },
            "end": {
              "line": 121,
              "column": 138
            }
          },
          "moduleName": "netconfig/templates/components/router-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["settings/routers"], [], 0, null, ["loc", [null, [121, 36], [121, 138]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 127,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/router-page.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "addrouter");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "username");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "password");
        dom.setAttribute(el5, "name", "password");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Device");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Data Center");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0, 1]);
        var element8 = dom.childAt(fragment, [2, 1, 1]);
        var element9 = dom.childAt(element8, [18]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element7, [5]), 0, 0);
        morphs[2] = dom.createMorphAt(element8, 1, 1);
        morphs[3] = dom.createMorphAt(element8, 3, 3);
        morphs[4] = dom.createMorphAt(element8, 9, 9);
        morphs[5] = dom.createMorphAt(dom.childAt(element8, [11]), 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element8, [13]), 3, 3);
        morphs[7] = dom.createMorphAt(element8, 15, 15);
        morphs[8] = dom.createMorphAt(element8, 16, 16);
        morphs[9] = dom.createMorphAt(element9, 1, 1);
        morphs[10] = dom.createMorphAt(element9, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/routers"], [], 0, null, ["loc", [null, [3, 12], [3, 62]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [5, 32], [5, 38]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [5, 26], [5, 62]]]], ["block", "unless", [["get", "isEdit", ["loc", [null, [11, 22], [11, 28]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [11, 12], [33, 23]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [35, 18], [35, 24]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [35, 12], [51, 19]]]], ["block", "unless", [["get", "islan", ["loc", [null, [60, 22], [60, 27]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [60, 12], [69, 23]]]], ["block", "ember-chosen", [], ["action", "changeDevice", "name", "deviceinfo_id", "placeholder", "select dc..."], 7, null, ["loc", [null, [72, 20], [76, 37]]]], ["block", "ember-chosen", [], ["name", "dc", "placeholder", "select dc..."], 8, null, ["loc", [null, [80, 20], [84, 37]]]], ["block", "if", [["get", "showEnPwd", ["loc", [null, [86, 18], [86, 27]]], 0, 0, 0, 0]], [], 9, null, ["loc", [null, [86, 12], [91, 19]]]], ["block", "if", [["get", "islan", ["loc", [null, [92, 18], [92, 23]]], 0, 0, 0, 0]], [], 10, null, ["loc", [null, [92, 12], [119, 19]]]], ["block", "unless", [["get", "isSaving", ["loc", [null, [121, 26], [121, 34]]], 0, 0, 0, 0]], [], 11, null, ["loc", [null, [121, 16], [121, 149]]]], ["inline", "bs-primary", [], ["action", "addRouter", "loadingTxt", "Saving..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [122, 80], [122, 88]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [122, 16], [122, 90]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11]
    };
  })());
});
define("netconfig/templates/components/switch-btn", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 8
          }
        },
        "moduleName": "netconfig/templates/components/switch-btn.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "switchBtnCont");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "switchBtnInfo");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" \n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "switchBtnInner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createElementMorph(element0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["switchBtn ", ["subexpr", "if", [["get", "btnActive", ["loc", [null, [2, 32], [2, 41]]], 0, 0, 0, 0], "active"], [], ["loc", [null, [2, 27], [2, 52]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["toggleBtn"], [], ["loc", [null, [2, 54], [2, 76]]], 0, 0], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "btnActive", ["loc", [null, [3, 22], [3, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "type", "hidden", "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [3, 51], [3, 55]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 8], [3, 57]]], 0, 0], ["content", "sbtnInfo", ["loc", [null, [4, 36], [4, 48]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/sys-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/sys-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/components/sys-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      System Usage\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("     \n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "sysbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   \n \n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "sysFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/temp-fourth-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/temp-fourth-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/temp-fourth-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Temperature\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("       \n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "tempfourthbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        \n\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "tempFourthFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/temp-second-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/temp-second-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/temp-second-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Temperature\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("       \n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "tempsecondbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        \n\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "tempSecondFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/temp-third-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/temp-third-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/temp-third-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Temperature\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("       \n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "tempthirdbtn_wid");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        \n\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "tempThirdFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/temp-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 24
            },
            "end": {
              "line": 16,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/components/temp-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'value');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "pod.threshold", ["loc", [null, [15, 42], [15, 55]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "pod.uid", ["loc", [null, [15, 68], [15, 75]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "pod.path", ["loc", [null, [15, 88], [15, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod.override", ["loc", [null, [15, 101], [15, 117]]], 0, 0, 0, 0]],
        locals: ["pod"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/temp-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading graph timePicker");
        dom.setAttribute(el2, "style", "justify-content: space-between;padding-right: 10px;");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3, "class", "widget--title");
        dom.setAttribute(el3, "style", "width: fit-content;padding-left: 0px !important");
        var el4 = dom.createTextNode("\n      Temperature\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("       \n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "justify-content: right;");
        var el4 = dom.createTextNode("       \n                  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "operation");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:120px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "selected", "");
        dom.setAttribute(el5, "value", "set");
        var el6 = dom.createTextNode("Set threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "remove");
        var el6 = dom.createTextNode("Remove threshold");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "fieldType");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:100px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "id", "");
        dom.setAttribute(el5, "class", "");
        dom.setAttribute(el5, "value", "");
        var el6 = dom.createTextNode("Select");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                   :\n                    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pivot");
        dom.setAttribute(el4, "style", "font-size: 13px !important;width:30px !important;height:30px !important;");
        dom.setAttribute(el4, "placeholder", "Select Field");
        var el5 = dom.createTextNode("\n                        \n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "max");
        var el6 = dom.createTextNode("	>");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "min");
        var el6 = dom.createTextNode("<");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                   ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" :\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "style", "margin: 0");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "number");
        dom.setAttribute(el4, "style", "width: 80px;height:30px !important;");
        dom.setAttribute(el4, "name", "threshold");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "tempbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        \n\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "tempFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element2, 'onchange');
        morphs[1] = dom.createAttrMorph(element3, 'onchange');
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createAttrMorph(element4, 'onchange');
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "onchange", ["subexpr", "action", ["onOperationChange"], [], ["loc", [null, [null, null], [7, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [null, null], [12, 75]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "tes.nameList", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 24], [16, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["onPivotChange"], [], ["loc", [null, [null, null], [19, 77]]], 0, 0], 0, 0, 0, 0], ["content", "tes.unit", ["loc", [null, [26, 16], [26, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/components/traffic-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/components/traffic-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget latestCommit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget--heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget--title");
        var el4 = dom.createTextNode("\n      Traffic Counter\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2, "id", "trafficFrame");
        dom.setAttribute(el2, "src", "");
        dom.setAttribute(el2, "style", "border-style: none;width: 100%; height: 100%;");
        dom.setAttribute(el2, "frameborder", "0");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/components/zohoservice-page", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 12
            },
            "end": {
              "line": 3,
              "column": 64
            }
          },
          "moduleName": "netconfig/templates/components/zohoservice-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Zoho Services");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 26
            },
            "end": {
              "line": 5,
              "column": 44
            }
          },
          "moduleName": "netconfig/templates/components/zohoservice-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Edit");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 44
            },
            "end": {
              "line": 5,
              "column": 55
            }
          },
          "moduleName": "netconfig/templates/components/zohoservice-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 16
            },
            "end": {
              "line": 19,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/zohoservice-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "url");
          dom.setAttribute(el1, "class", "required");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 16
            },
            "end": {
              "line": 21,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/components/zohoservice-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "url");
          dom.setAttribute(el1, "class", "required");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 16
            },
            "end": {
              "line": 24,
              "column": 114
            }
          },
          "moduleName": "netconfig/templates/components/zohoservice-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "reset");
          dom.setAttribute(el1, "class", "btn btn-cancel");
          var el2 = dom.createTextNode("Cancel");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/components/zohoservice-page.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "addservice");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Service Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "name");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Domain Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(fragment, [2, 1, 1]);
        var element2 = dom.childAt(element1, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 3, 3);
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/zohoserviceview"], [], 0, null, ["loc", [null, [3, 12], [3, 76]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [5, 32], [5, 38]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [5, 26], [5, 62]]]], ["block", "if", [["get", "isEdit", ["loc", [null, [17, 22], [17, 28]]], 0, 0, 0, 0]], [], 3, 4, ["loc", [null, [17, 16], [21, 23]]]], ["block", "link-to", ["settings/zohoserviceview"], [], 5, null, ["loc", [null, [24, 16], [24, 126]]]], ["inline", "bs-primary", [], ["action", "addService", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [25, 59], [25, 67]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [25, 16], [25, 69]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/conf", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/conf.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Configuration");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "routerConnect");
        var el3 = dom.createTextNode("Connected to ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("b");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" router. ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("b");
        dom.setAttribute(el3, "style", "color: red;");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" | ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "href", "javascript:void(0);");
        var el4 = dom.createTextNode("Disconnect");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("<aside>\n    <h2>Settings</h2>\n    <ul>\n        <li>{{#link-to \"conf.index\"}}configuration{{/link-to}}</li>\n        <li>{{#link-to \"conf.commits\"}}commit log{{/link-to}}</li>\n    </ul>\n</aside>");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 3]);
        var element1 = dom.childAt(element0, [5]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "rval", ["loc", [null, [5, 48], [5, 56]]], 0, 0, 0, 0], ["content", "timerObj.timer", ["loc", [null, [5, 92], [5, 110]]], 0, 0, 0, 0], ["element", "action", ["disconnect"], [], ["loc", [null, [5, 147], [5, 170]]], 0, 0], ["content", "outlet", ["loc", [null, [14, 0], [14, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/conf/arista", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 52
            }
          },
          "moduleName": "netconfig/templates/conf/arista.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("RouteMap");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 12
            },
            "end": {
              "line": 7,
              "column": 59
            }
          },
          "moduleName": "netconfig/templates/conf/arista.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Prefixlist");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 12
            },
            "end": {
              "line": 10,
              "column": 59
            }
          },
          "moduleName": "netconfig/templates/conf/arista.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Accesslist");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/conf/arista.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("aside");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("Settings");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "container settings");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [5, 1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [7, 1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["conf.arista.armap"], [], 0, null, ["loc", [null, [4, 12], [4, 64]]]], ["block", "link-to", ["conf.arista.prefixlist"], [], 1, null, ["loc", [null, [7, 12], [7, 71]]]], ["block", "link-to", ["conf.arista.accesslist"], [], 2, null, ["loc", [null, [10, 12], [10, 71]]]], ["content", "outlet", ["loc", [null, [15, 4], [15, 14]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/conf/arista/accesslist/index",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":10,"column":8},"end":{"line":14,"column":8}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","addprefix");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"aria-hidden","true");dom.setAttribute(el2,"style","opacity: 1;");var el3=dom.createTextNode("Check Current Actions");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element30=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element30);return morphs;},statements:[["element","action",["Sendtoapproval"],[],["loc",[null,[12,56],[12,85]]],0,0]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":14,"column":8},"end":{"line":18,"column":8}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","addprefix");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"aria-hidden","true");dom.setAttribute(el2,"style","opacity: 0.4;cursor:default");var el3=dom.createTextNode("Check Current Actions");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element29=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element29);return morphs;},statements:[["element","action",["Sendtoapproval"],[],["loc",[null,[16,72],[16,101]]],0,0]],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":22,"column":4},"end":{"line":28,"column":6}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","name");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","ShowValue");var el3=dom.createElement("i");dom.setAttribute(el3,"aria-hidden","true");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createElement("i");dom.setAttribute(el3,"class","fa fa-plus");dom.setAttribute(el3,"aria-hidden","true");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1]);var element27=dom.childAt(element26,[1,0]);var element28=dom.childAt(element26,[5,0]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element27,'class');morphs[1] = dom.createElementMorph(element27);morphs[2] = dom.createMorphAt(dom.childAt(element26,[3]),0,0);morphs[3] = dom.createElementMorph(element28);return morphs;},statements:[["attribute","class",["concat",[["subexpr","unless",[["get","i.show",["loc",[null,[24,51],[24,57]]],0,0,0,0],"fa fa-plus-square-o","fa fa-minus-square-o"],[],["loc",[null,[24,42],[24,104]]],0,0]],0,0,0,0,0],0,0,0,0],["element","action",["ShowValue",["get","i",["loc",[null,[24,146],[24,147]]],0,0,0,0]],[],["loc",[null,[24,125],[24,149]]],0,0],["content","i.name",["loc",[null,[25,14],[25,24]]],0,0,0,0],["element","action",["ShowAddAcc",true,"standard",["get","i",["loc",[null,[26,93],[26,94]]],0,0,0,0]],[],["loc",[null,[26,55],[26,96]]],0,0]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":30,"column":6},"end":{"line":39,"column":8}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","title");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","seq-no");var el3=dom.createTextNode("seq-no");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","sourceAdd");var el3=dom.createTextNode("source-address");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","sourceLen");var el3=dom.createTextNode("source-length");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","log");var el3=dom.createTextNode("log");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","action");var el3=dom.createTextNode("action");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","type");var el3=dom.createTextNode("type");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":49,"column":24},"end":{"line":51,"column":24}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                              Processing...\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":51,"column":24},"end":{"line":53,"column":24}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                              ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode(" ");dom.appendChild(el0,el1);var el1=dom.createElement("i");dom.setAttribute(el1,"class","fa fa-chevron-down");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["content","i.action",["loc",[null,[52,30],[52,42]]],0,0,0,0]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":29,"column":7},"end":{"line":65,"column":6}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","value");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","seq-no");var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","sourceAdd");var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","sourceLen");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","log");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","action");var el4=dom.createTextNode("\n               ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","access-dropdown");var el5=dom.createTextNode("\n                    ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","access-dropdown-btn");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("                    ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n                        ");dom.appendChild(el4,el5);var el5=dom.createElement("ul");var el6=dom.createTextNode("\n                            ");dom.appendChild(el5,el6);var el6=dom.createElement("li");dom.setAttribute(el6,"class","permit");var el7=dom.createElement("i");dom.setAttribute(el7,"class","fa fa-check");dom.appendChild(el6,el7);var el7=dom.createTextNode(" Permit");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                            ");dom.appendChild(el5,el6);var el6=dom.createElement("li");dom.setAttribute(el6,"class","deny");var el7=dom.createElement("i");dom.setAttribute(el7,"class","fa fa-ban");dom.appendChild(el6,el7);var el7=dom.createTextNode(" Deny");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n                ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","type");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");var el4=dom.createElement("i");dom.setAttribute(el4,"class","fa fa-minus");dom.setAttribute(el4,"aria-hidden","true");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element19=dom.childAt(fragment,[2,1]);var element20=dom.childAt(element19,[9,1]);var element21=dom.childAt(element20,[1]);var element22=dom.childAt(element20,[3]);var element23=dom.childAt(element22,[1]);var element24=dom.childAt(element22,[3]);var element25=dom.childAt(element19,[13,0]);var morphs=new Array(13);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createAttrMorph(element19,'id');morphs[2] = dom.createMorphAt(dom.childAt(element19,[1]),1,1);morphs[3] = dom.createMorphAt(dom.childAt(element19,[3]),1,1);morphs[4] = dom.createMorphAt(dom.childAt(element19,[5]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(element19,[7]),0,0);morphs[6] = dom.createElementMorph(element21);morphs[7] = dom.createMorphAt(element21,1,1);morphs[8] = dom.createAttrMorph(element22,'class');morphs[9] = dom.createElementMorph(element23);morphs[10] = dom.createElementMorph(element24);morphs[11] = dom.createMorphAt(dom.childAt(element19,[11]),0,0);morphs[12] = dom.createElementMorph(element25);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","if",[["get","i.name",["loc",[null,[30,12],[30,18]]],0,0,0,0]],[],0,null,["loc",[null,[30,6],[39,15]]]],["attribute","id",["concat",[["get","i.sec_id",["loc",[null,[41,23],[41,31]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","i.seqno",["loc",[null,[42,36],[42,47]]],0,0,0,0],["content","i.srcaddr",["loc",[null,[43,39],[43,52]]],0,0,0,0],["content","i.srclen",["loc",[null,[44,38],[44,50]]],0,0,0,0],["content","i.log",["loc",[null,[45,32],[45,41]]],0,0,0,0],["element","action",["showDropDown",["get","i",["loc",[null,[48,78],[48,79]]],0,0,0,0]],[],["loc",[null,[48,54],[48,81]]],0,0],["block","if",[["get","i.isProcessing",["loc",[null,[49,30],[49,44]]],0,0,0,0]],[],1,2,["loc",[null,[49,24],[53,31]]]],["attribute","class",["concat",[["subexpr","unless",[["get","i.isShow",["loc",[null,[55,44],[55,52]]],0,0,0,0],"dnone"],[],["loc",[null,[55,35],[55,62]]],0,0]],0,0,0,0,0],0,0,0,0],["element","action",["updateStatus",["get","i",["loc",[null,[56,71],[56,72]]],0,0,0,0],"permit","std"],[],["loc",[null,[56,47],[56,90]]],0,0],["element","action",["updateStatus",["get","i",["loc",[null,[57,69],[57,70]]],0,0,0,0],"deny","std"],[],["loc",[null,[57,45],[57,86]]],0,0],["content","i.type",["loc",[null,[61,33],[61,43]]],0,0,0,0],["element","action",["DeletePrefix",["get","i.itmname",["loc",[null,[62,86],[62,95]]],0,0,0,0],["get","i.seqno",["loc",[null,[62,96],[62,103]]],0,0,0,0],"stdlist",["get","i",["loc",[null,[62,114],[62,115]]],0,0,0,0]],[],["loc",[null,[62,62],[62,118]]],0,0]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":21,"column":4},"end":{"line":66,"column":4}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","i.name",["loc",[null,[22,10],[22,16]]],0,0,0,0]],[],0,null,["loc",[null,[22,4],[28,13]]]],["block","if",[["get","i.show",["loc",[null,[29,13],[29,19]]],0,0,0,0]],[],1,null,["loc",[null,[29,7],[65,13]]]]],locals:["i"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":20,"column":4},"end":{"line":67,"column":4}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","stdlist",["loc",[null,[21,12],[21,19]]],0,0,0,0]],[],0,null,["loc",[null,[21,4],[66,13]]]]],locals:[],templates:[child0]};})();var child3=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":71,"column":8},"end":{"line":77,"column":6}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","name");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","ShowValue");var el3=dom.createElement("i");dom.setAttribute(el3,"aria-hidden","true");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createElement("i");dom.setAttribute(el3,"class","fa fa-plus");dom.setAttribute(el3,"aria-hidden","true");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element16=dom.childAt(fragment,[1]);var element17=dom.childAt(element16,[1,0]);var element18=dom.childAt(element16,[5,0]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element17,'class');morphs[1] = dom.createElementMorph(element17);morphs[2] = dom.createMorphAt(dom.childAt(element16,[3]),0,0);morphs[3] = dom.createElementMorph(element18);return morphs;},statements:[["attribute","class",["concat",[["subexpr","unless",[["get","i.show",["loc",[null,[73,55],[73,61]]],0,0,0,0],"fa fa-plus-square-o","fa fa-minus-square-o"],[],["loc",[null,[73,46],[73,108]]],0,0]],0,0,0,0,0],0,0,0,0],["element","action",["ShowValue",["get","i",["loc",[null,[73,150],[73,151]]],0,0,0,0]],[],["loc",[null,[73,129],[73,153]]],0,0],["content","i.name",["loc",[null,[74,14],[74,24]]],0,0,0,0],["element","action",["ShowAddAcc",true,"extended",["get","i",["loc",[null,[75,93],[75,94]]],0,0,0,0]],[],["loc",[null,[75,55],[75,96]]],0,0]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":79,"column":6},"end":{"line":93,"column":8}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","exttitle");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","seq-no");var el3=dom.createTextNode("seq-no");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","sourceAdd");var el3=dom.createTextNode("source-address");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","sourceLen");var el3=dom.createTextNode("source-length");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","sourcePort");var el3=dom.createTextNode("source-port");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","destAdd");var el3=dom.createTextNode("destination-address");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","destLen");var el3=dom.createTextNode("destination-length");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","destPort");var el3=dom.createTextNode("destination-port");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","action");var el3=dom.createTextNode("action");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","protocol");var el3=dom.createTextNode("protocol");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","log");var el3=dom.createTextNode("log");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","type");var el3=dom.createTextNode("type");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":99,"column":39},"end":{"line":99,"column":69}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","i.srcport",["loc",[null,[99,56],[99,69]]],0,0,0,0]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":99,"column":69},"end":{"line":99,"column":81}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("NONE");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":102,"column":37},"end":{"line":102,"column":67}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","i.dstport",["loc",[null,[102,54],[102,67]]],0,0,0,0]],locals:[],templates:[]};})();var child4=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":102,"column":67},"end":{"line":102,"column":79}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("NONE");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child5=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":106,"column":24},"end":{"line":108,"column":24}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                              Processing...\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child6=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":108,"column":24},"end":{"line":110,"column":24}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                              ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode(" ");dom.appendChild(el0,el1);var el1=dom.createElement("i");dom.setAttribute(el1,"class","fa fa-chevron-down");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["content","i.action",["loc",[null,[109,30],[109,42]]],0,0,0,0]],locals:[],templates:[]};})();var child7=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":119,"column":32},"end":{"line":119,"column":51}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("true");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child8=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":119,"column":51},"end":{"line":119,"column":64}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("false");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":78,"column":6},"end":{"line":124,"column":6}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","extvalue");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","seq-no");var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","sourceAdd");var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","sourceLen");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","sourcePort");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","destAdd");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","destLen");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","destPort");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","action");var el4=dom.createTextNode("\n               ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","access-dropdown");var el5=dom.createTextNode("\n                    ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","access-dropdown-btn");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("                    ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n                        ");dom.appendChild(el4,el5);var el5=dom.createElement("ul");var el6=dom.createTextNode("\n                            ");dom.appendChild(el5,el6);var el6=dom.createElement("li");dom.setAttribute(el6,"class","permit");var el7=dom.createElement("i");dom.setAttribute(el7,"class","fa fa-check");dom.appendChild(el6,el7);var el7=dom.createTextNode(" Permit");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                            ");dom.appendChild(el5,el6);var el6=dom.createElement("li");dom.setAttribute(el6,"class","deny");var el7=dom.createElement("i");dom.setAttribute(el7,"class","fa fa-ban");dom.appendChild(el6,el7);var el7=dom.createTextNode(" Deny");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n                ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","protocol");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","log");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","type");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("span");var el4=dom.createElement("i");dom.setAttribute(el4,"class","fa fa-minus");dom.setAttribute(el4,"aria-hidden","true");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element9=dom.childAt(fragment,[2,1]);var element10=dom.childAt(element9,[15,1]);var element11=dom.childAt(element10,[1]);var element12=dom.childAt(element10,[3]);var element13=dom.childAt(element12,[1]);var element14=dom.childAt(element12,[3]);var element15=dom.childAt(element9,[23,0]);var morphs=new Array(18);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createAttrMorph(element9,'id');morphs[2] = dom.createMorphAt(dom.childAt(element9,[1]),1,1);morphs[3] = dom.createMorphAt(dom.childAt(element9,[3]),1,1);morphs[4] = dom.createMorphAt(dom.childAt(element9,[5]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(element9,[7]),0,0);morphs[6] = dom.createMorphAt(dom.childAt(element9,[9]),0,0);morphs[7] = dom.createMorphAt(dom.childAt(element9,[11]),0,0);morphs[8] = dom.createMorphAt(dom.childAt(element9,[13]),0,0);morphs[9] = dom.createElementMorph(element11);morphs[10] = dom.createMorphAt(element11,1,1);morphs[11] = dom.createAttrMorph(element12,'class');morphs[12] = dom.createElementMorph(element13);morphs[13] = dom.createElementMorph(element14);morphs[14] = dom.createMorphAt(dom.childAt(element9,[17]),0,0);morphs[15] = dom.createMorphAt(dom.childAt(element9,[19]),0,0);morphs[16] = dom.createMorphAt(dom.childAt(element9,[21]),0,0);morphs[17] = dom.createElementMorph(element15);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","if",[["get","i.name",["loc",[null,[79,12],[79,18]]],0,0,0,0]],[],0,null,["loc",[null,[79,6],[93,15]]]],["attribute","id",["concat",[["get","i.sec_id",["loc",[null,[95,23],[95,31]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","i.seqno",["loc",[null,[96,36],[96,47]]],0,0,0,0],["content","i.srcaddr",["loc",[null,[97,39],[97,52]]],0,0,0,0],["content","i.srclen",["loc",[null,[98,38],[98,50]]],0,0,0,0],["block","if",[["get","i.srcport",["loc",[null,[99,45],[99,54]]],0,0,0,0]],[],1,2,["loc",[null,[99,39],[99,88]]]],["content","i.dstaddr",["loc",[null,[100,36],[100,49]]],0,0,0,0],["content","i.dstlen",["loc",[null,[101,36],[101,48]]],0,0,0,0],["block","if",[["get","i.dstport",["loc",[null,[102,43],[102,52]]],0,0,0,0]],[],3,4,["loc",[null,[102,37],[102,86]]]],["element","action",["showDropDown",["get","i",["loc",[null,[105,78],[105,79]]],0,0,0,0]],[],["loc",[null,[105,54],[105,81]]],0,0],["block","if",[["get","i.isProcessing",["loc",[null,[106,30],[106,44]]],0,0,0,0]],[],5,6,["loc",[null,[106,24],[110,31]]]],["attribute","class",["concat",[["subexpr","unless",[["get","i.isShow",["loc",[null,[112,44],[112,52]]],0,0,0,0],"dnone"],[],["loc",[null,[112,35],[112,62]]],0,0]],0,0,0,0,0],0,0,0,0],["element","action",["updateStatus",["get","i",["loc",[null,[113,71],[113,72]]],0,0,0,0],"permit","ext"],[],["loc",[null,[113,47],[113,90]]],0,0],["element","action",["updateStatus",["get","i",["loc",[null,[114,69],[114,70]]],0,0,0,0],"deny","ext"],[],["loc",[null,[114,45],[114,85]]],0,0],["content","i.protocol",["loc",[null,[118,37],[118,51]]],0,0,0,0],["block","if",[["get","i.other",["loc",[null,[119,38],[119,45]]],0,0,0,0]],[],7,8,["loc",[null,[119,32],[119,71]]]],["content","i.type",["loc",[null,[120,33],[120,43]]],0,0,0,0],["element","action",["DeletePrefix",["get","i.itmname",["loc",[null,[121,86],[121,95]]],0,0,0,0],["get","i.seqno",["loc",[null,[121,96],[121,103]]],0,0,0,0],"extlist",["get","i",["loc",[null,[121,114],[121,115]]],0,0,0,0]],[],["loc",[null,[121,62],[121,117]]],0,0]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":70,"column":6},"end":{"line":125,"column":4}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","i.name",["loc",[null,[71,14],[71,20]]],0,0,0,0]],[],0,null,["loc",[null,[71,8],[77,13]]]],["block","if",[["get","i.show",["loc",[null,[78,12],[78,18]]],0,0,0,0]],[],1,null,["loc",[null,[78,6],[124,13]]]]],locals:["i"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":69,"column":4},"end":{"line":126,"column":4}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","extlist",["loc",[null,[70,14],[70,21]]],0,0,0,0]],[],0,null,["loc",[null,[70,6],[125,13]]]]],locals:[],templates:[child0]};})();var child4=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":143,"column":10},"end":{"line":145,"column":10}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("input");dom.setAttribute(el1,"type","text");dom.setAttribute(el1,"name","aclname");dom.setAttribute(el1,"class","required");dom.setAttribute(el1,"reqmsg","Plese enter accesslist name");dom.setAttribute(el1,"readonly","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element5=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createAttrMorph(element5,'value');return morphs;},statements:[["attribute","value",["concat",[["get","Aclname",["loc",[null,[144,55],[144,62]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":145,"column":10},"end":{"line":147,"column":10}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("input");dom.setAttribute(el1,"type","text");dom.setAttribute(el1,"name","aclname");dom.setAttribute(el1,"class","required");dom.setAttribute(el1,"reqmsg","Plese enter accesslist name");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":132,"column":0},"end":{"line":185,"column":0}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"id","myModal");dom.setAttribute(el1,"class","modal");dom.setAttribute(el1,"style","display: block;");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","info-content arista");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","title");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","close");var el5=dom.createTextNode("×");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","fixedTitleAcc");var el5=dom.createTextNode("Add Standard Accesslist");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","prefixAddForm");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("form");dom.setAttribute(el4,"name","prefixAdd");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("Accesslist name");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","prefixDelFormRow formRow");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n         ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"value","true");dom.setAttribute(el5,"name","trigger");dom.setAttribute(el5,"type","hidden");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"value","standard");dom.setAttribute(el5,"name","acltype");dom.setAttribute(el5,"type","hidden");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("Seq no");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","prefixDelFormRow formRow");var el6=dom.createTextNode("\n            ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","text");dom.setAttribute(el6,"name","seqno");dom.setAttribute(el6,"class","required");dom.setAttribute(el6,"reqmsg","Plese enter seq-no");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("Action");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","prefixDelFormRow formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("select");dom.setAttribute(el6,"name","action");var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("option");dom.setAttribute(el7,"value","permit");var el8=dom.createTextNode("Permit");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("option");dom.setAttribute(el7,"value","deny");var el8=dom.createTextNode("Deny");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("IP Address");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","prefixDelFormRow formRow");var el6=dom.createTextNode("\n            ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","text");dom.setAttribute(el6,"name","addr");dom.setAttribute(el6,"class","required");dom.setAttribute(el6,"reqmsg","Plese enter IP");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("Netmask");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","prefixDelFormRow formRow");var el6=dom.createTextNode("\n            ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","text");dom.setAttribute(el6,"name","cidr");dom.setAttribute(el6,"class","required");dom.setAttribute(el6,"reqmsg","Plese enter netmask");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("Log");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","prefixDelFormRow formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("select");dom.setAttribute(el6,"id","log");dom.setAttribute(el6,"name","log");var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("option");dom.setAttribute(el7,"value","true");var el8=dom.createTextNode("True");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("option");dom.setAttribute(el7,"value","false");var el8=dom.createTextNode("False");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"value","add");dom.setAttribute(el5,"name","method");dom.setAttribute(el5,"type","hidden");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formAct");var el6=dom.createTextNode("\n            ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element6=dom.childAt(fragment,[0,1]);var element7=dom.childAt(element6,[1,1]);var element8=dom.childAt(element6,[3,1]);var morphs=new Array(3);morphs[0] = dom.createElementMorph(element7);morphs[1] = dom.createMorphAt(dom.childAt(element8,[3]),1,1);morphs[2] = dom.createMorphAt(dom.childAt(element8,[31]),1,1);return morphs;},statements:[["element","action",["close"],[],["loc",[null,[136,26],[136,44]]],0,0],["block","if",[["get","Aclname",["loc",[null,[143,16],[143,23]]],0,0,0,0]],[],0,1,["loc",[null,[143,10],[147,17]]]],["inline","bs-primary",[],["action","astdacl","label","Add","loadingTxt","Getting Diff","isLoading",["subexpr","@mut",[["get","isSaving",["loc",[null,[179,90],[179,98]]],0,0,0,0]],[],[],0,0]],["loc",[null,[179,12],[179,100]]],0,0]],locals:[],templates:[child0,child1]};})();var child5=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":196,"column":4},"end":{"line":198,"column":4}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("input");dom.setAttribute(el1,"type","text");dom.setAttribute(el1,"name","aclname");dom.setAttribute(el1,"class","aclname");dom.setAttribute(el1,"reqmsg","Plese enter accesslist name");dom.setAttribute(el1,"readonly","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createAttrMorph(element0,'value');return morphs;},statements:[["attribute","value",["concat",[["get","Aclname",["loc",[null,[197,49],[197,56]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":198,"column":4},"end":{"line":200,"column":4}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("input");dom.setAttribute(el1,"type","text");dom.setAttribute(el1,"name","aclname");dom.setAttribute(el1,"class","aclname");dom.setAttribute(el1,"reqmsg","Plese enter accesslist name");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":186,"column":0},"end":{"line":281,"column":0}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"id","myModal");dom.setAttribute(el1,"class","modal");dom.setAttribute(el1,"style","display: block;");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","info-content-ext arista");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","title");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","close");var el5=dom.createTextNode("×");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","fixedTitleAcc");var el5=dom.createTextNode("Add Extended Accesslist");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","prefixAddForm");var el4=dom.createTextNode("\n  ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","aclnameDiv");var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);var el5=dom.createElement("label");dom.setAttribute(el5,"class","aclLabel");var el6=dom.createTextNode("ACL NAME : ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("  ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n  \n  ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table extdAcl");dom.setAttribute(el4,"width","100%");dom.setAttribute(el4,"cellpadding","0");dom.setAttribute(el4,"cellspacing","0");dom.setAttribute(el4,"border","0");var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);var el5=dom.createElement("thead");var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createElement("tr");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Seq No");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Action");dom.appendChild(el7,el8);var el8=dom.createElement("span");dom.setAttribute(el8,"class","mandatory");var el9=dom.createTextNode("*");dom.appendChild(el8,el9);dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Protocol");dom.appendChild(el7,el8);var el8=dom.createElement("span");dom.setAttribute(el8,"class","mandatory");var el9=dom.createTextNode("*");dom.appendChild(el8,el9);dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Source Address");dom.appendChild(el7,el8);var el8=dom.createElement("span");dom.setAttribute(el8,"class","mandatory");var el9=dom.createTextNode("*");dom.appendChild(el8,el9);dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Source Netmask");dom.appendChild(el7,el8);var el8=dom.createElement("span");dom.setAttribute(el8,"class","mandatory");var el9=dom.createTextNode("*");dom.appendChild(el8,el9);dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Source Operator");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Source Port");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Destn Address");dom.appendChild(el7,el8);var el8=dom.createElement("span");dom.setAttribute(el8,"class","mandatory");var el9=dom.createTextNode("*");dom.appendChild(el8,el9);dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Destn Netmask");dom.appendChild(el7,el8);var el8=dom.createElement("span");dom.setAttribute(el8,"class","mandatory");var el9=dom.createTextNode("*");dom.appendChild(el8,el9);dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Destn Operator");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Destn Port");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("Log");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);var el7=dom.createElement("td");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n        ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n      ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);var el5=dom.createElement("tbody");dom.setAttribute(el5,"class","tbodyAcc");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("tr");dom.setAttribute(el6,"class","seqRow");var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createElement("input");dom.setAttribute(el8,"class","aclno");dom.setAttribute(el8,"type","number");dom.setAttribute(el8,"name","seqno");dom.setAttribute(el8,"min","1");dom.setAttribute(el8,"oninput","validity.valid||(value='');");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("\n               ");dom.appendChild(el7,el8);var el8=dom.createElement("select");dom.setAttribute(el8,"class","action");dom.setAttribute(el8,"name","action");var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","permit");var el10=dom.createTextNode("Permit");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","deny");var el10=dom.createTextNode("Deny");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n              ");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n            ");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("input");dom.setAttribute(el7,"value","extended");dom.setAttribute(el7,"name","acltype");dom.setAttribute(el7,"type","hidden");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("\n               ");dom.appendChild(el7,el8);var el8=dom.createElement("select");dom.setAttribute(el8,"class","protocol");dom.setAttribute(el8,"name","protocol");var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","tcp");var el10=dom.createTextNode("TCP");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","udp");var el10=dom.createTextNode("UDP");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","icmp");var el10=dom.createTextNode("ICMP");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","ip");var el10=dom.createTextNode("IP");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n              ");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n            ");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createElement("input");dom.setAttribute(el8,"type","text");dom.setAttribute(el8,"name","srcaddr");dom.setAttribute(el8,"class","acltext");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createElement("input");dom.setAttribute(el8,"type","number");dom.setAttribute(el8,"name","srccidr");dom.setAttribute(el8,"min","1");dom.setAttribute(el8,"oninput","validity.valid||(value='');");dom.setAttribute(el8,"class","acltext required");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n              ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("\n               ");dom.appendChild(el7,el8);var el8=dom.createElement("select");dom.setAttribute(el8,"class","srcoperator");dom.setAttribute(el8,"name","srcoperator");var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","None");var el10=dom.createTextNode("None");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","gt");var el10=dom.createTextNode("Greater Than");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","lt");var el10=dom.createTextNode("Lesser Than");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","eq");var el10=dom.createTextNode("Equal");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","neq");var el10=dom.createTextNode("Not Equal");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","range");var el10=dom.createTextNode("Range");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n              ");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n              ");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n              ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createElement("input");dom.setAttribute(el8,"class","acltext");dom.setAttribute(el8,"type","text");dom.setAttribute(el8,"name","srcport");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createElement("input");dom.setAttribute(el8,"type","text");dom.setAttribute(el8,"name","dstaddr");dom.setAttribute(el8,"class","acltext required");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createElement("input");dom.setAttribute(el8,"type","number");dom.setAttribute(el8,"name","dstcidr");dom.setAttribute(el8,"min","1");dom.setAttribute(el8,"oninput","validity.valid||(value='');");dom.setAttribute(el8,"class","acltext required");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n              ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("\n               ");dom.appendChild(el7,el8);var el8=dom.createElement("select");dom.setAttribute(el8,"class","dstoperator");dom.setAttribute(el8,"name","dstoperator");var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","None");var el10=dom.createTextNode("None");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","gt");var el10=dom.createTextNode("Greater Than");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","lt");var el10=dom.createTextNode("Lesser Than");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","eq");var el10=dom.createTextNode("Equal");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","neq");var el10=dom.createTextNode("Not Equal");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","range");var el10=dom.createTextNode("Range");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n              ");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n              ");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n              ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createElement("input");dom.setAttribute(el8,"class","acltext");dom.setAttribute(el8,"type","text");dom.setAttribute(el8,"name","dstport");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n            ");dom.appendChild(el6,el7);var el7=dom.createElement("td");var el8=dom.createTextNode("\n          ");dom.appendChild(el7,el8);var el8=dom.createElement("select");dom.setAttribute(el8,"class","log");dom.setAttribute(el8,"name","log");var el9=dom.createTextNode("\n            ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","true");var el10=dom.createTextNode("True");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n            ");dom.appendChild(el8,el9);var el9=dom.createElement("option");dom.setAttribute(el9,"value","false");var el10=dom.createTextNode("False");dom.appendChild(el9,el10);dom.appendChild(el8,el9);var el9=dom.createTextNode("\n          ");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n            ");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n      ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element1=dom.childAt(fragment,[0,1]);var element2=dom.childAt(element1,[1,1]);var element3=dom.childAt(element1,[3]);var element4=dom.childAt(element3,[5]);var morphs=new Array(4);morphs[0] = dom.createElementMorph(element2);morphs[1] = dom.createMorphAt(dom.childAt(element3,[1]),3,3);morphs[2] = dom.createMorphAt(element4,1,1);morphs[3] = dom.createMorphAt(element4,3,3);return morphs;},statements:[["element","action",["close"],[],["loc",[null,[190,26],[190,44]]],0,0],["block","if",[["get","Aclname",["loc",[null,[196,10],[196,17]]],0,0,0,0]],[],0,1,["loc",[null,[196,4],[200,11]]]],["inline","bs-primary",[],["type","reset","action","close","label","Cancel"],["loc",[null,[275,8],[275,65]]],0,0],["inline","bs-primary",[],["action","aextacl","label","Apply","loadingTxt","Applying..","isLoading",["subexpr","@mut",[["get","isSaving",["loc",[null,[276,86],[276,94]]],0,0,0,0]],[],[],0,0]],["loc",[null,[276,8],[276,96]]],0,0]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":281,"column":7}},"moduleName":"netconfig/templates/conf/arista/accesslist/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","innerContainer arista");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("ul");dom.setAttribute(el2,"class","accesslist");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("li");dom.setAttribute(el3,"class","acc_buttons");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("li");dom.setAttribute(el4,"class","addprefix");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"id","std_add");dom.setAttribute(el5,"aria-hidden","true");var el6=dom.createTextNode("Add standard accesslist");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("    \n        ");dom.appendChild(el3,el4);var el4=dom.createElement("li");dom.setAttribute(el4,"class","addprefix");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"id","ext_add");dom.setAttribute(el5,"aria-hidden","true");var el6=dom.createTextNode("Add extended accesslist");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("   \n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element31=dom.childAt(fragment,[0,1]);var element32=dom.childAt(element31,[1]);var element33=dom.childAt(element32,[1,1]);var element34=dom.childAt(element32,[3,1]);var morphs=new Array(7);morphs[0] = dom.createElementMorph(element33);morphs[1] = dom.createElementMorph(element34);morphs[2] = dom.createMorphAt(element32,5,5);morphs[3] = dom.createMorphAt(element31,3,3);morphs[4] = dom.createMorphAt(element31,5,5);morphs[5] = dom.createMorphAt(fragment,2,2,contextualElement);morphs[6] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["element","action",["ShowAddAcc",true,"standard","None"],[],["loc",[null,[5,49],[5,97]]],0,0],["element","action",["ShowAddAcc",false,"extended","None"],[],["loc",[null,[8,48],[8,97]]],0,0],["block","if",[["get","showActions",["loc",[null,[10,14],[10,25]]],0,0,0,0]],[],0,1,["loc",[null,[10,8],[18,15]]]],["block","if",[["get","stdlist",["loc",[null,[20,10],[20,17]]],0,0,0,0]],[],2,null,["loc",[null,[20,4],[67,11]]]],["block","if",[["get","extlist",["loc",[null,[69,10],[69,17]]],0,0,0,0]],[],3,null,["loc",[null,[69,4],[126,11]]]],["block","if",[["get","std",["loc",[null,[132,6],[132,9]]],0,0,0,0]],[],4,null,["loc",[null,[132,0],[185,7]]]],["block","if",[["get","ext",["loc",[null,[186,6],[186,9]]],0,0,0,0]],[],5,null,["loc",[null,[186,0],[281,7]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5]};})());});
define("netconfig/templates/conf/arista/armap/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 5
            },
            "end": {
              "line": 11,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "addroutemap");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "aria-hidden", "true");
          dom.setAttribute(el2, "style", "opacity: 1;");
          var el3 = dom.createTextNode("Check Current Actions");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element9);
          return morphs;
        },
        statements: [["element", "action", ["Sendtoapprove"], [], ["loc", [null, [9, 54], [9, 81]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 5
            },
            "end": {
              "line": 15,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "addroutemap");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "aria-hidden", "true");
          dom.setAttribute(el2, "style", "opacity: 0.4;cursor:default;");
          var el3 = dom.createTextNode("Check Current Actions");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element8);
          return morphs;
        },
        statements: [["element", "action", ["Sendtoapprove"], [], ["loc", [null, [13, 71], [13, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 33,
                    "column": 68
                  },
                  "end": {
                    "line": 33,
                    "column": 132
                  }
                },
                "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" (");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(")");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "chop", [["get", "a.value.description", ["loc", [null, [33, 105], [33, 124]]], 0, 0, 0, 0], 1, -1], [], ["loc", [null, [33, 98], [33, 131]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 52,
                        "column": 24
                      },
                      "end": {
                        "line": 54,
                        "column": 24
                      }
                    },
                    "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("  <span class=\"value\">{{match}}</span>");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 51,
                      "column": 20
                    },
                    "end": {
                      "line": 56,
                      "column": 20
                    }
                  },
                  "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "value");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
                  dom.insertBoundary(fragment, 0);
                  return morphs;
                },
                statements: [["block", "hover-act", [], ["params", ["subexpr", "@mut", [["get", "match", ["loc", [null, [52, 45], [52, 50]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [52, 24], [54, 38]]]], ["content", "match", ["loc", [null, [55, 44], [55, 53]]], 0, 0, 0, 0]],
                locals: ["match"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 48,
                    "column": 12
                  },
                  "end": {
                    "line": 66,
                    "column": 12
                  }
                },
                "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "arminfo");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("match:");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("set:");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "value");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("<span>continue:</span>\n                    <span  class=\"value\">{{a.value.continue}}</span>");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("description:");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "value");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("Prefix:");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "value");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(element1, 3, 3);
                morphs[1] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element1, [13]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element1, [17]), 0, 0);
                return morphs;
              },
              statements: [["block", "each", [["get", "a.value.match", ["loc", [null, [51, 28], [51, 41]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [51, 20], [56, 29]]]], ["content", "a.value.set", ["loc", [null, [58, 41], [58, 56]]], 0, 0, 0, 0], ["content", "a.value.description", ["loc", [null, [62, 41], [62, 64]]], 0, 0, 0, 0], ["content", "a.prefix", ["loc", [null, [64, 41], [64, 53]]], 0, 0, 0, 0]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 8
                },
                "end": {
                  "line": 67,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "seq-no");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("        \n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "action");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "choose");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "updateARM");
              var el2 = dom.createTextNode("Update");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "deleteRmap");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "fa fa-minus");
              dom.setAttribute(el2, "aria-hidden", "true");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(fragment, [5]);
              var element4 = dom.childAt(fragment, [7, 0]);
              var morphs = new Array(7);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createMorphAt(element2, 0, 0);
              morphs[2] = dom.createMorphAt(element2, 2, 2);
              morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 1]), 1, 1);
              morphs[4] = dom.createElementMorph(element3);
              morphs[5] = dom.createElementMorph(element4);
              morphs[6] = dom.createMorphAt(fragment, 9, 9, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["element", "action", ["showOut", ["get", "a", ["loc", [null, [33, 52], [33, 53]]], 0, 0, 0, 0]], [], ["loc", [null, [33, 33], [33, 57]]], 0, 0], ["content", "a.seq", ["loc", [null, [33, 58], [33, 67]]], 0, 0, 0, 0], ["block", "if", [["get", "a.value.description", ["loc", [null, [33, 75], [33, 94]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [33, 68], [33, 139]]]], ["inline", "ember-chosen", [], ["name", ["subexpr", "concat", [["get", "map.name", ["loc", [null, [37, 37], [37, 45]]], 0, 0, 0, 0], ["get", "a.seq", ["loc", [null, [37, 46], [37, 51]]], 0, 0, 0, 0]], [], ["loc", [null, [37, 29], [37, 52]]], 0, 0], "placeholder", "Select Something...", "optionValuePath", "value", "optionLabelPath", "label", "content", ["subexpr", "@mut", [["get", "avalue", ["loc", [null, [41, 32], [41, 38]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "a.action", ["loc", [null, [42, 30], [42, 38]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [36, 20], [43, 22]]], 0, 0], ["element", "action", ["updateARM", ["get", "map", ["loc", [null, [46, 57], [46, 60]]], 0, 0, 0, 0], ["get", "a", ["loc", [null, [46, 61], [46, 62]]], 0, 0, 0, 0]], [], ["loc", [null, [46, 36], [46, 64]]], 0, 0], ["element", "action", ["DeleteRoute", ["get", "a", ["loc", [null, [47, 102], [47, 103]]], 0, 0, 0, 0], ["get", "map", ["loc", [null, [47, 104], [47, 107]]], 0, 0, 0, 0]], [], ["loc", [null, [47, 79], [47, 109]]], 0, 0], ["block", "if", [["get", "a.show", ["loc", [null, [48, 18], [48, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [48, 12], [66, 19]]]]],
            locals: ["a"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 4
              },
              "end": {
                "line": 70,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "content");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "rm_title");
            var el3 = dom.createTextNode("\n           ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "rm_title1");
            var el4 = dom.createTextNode("seq-no");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n           ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "rm_title2");
            var el4 = dom.createTextNode("action");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "rm_content");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1, 3]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element5, 'id');
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            return morphs;
          },
          statements: [["attribute", "id", ["concat", [["get", "map.name", ["loc", [null, [31, 33], [31, 41]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "map.val", ["loc", [null, [32, 16], [32, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [32, 8], [67, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 71,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "name");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "bgprname");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "aria-hidden", "true");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "rmap_name_ind");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      \n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        \n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [1, 0]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element7, 'class');
          morphs[1] = dom.createElementMorph(element7);
          morphs[2] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["get", "map.show", ["loc", [null, [19, 94], [19, 102]]], 0, 0, 0, 0], "fa fa-plus-square-o", "fa fa-minus-square-o"], [], ["loc", [null, [19, 85], [19, 150]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showMap", ["get", "map", ["loc", [null, [19, 72], [19, 75]]], 0, 0, 0, 0]], [], ["loc", [null, [19, 53], [19, 77]]], 0, 0], ["content", "map.name", ["loc", [null, [20, 36], [20, 48]]], 0, 0, 0, 0], ["block", "if", [["get", "map.show", ["loc", [null, [25, 10], [25, 18]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [25, 4], [70, 11]]]]],
        locals: ["map"],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "fixedTitle");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "aldname", ["loc", [null, [82, 31], [82, 42]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 83,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "fixedTitle");
          var el2 = dom.createTextNode("Add Routemap");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "name", "name");
          dom.setAttribute(el1, "type", "hidden");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "value", "false");
          dom.setAttribute(el1, "name", "trigger");
          dom.setAttribute(el1, "type", "hidden");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["get", "aldname", ["loc", [null, [90, 24], [90, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("Routemap name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "prefixDelFormRow formRow");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "name");
          dom.setAttribute(el2, "class", "required");
          dom.setAttribute(el2, "reqmsg", "Plese enter prefixlist name");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n         ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "value", "true");
          dom.setAttribute(el1, "name", "trigger");
          dom.setAttribute(el1, "type", "hidden");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 118,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/conf/arista/armap/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "rmap");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "pack");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        dom.setAttribute(el4, "class", "addroutemap");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "id", "add_button");
        dom.setAttribute(el5, "aria-hidden", "true");
        var el6 = dom.createTextNode("Add Routemap");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "prefixInfo");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "myModal");
        dom.setAttribute(el1, "class", "modal");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "info-content arista");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "title");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "close");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "val");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "prefixAddForm");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "prefixAdd");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Seq no");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "prefixDelFormRow formRow");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "seqno");
        dom.setAttribute(el6, "class", "required");
        dom.setAttribute(el6, "reqmsg", "Plese enter prefix");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Permit/Deny");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "prefixDelFormRow formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("select");
        dom.setAttribute(el6, "name", "action");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("option");
        dom.setAttribute(el7, "value", "permit");
        var el8 = dom.createTextNode("permit");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("option");
        dom.setAttribute(el7, "value", "deny");
        var el8 = dom.createTextNode("deny");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "value", "add");
        dom.setAttribute(el5, "name", "method");
        dom.setAttribute(el5, "type", "hidden");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [0, 1]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element11, [1, 1]);
        var element13 = dom.childAt(fragment, [2, 1]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element13, [3, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createElementMorph(element12);
        morphs[1] = dom.createMorphAt(element11, 3, 3);
        morphs[2] = dom.createMorphAt(element10, 3, 3);
        morphs[3] = dom.createElementMorph(element15);
        morphs[4] = dom.createMorphAt(dom.childAt(element14, [3]), 0, 0);
        morphs[5] = dom.createMorphAt(element14, 5, 5);
        morphs[6] = dom.createMorphAt(element16, 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element16, [13]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["ShowAddRoute", false, false], [], ["loc", [null, [5, 50], [5, 87]]], 0, 0], ["block", "if", [["get", "showActions", ["loc", [null, [7, 11], [7, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [7, 5], [15, 12]]]], ["block", "each", [["get", "rmap", ["loc", [null, [17, 8], [17, 12]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [17, 0], [71, 13]]]], ["element", "action", ["close"], [], ["loc", [null, [79, 26], [79, 44]]], 0, 0], ["content", "PrefixList.name", ["loc", [null, [80, 24], [80, 43]]], 0, 0, 0, 0], ["block", "if", [["get", "showname", ["loc", [null, [81, 12], [81, 20]]], 0, 0, 0, 0]], [], 3, 4, ["loc", [null, [81, 6], [85, 13]]]], ["block", "if", [["get", "showname", ["loc", [null, [89, 14], [89, 22]]], 0, 0, 0, 0]], [], 5, 6, ["loc", [null, [89, 8], [98, 15]]]], ["inline", "bs-primary", [], ["action", "addRoute", "label", "Add", "loadingTxt", "Getting Diff", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [112, 91], [112, 99]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [112, 12], [112, 101]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("netconfig/templates/conf/arista/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/conf/arista/index.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/conf/arista/prefixlist/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "addroutemap");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "aria-hidden", "true");
          dom.setAttribute(el2, "style", "opacity: 1;");
          var el3 = dom.createTextNode("Check Current Actions");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element12);
          return morphs;
        },
        statements: [["element", "action", ["SendToApprove"], [], ["loc", [null, [9, 54], [9, 81]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 8
            },
            "end": {
              "line": 15,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "addroutemap");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "aria-hidden", "true");
          dom.setAttribute(el2, "style", "opacity: 0.4;cursor:default;");
          var el3 = dom.createTextNode("Check Current Actions");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element11);
          return morphs;
        },
        statements: [["element", "action", ["SendToApprove"], [], ["loc", [null, [13, 71], [13, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 36,
                    "column": 24
                  },
                  "end": {
                    "line": 38,
                    "column": 24
                  }
                },
                "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                              Processing...\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 38,
                    "column": 24
                  },
                  "end": {
                    "line": 40,
                    "column": 24
                  }
                },
                "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "fa fa-chevron-down");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "j.action", ["loc", [null, [39, 30], [39, 42]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "seq-no");
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "action");
              var el3 = dom.createTextNode("\n               ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "prefix-dropdown");
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "prefix-dropdown-btn");
              var el5 = dom.createTextNode("\n");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("                    ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("ul");
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("li");
              dom.setAttribute(el5, "class", "permit");
              var el6 = dom.createElement("i");
              dom.setAttribute(el6, "class", "fa fa-check");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode(" Permit");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("li");
              dom.setAttribute(el5, "class", "deny");
              var el6 = dom.createElement("i");
              dom.setAttribute(el6, "class", "fa fa-ban");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode(" Deny");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "prefix");
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createElement("i");
              dom.setAttribute(el3, "class", "fa fa-minus");
              dom.setAttribute(el3, "aria-hidden", "true");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(element1, [3, 1]);
              var element3 = dom.childAt(element2, [1]);
              var element4 = dom.childAt(element2, [3]);
              var element5 = dom.childAt(element4, [1]);
              var element6 = dom.childAt(element4, [3]);
              var element7 = dom.childAt(element1, [7, 0]);
              var morphs = new Array(9);
              morphs[0] = dom.createAttrMorph(element1, 'id');
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
              morphs[2] = dom.createElementMorph(element3);
              morphs[3] = dom.createMorphAt(element3, 1, 1);
              morphs[4] = dom.createAttrMorph(element4, 'class');
              morphs[5] = dom.createElementMorph(element5);
              morphs[6] = dom.createElementMorph(element6);
              morphs[7] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
              morphs[8] = dom.createElementMorph(element7);
              return morphs;
            },
            statements: [["attribute", "id", ["concat", [["get", "j.sec_id", ["loc", [null, [31, 23], [31, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "j.seq", ["loc", [null, [32, 36], [32, 45]]], 0, 0, 0, 0], ["element", "action", ["showDropDown", ["get", "j", ["loc", [null, [35, 78], [35, 79]]], 0, 0, 0, 0]], [], ["loc", [null, [35, 54], [35, 81]]], 0, 0], ["block", "if", [["get", "j.isProcessing", ["loc", [null, [36, 30], [36, 44]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [36, 24], [40, 31]]]], ["attribute", "class", ["concat", [["subexpr", "unless", [["get", "j.isShow", ["loc", [null, [42, 44], [42, 52]]], 0, 0, 0, 0], "dnone"], [], ["loc", [null, [42, 35], [42, 62]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["updateStatus", ["get", "j", ["loc", [null, [43, 71], [43, 72]]], 0, 0, 0, 0], "permit", ["get", "i.name", ["loc", [null, [43, 82], [43, 88]]], 0, 0, 0, 0]], [], ["loc", [null, [43, 47], [43, 90]]], 0, 0], ["element", "action", ["updateStatus", ["get", "j", ["loc", [null, [44, 69], [44, 70]]], 0, 0, 0, 0], "deny", ["get", "i.name", ["loc", [null, [44, 78], [44, 84]]], 0, 0, 0, 0]], [], ["loc", [null, [44, 45], [44, 86]]], 0, 0], ["content", "j.prefix", ["loc", [null, [48, 36], [48, 48]]], 0, 0, 0, 0], ["element", "action", ["DeletePrefix", ["get", "j", ["loc", [null, [49, 86], [49, 87]]], 0, 0, 0, 0], ["get", "i", ["loc", [null, [49, 88], [49, 89]]], 0, 0, 0, 0]], [], ["loc", [null, [49, 62], [49, 92]]], 0, 0]],
            locals: ["j"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 6
              },
              "end": {
                "line": 53,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "title");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "seq-no");
            var el3 = dom.createTextNode("seq-no");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "action");
            var el3 = dom.createTextNode("action");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "prefix");
            var el3 = dom.createTextNode("prefix");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "value");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "i.value", ["loc", [null, [30, 18], [30, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [30, 10], [51, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "name");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "ShowValue");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "aria-hidden", "true");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-plus");
          dom.setAttribute(el3, "aria-hidden", "true");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [1, 0]);
          var element10 = dom.childAt(element8, [5, 0]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element9, 'class');
          morphs[1] = dom.createElementMorph(element9);
          morphs[2] = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
          morphs[3] = dom.createElementMorph(element10);
          morphs[4] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["get", "i.show", ["loc", [null, [19, 51], [19, 57]]], 0, 0, 0, 0], "fa fa-plus-square-o", "fa fa-minus-square-o"], [], ["loc", [null, [19, 42], [19, 104]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["ShowValue", ["get", "i", ["loc", [null, [19, 146], [19, 147]]], 0, 0, 0, 0]], [], ["loc", [null, [19, 125], [19, 149]]], 0, 0], ["content", "i.name", ["loc", [null, [20, 14], [20, 24]]], 0, 0, 0, 0], ["element", "action", ["ShowAddPrefix", ["get", "i", ["loc", [null, [21, 80], [21, 81]]], 0, 0, 0, 0], false], [], ["loc", [null, [21, 55], [21, 89]]], 0, 0], ["block", "if", [["get", "i.show", ["loc", [null, [23, 12], [23, 18]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 6], [53, 13]]]]],
        locals: ["i"],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "fixedTitle");
          var el2 = dom.createTextNode("Add Prefixlist");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("Prefixlist name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "prefixDelFormRow formRow");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "name");
          dom.setAttribute(el2, "class", "required");
          dom.setAttribute(el2, "reqmsg", "Plese enter prefixlist name");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n         ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "value", "true");
          dom.setAttribute(el1, "name", "trigger");
          dom.setAttribute(el1, "type", "hidden");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 75,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "name", "name");
          dom.setAttribute(el1, "type", "hidden");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "value", "false");
          dom.setAttribute(el1, "name", "trigger");
          dom.setAttribute(el1, "type", "hidden");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["get", "PrefixList.name", ["loc", [null, [76, 24], [76, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 102,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/conf/arista/prefixlist/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer arista");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "prefixlist");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "pack");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        dom.setAttribute(el4, "class", "addroutemap");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "id", "add_btn");
        dom.setAttribute(el5, "aria-hidden", "true");
        var el6 = dom.createTextNode("Add prefixlist");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  \n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "myModal");
        dom.setAttribute(el1, "class", "modal");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "info-content arista");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "title");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "close");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "val");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "prefixAddForm");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "prefixAdd");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Seq no");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "prefixDelFormRow formRow");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "seq-no");
        dom.setAttribute(el6, "class", "required");
        dom.setAttribute(el6, "reqmsg", "Plese enter prefix");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Permit or Deny");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "prefixDelFormRow formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("select");
        dom.setAttribute(el6, "name", "action");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("option");
        dom.setAttribute(el7, "value", "permit");
        var el8 = dom.createTextNode("permit");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("option");
        dom.setAttribute(el7, "value", "deny");
        var el8 = dom.createTextNode("deny");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Prefix/Mask");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "prefixDelFormRow formRow");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "prefix");
        dom.setAttribute(el6, "class", "required");
        dom.setAttribute(el6, "reqmsg", "Plese enter prefix");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "value", "add");
        dom.setAttribute(el5, "name", "method");
        dom.setAttribute(el5, "type", "hidden");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element13 = dom.childAt(fragment, [0, 1]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element14, [1, 1]);
        var element16 = dom.childAt(fragment, [2, 1]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(element16, [3, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createElementMorph(element15);
        morphs[1] = dom.createMorphAt(element14, 3, 3);
        morphs[2] = dom.createMorphAt(element13, 3, 3);
        morphs[3] = dom.createElementMorph(element18);
        morphs[4] = dom.createMorphAt(dom.childAt(element17, [3]), 0, 0);
        morphs[5] = dom.createMorphAt(element17, 5, 5);
        morphs[6] = dom.createMorphAt(element19, 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element19, [17]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["ShowAddPrefix", false, true], [], ["loc", [null, [5, 48], [5, 85]]], 0, 0], ["block", "if", [["get", "showActions", ["loc", [null, [7, 14], [7, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [7, 8], [15, 15]]]], ["block", "each", [["get", "model.data", ["loc", [null, [17, 12], [17, 22]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [17, 4], [54, 13]]]], ["element", "action", ["close"], [], ["loc", [null, [61, 26], [61, 44]]], 0, 0], ["content", "PrefixList.name", ["loc", [null, [62, 24], [62, 43]]], 0, 0, 0, 0], ["block", "if", [["get", "showname", ["loc", [null, [63, 12], [63, 20]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [63, 6], [65, 13]]]], ["block", "if", [["get", "showname", ["loc", [null, [69, 14], [69, 22]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [69, 8], [78, 15]]]], ["inline", "bs-primary", [], ["action", "addPrefix", "label", "Add", "loadingTxt", "Getting Diff", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [96, 92], [96, 100]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [96, 12], [96, 102]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/conf/commits", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/conf/commits.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("conf");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 3, 3);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [3, 4], [3, 14]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/conf/commits/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/conf/commits/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("HW");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/conf/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 12
                },
                "end": {
                  "line": 40,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/conf/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element3, 'value');
              morphs[1] = dom.createMorphAt(element3, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["get", "item.host", ["loc", [null, [39, 32], [39, 41]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [39, 44], [39, 57]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 8
              },
              "end": {
                "line": 41,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/conf/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "routers", ["loc", [null, [38, 20], [38, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [38, 12], [40, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/conf/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "name", "getconf");
          dom.setAttribute(el1, "class", "conf-form");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "formRow");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          var el4 = dom.createTextNode("Router");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "formRow");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          var el4 = dom.createTextNode("Username");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "text");
          dom.setAttribute(el3, "name", "username");
          dom.setAttribute(el3, "class", "required");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "formRow");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          var el4 = dom.createTextNode("Password");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "password");
          dom.setAttribute(el3, "name", "password");
          dom.setAttribute(el3, "class", "required");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "formAct");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(element4, [7]), 1, 1);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "routerChange", "name", "router", "class", "required", "placeholder", "Select a router..."], 0, null, ["loc", [null, [37, 8], [41, 25]]]], ["inline", "bs-primary", [], ["action", "getConf", "label", "Go", "loadingTxt", "Preparing", "style", "font-size: 14px;", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [52, 111], [52, 119]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [52, 12], [52, 121]]], 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 60,
                    "column": 20
                  },
                  "end": {
                    "line": 62,
                    "column": 20
                  }
                },
                "moduleName": "netconfig/templates/conf/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'value');
                morphs[1] = dom.createMorphAt(element1, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["get", "item.host", ["loc", [null, [61, 40], [61, 49]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [61, 52], [61, 65]]], 0, 0, 0, 0]],
              locals: ["item"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 59,
                  "column": 16
                },
                "end": {
                  "line": 63,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/conf/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "routers", ["loc", [null, [60, 28], [60, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [60, 20], [62, 29]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 81,
                      "column": 20
                    },
                    "end": {
                      "line": 83,
                      "column": 20
                    }
                  },
                  "moduleName": "netconfig/templates/conf/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("option");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element0, 'value');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [82, 41], [82, 45]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [82, 49], [82, 57]]], 0, 0, 0, 0]],
                locals: ["item"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 80,
                    "column": 16
                  },
                  "end": {
                    "line": 84,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/conf/index.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "appro", ["loc", [null, [81, 28], [81, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [81, 20], [83, 29]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 77,
                  "column": 12
                },
                "end": {
                  "line": 86,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/conf/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "formRow");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createTextNode("Approver");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "mandatory");
              var el4 = dom.createTextNode("*");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["block", "ember-chosen", [], ["name", "approver_email", "class", "required", "placeholder", "Select Approver Email"], 0, null, ["loc", [null, [80, 16], [84, 33]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 4
              },
              "end": {
                "line": 95,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/conf/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("form");
            dom.setAttribute(el1, "name", "getnode");
            dom.setAttribute(el1, "class", "conf-form");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "formRow");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            var el4 = dom.createTextNode("Switch");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "formRow");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            var el4 = dom.createTextNode("Username");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("input");
            dom.setAttribute(el3, "type", "text");
            dom.setAttribute(el3, "name", "username");
            dom.setAttribute(el3, "class", "required");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "formRow");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            var el4 = dom.createTextNode("Password");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("input");
            dom.setAttribute(el3, "type", "password");
            dom.setAttribute(el3, "name", "password");
            dom.setAttribute(el3, "class", "required");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "formRow");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            var el4 = dom.createTextNode("Enable password");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("input");
            dom.setAttribute(el3, "type", "password");
            dom.setAttribute(el3, "name", "enpwd");
            dom.setAttribute(el3, "class", "required");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "formRow");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            var el4 = dom.createTextNode("Configuration Comment");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "mandatory");
            var el5 = dom.createTextNode("*");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("input");
            dom.setAttribute(el3, "type", "text");
            dom.setAttribute(el3, "name", "config_comment");
            dom.setAttribute(el3, "placeholder", "Enter configuration comment");
            dom.setAttribute(el3, "class", "required");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "formAct");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 3, 3);
            morphs[1] = dom.createMorphAt(element2, 9, 9);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [13]), 1, 1);
            return morphs;
          },
          statements: [["block", "ember-chosen", [], ["action", "routerChange", "name", "router", "class", "required", "placeholder", "Select a router..."], 0, null, ["loc", [null, [59, 16], [63, 33]]]], ["block", "unless", [["get", "isAdminAccount", ["loc", [null, [77, 22], [77, 36]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [77, 12], [86, 23]]]], ["inline", "bs-primary", [], ["action", "getNode", "label", "Go", "loadingTxt", "Preparing", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [92, 90], [92, 98]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [92, 16], [92, 100]]], 0, 0]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/conf/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "rtype", ["loc", [null, [55, 18], [55, 23]]], 0, 0, 0, 0], "arista"], [], ["loc", [null, [55, 14], [55, 33]]], 0, 0]], [], 0, null, ["loc", [null, [55, 4], [95, 4]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 105,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/conf/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("<li>Configuration</li>");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "conf_dc");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "conf_dc_name");
        var el6 = dom.createTextNode("Data Center");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "conf_dc_option");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "rtype");
        var el3 = dom.createTextNode("\n        Vendor\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "confLoginInfo");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("Router configuration:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ol");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("Select the router you need to configure.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("Enter your router-specific username and password to access this portal.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 3, 1, 3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["inline", "ember-chosen", [], ["name", "dc", "optionValuePath", "value", "optionLabelPath", "label", "content", ["subexpr", "@mut", [["get", "dcs", ["loc", [null, [12, 24], [12, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "dcname", ["loc", [null, [13, 22], [13, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "action", "changeDC"], ["loc", [null, [8, 16], [15, 18]]], 0, 0], ["inline", "ember-chosen", [], ["name", "rtype", "optionValuePath", "value", "optionLabelPath", "label", "content", ["subexpr", "@mut", [["get", "rtypes", ["loc", [null, [28, 16], [28, 22]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "rtype", ["loc", [null, [29, 14], [29, 19]]], 0, 0, 0, 0]], [], [], 0, 0], "action", "changeRType"], ["loc", [null, [24, 8], [31, 10]]], 0, 0], ["block", "if", [["subexpr", "eq", [["get", "rtype", ["loc", [null, [33, 14], [33, 19]]], 0, 0, 0, 0], "juniper"], [], ["loc", [null, [33, 10], [33, 30]]], 0, 0]], [], 0, 1, ["loc", [null, [33, 4], [95, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/conf/juniper", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 60
            }
          },
          "moduleName": "netconfig/templates/conf/juniper.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("prefixlist");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 5,
              "column": 64
            }
          },
          "moduleName": "netconfig/templates/conf/juniper.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("policyoption");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/conf/juniper.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("aside");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("Settings");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "container settings");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["conf.juniper.prefixlist"], [], 0, null, ["loc", [null, [4, 12], [4, 72]]]], ["block", "link-to", ["conf.juniper.policyoption"], [], 1, null, ["loc", [null, [5, 12], [5, 76]]]], ["content", "outlet", ["loc", [null, [10, 4], [10, 14]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/conf/juniper/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/conf/juniper/index.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/conf/juniper/policyoption/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/conf/juniper/policyoption/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "comp-po", [], ["po", ["subexpr", "@mut", [["get", "policyOption.policy-statement", ["loc", [null, [2, 17], [2, 46]]], 0, 0, 0, 0]], [], [], 0, 0], "cntr", ["subexpr", "@mut", [["get", "confCtrl", ["loc", [null, [2, 52], [2, 60]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 4], [2, 62]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/conf/juniper/prefixlist/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 36
                  },
                  "end": {
                    "line": 25,
                    "column": 36
                  }
                },
                "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createTextNode("\n                                                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "align", "center");
                var el3 = dom.createTextNode("\n                                                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "tableAct");
                var el4 = dom.createTextNode("\n                                                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("<i class=\"nicon-delete\" {{action 'delPrefix' iItem item}}></i>");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                                                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "delPrefixBtn");
                var el5 = dom.createTextNode("Delete");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                                                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element10 = dom.childAt(fragment, [1]);
                var element11 = dom.childAt(element10, [3, 1, 3]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(element10, [1]), 1, 1);
                morphs[1] = dom.createElementMorph(element11);
                return morphs;
              },
              statements: [["content", "iItem", ["loc", [null, [16, 48], [16, 57]]], 0, 0, 0, 0], ["element", "action", ["delPrefix", ["get", "iItem", ["loc", [null, [21, 100], [21, 105]]], 0, 0, 0, 0], ["get", "item", ["loc", [null, [21, 106], [21, 110]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 79], [21, 112]]], 0, 0]],
              locals: ["iItem"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 32
                },
                "end": {
                  "line": 26,
                  "column": 32
                }
              },
              "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "item.prefixlist", ["loc", [null, [13, 44], [13, 59]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [13, 36], [25, 45]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 32
                },
                "end": {
                  "line": 30,
                  "column": 32
                }
              },
              "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createTextNode("-");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 20
              },
              "end": {
                "line": 34,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "prefix-list");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("table");
            dom.setAttribute(el2, "cellpadding", "0");
            dom.setAttribute(el2, "class", "table");
            dom.setAttribute(el2, "cellspacing", "0");
            dom.setAttribute(el2, "border", "0");
            dom.setAttribute(el2, "width", "100%");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tbody");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "gt", [["get", "item.prefixlist.length", ["loc", [null, [12, 42], [12, 64]]], 0, 0, 0, 0], 0], [], ["loc", [null, [12, 38], [12, 67]]], 0, 0]], [], 0, 1, ["loc", [null, [12, 32], [30, 39]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 36,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createElement("span");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "addPrefixBtn");
          var el4 = dom.createTextNode("Add");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element13, [0]);
          var element15 = dom.childAt(element13, [4]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element14, 'class');
          morphs[1] = dom.createElementMorph(element14);
          morphs[2] = dom.createMorphAt(element13, 2, 2);
          morphs[3] = dom.createElementMorph(element15);
          morphs[4] = dom.createMorphAt(element12, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "item.isShowData", ["loc", [null, [6, 69], [6, 84]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [6, 64], [6, 125]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["setShown", ["get", "item", ["loc", [null, [6, 46], [6, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 26], [6, 53]]], 0, 0], ["content", "item.name", ["loc", [null, [6, 135], [6, 148]]], 0, 0, 0, 0], ["element", "action", ["showAddPrefix", ["get", "item", ["loc", [null, [6, 201], [6, 205]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 176], [6, 207]]], 0, 0], ["block", "if", [["get", "item.isShowData", ["loc", [null, [8, 26], [8, 41]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 20], [34, 27]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popSlideDiv animated fadeIn");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "popdataInner animated fadeInRight");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popDHdr");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "popcls");
          var el5 = dom.createTextNode("×");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popDCont");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "prefix-diffDiv");
          var el5 = dom.createTextNode("\n                   ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "prefix-del");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("form");
          dom.setAttribute(el5, "name", "delPrefix");
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("<div class=\"formRow\">\n                        <label>UserName</label>\n                        <input type=\"text\" name=\"username\" class=\"required\" />\n                    </div>\n                    <div class=\"formRow\">\n                        <label>PassWord</label>\n                        <input type=\"password\" name=\"password\" class=\"required\" />\n                    </div>");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "formAct");
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1, 1]);
          var element8 = dom.childAt(element7, [1, 1]);
          var element9 = dom.childAt(element7, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element8);
          morphs[1] = dom.createUnsafeMorphAt(dom.childAt(element9, [1]), 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element9, [3, 1, 3]), 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["hideTraceRoute"], [], ["loc", [null, [43, 37], [43, 64]]], 0, 0], ["inline", "newline_br", [["get", "diffText", ["loc", [null, [47, 33], [47, 41]]], 0, 0, 0, 0]], [], ["loc", [null, [47, 19], [47, 44]]], 0, 0], ["inline", "bs-primary", [], ["action", "delCommit", "label", "Commit", "loadingTxt", "Committing", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [60, 105], [60, 113]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [60, 24], [60, 115]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 84,
                  "column": 24
                },
                "end": {
                  "line": 88,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "prefixDelFormRow formRow");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("input");
              dom.setAttribute(el2, "type", "text");
              dom.setAttribute(el2, "name", "username");
              dom.setAttribute(el2, "class", "required prefixInpt");
              dom.setAttribute(el2, "reqmsg", "Plese enter prefix");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "prefixdelRow");
              var el3 = dom.createTextNode("-");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1, 3]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element1);
              return morphs;
            },
            statements: [["element", "action", ["delInputRow", ["get", "item", ["loc", [null, [86, 176], [86, 180]]], 0, 0, 0, 0]], [], ["loc", [null, [86, 153], [86, 182]]], 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 12
              },
              "end": {
                "line": 97,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "addPrefixDiv");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("form");
            dom.setAttribute(el2, "name", "delPrefix");
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            var el4 = dom.createTextNode("Prefix");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "prefixDelFormRow formRow");
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("input");
            dom.setAttribute(el4, "type", "text");
            dom.setAttribute(el4, "name", "username");
            dom.setAttribute(el4, "class", "required");
            dom.setAttribute(el4, "reqmsg", "Plese enter prefix");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "formRow");
            dom.setAttribute(el3, "style", "text-align: right;");
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "href", "javascript:void(0);");
            var el5 = dom.createTextNode("+Add");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "formAct");
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1, 1]);
            var element3 = dom.childAt(element2, [7, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element2, 5, 5);
            morphs[1] = dom.createElementMorph(element3);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [9]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "addInput", ["loc", [null, [84, 32], [84, 40]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [84, 24], [88, 33]]]], ["element", "action", ["addInputRow"], [], ["loc", [null, [90, 58], [90, 82]]], 0, 0], ["inline", "bs-primary", [], ["action", "getAddDiff", "label", "Add", "loadingTxt", "Getting Diff", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [93, 105], [93, 113]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [93, 24], [93, 115]]], 0, 0]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 102,
                  "column": 24
                },
                "end": {
                  "line": 104,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "newline_br", [["get", "diffText", ["loc", [null, [103, 42], [103, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [103, 28], [103, 53]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 99,
                "column": 12
              },
              "end": {
                "line": 122,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "commitPrefixList");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "prefix-diffDiv");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "prefix-del");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("form");
            dom.setAttribute(el3, "name", "delPrefix");
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("<div class=\"formRow\">\n                                <label>UserName</label>\n                                <input type=\"text\" name=\"username\" class=\"required\" />\n                            </div>\n                            <div class=\"formRow\">\n                                <label>PassWord</label>\n                                <input type=\"password\" name=\"password\" class=\"required\" />\n                            </div> ");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "formAct");
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                            ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "diffText", ["loc", [null, [102, 30], [102, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [102, 24], [104, 31]]]], ["inline", "bs-primary", [], ["action", "addCommit", "label", "Commit", "loadingTxt", "Committing", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [117, 113], [117, 121]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [117, 32], [117, 123]]], 0, 0]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popSlideDiv addPrefixPopup animated fadeIn");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "popdataInner animated fadeInDown");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popDHdr");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          var el5 = dom.createTextNode("Add prefix for ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "popcls");
          var el5 = dom.createTextNode("×");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1, 1]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element5, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element6);
          morphs[2] = dom.createMorphAt(element4, 3, 3);
          morphs[3] = dom.createMorphAt(element4, 5, 5);
          return morphs;
        },
        statements: [["content", "selectList.name", ["loc", [null, [73, 34], [73, 53]]], 0, 0, 0, 0], ["element", "action", ["hideAddPrefix"], [], ["loc", [null, [74, 37], [74, 63]]], 0, 0], ["block", "if", [["get", "addprefixForm", ["loc", [null, [77, 18], [77, 31]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [77, 12], [97, 19]]]], ["block", "if", [["get", "commitPrefixForm", ["loc", [null, [99, 18], [99, 34]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [99, 12], [122, 19]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 127,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/conf/juniper/prefixlist/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "inlinefView confPrefLst");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element16 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element16, [1, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(element16, 3, 3);
        morphs[2] = dom.createMorphAt(element16, 5, 5);
        return morphs;
      },
      statements: [["block", "each", [["get", "prefixlist.data", ["loc", [null, [4, 20], [4, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 12], [36, 21]]]], ["block", "if", [["get", "isShowTrace", ["loc", [null, [39, 10], [39, 21]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [39, 4], [67, 11]]]], ["block", "if", [["get", "isShowAddPrefix", ["loc", [null, [69, 10], [69, 25]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [69, 4], [125, 11]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/conf/juniper/prefixlist/log", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/conf/juniper/prefixlist/log.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
          return morphs;
        },
        statements: [["content", "item.attributes.a_username", ["loc", [null, [15, 20], [15, 50]]], 0, 0, 0, 0], ["content", "item.attributes.r_username", ["loc", [null, [16, 20], [16, 50]]], 0, 0, 0, 0], ["content", "item.attributes.router", ["loc", [null, [17, 20], [17, 46]]], 0, 0, 0, 0], ["content", "item.attributes.ctext", ["loc", [null, [18, 20], [18, 45]]], 0, 0, 0, 0], ["content", "item.attributes.c_timestamp", ["loc", [null, [19, 20], [19, 51]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/conf/juniper/prefixlist/log.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "class", "table");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "width", "100%");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("user");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("router");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("text");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("time");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "model.data", ["loc", [null, [13, 16], [13, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [13, 8], [21, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/conf_top", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/conf_top.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("<ul>\n    <li class=\"w180\">\n{{#ember-chosen action=\"routerChange\" name=\"apiPrefix\" class=\"required\" placeholder=\"Select a router...\"}}\n            {{#each content as |item|}}\n                <option value=\"{{item.id}}\">{{item.attributes.name}}</option>\n            {{/each}}\n        {{/ember-chosen}}    </li>\n</ul>");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "conf-top");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["content", "router", ["loc", [null, [12, 4], [12, 14]]], 0, 0, 0, 0], ["inline", "bs-primary", [], ["action", "disconnect", "label", "disconnect", "loadingTxt", "disconnecting", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [13, 93], [13, 101]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [13, 4], [13, 103]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/cvx", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 16
              },
              "end": {
                "line": 9,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/cvx.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element9, 'value');
            morphs[1] = dom.createMorphAt(element9, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [8, 37], [8, 40]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [8, 44], [8, 51]]], 0, 0, 0, 0]],
          locals: ["pod"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 12
            },
            "end": {
              "line": 10,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/cvx.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "pod", ["loc", [null, [7, 24], [7, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 16], [9, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 24
                },
                "end": {
                  "line": 40,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/cvx.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createTextNode("\n                                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("i");
              dom.setAttribute(el3, "class", "fa");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element5, 'class');
              morphs[1] = dom.createElementMorph(element5);
              morphs[2] = dom.createMorphAt(element5, 3, 3);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["cvx-status ", ["subexpr", "if", [["subexpr", "eq", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [36, 65], [36, 97]]], 0, 0, 0, 0], "OK"], [], ["loc", [null, [36, 61], [36, 104]]], 0, 0], "active", "inactive"], [], ["loc", [null, [36, 56], [36, 126]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showInfo", ["get", "row.bgp_dc_status_set.0", ["loc", [null, [36, 148], [36, 173]]], 0, 0, 0, 0], ["get", "row.host", ["loc", [null, [36, 174], [36, 182]]], 0, 0, 0, 0]], [], ["loc", [null, [36, 128], [36, 184]]], 0, 0], ["content", "row.bgp_dc_status_set.0.status", ["loc", [null, [37, 55], [37, 91]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 24
                },
                "end": {
                  "line": 46,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/cvx.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              dom.setAttribute(el1, "style", "color:red;cursor:pointer");
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createTextNode("\n                                    NOT OK\n                            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element4);
              return morphs;
            },
            statements: [["element", "action", ["showInfo", "Check router cretentials.", ["get", "row.host", ["loc", [null, [42, 82], [42, 90]]], 0, 0, 0, 0]], [], ["loc", [null, [42, 34], [42, 92]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 16
              },
              "end": {
                "line": 48,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/cvx.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "cvx-vm");
            var el4 = dom.createElement("img");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" \n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1]);
            var element8 = dom.childAt(element7, [1, 0]);
            var morphs = new Array(7);
            morphs[0] = dom.createAttrMorph(element6, 'ids');
            morphs[1] = dom.createAttrMorph(element8, 'src');
            morphs[2] = dom.createElementMorph(element8);
            morphs[3] = dom.createMorphAt(element7, 3, 3);
            morphs[4] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element6, [5]), 0, 0);
            morphs[6] = dom.createMorphAt(element6, 7, 7);
            return morphs;
          },
          statements: [["attribute", "ids", ["get", "row.host", ["loc", [null, [28, 30], [28, 38]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "src", ["concat", ["/static/netconf/app/images/", ["subexpr", "if", [["subexpr", "eq", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [30, 94], [30, 126]]], 0, 0, 0, 0], "OK"], [], ["loc", [null, [30, 90], [30, 133]]], 0, 0], "vm-active.svg", "vm-inactive.svg"], [], ["loc", [null, [30, 85], [30, 169]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showCMenus", ["get", "row", ["loc", [null, [30, 193], [30, 196]]], 0, 0, 0, 0], ["get", "this", ["loc", [null, [30, 197], [30, 201]]], 0, 0, 0, 0]], ["on", "contextMenu"], ["loc", [null, [30, 171], [30, 220]]], 0, 0], ["content", "row.name", ["loc", [null, [31, 28], [31, 40]]], 0, 0, 0, 0], ["content", "row.host", ["loc", [null, [32, 28], [32, 40]]], 0, 0, 0, 0], ["content", "row.podtype", ["loc", [null, [33, 28], [33, 43]]], 0, 0, 0, 0], ["block", "if", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [34, 30], [34, 62]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [34, 24], [46, 31]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 12
            },
            "end": {
              "line": 49,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/cvx.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "row.category", ["loc", [null, [27, 26], [27, 38]]], 0, 0, 0, 0], "CVX"], [], ["loc", [null, [27, 22], [27, 45]]], 0, 0]], [], 0, null, ["loc", [null, [27, 16], [48, 23]]]]],
        locals: ["row"],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/cvx.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "loading-div");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2, "src", "/static/netconf/app/images/loading.svg");
          dom.setAttribute(el2, "alt", "Loading");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("Loading...");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 16
              },
              "end": {
                "line": 64,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/cvx.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "cvxData.data", ["loc", [null, [63, 20], [63, 36]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 16
              },
              "end": {
                "line": 66,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/cvx.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("No data available");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/cvx.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h1");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "fa fa-close");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("pre");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [2]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element2, 0, 0);
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "cvxData.name", ["loc", [null, [60, 16], [60, 32]]], 0, 0, 0, 0], ["element", "action", ["closecvs"], [], ["loc", [null, [60, 59], [60, 80]]], 0, 0], ["block", "if", [["get", "cvxData.data", ["loc", [null, [62, 22], [62, 34]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [62, 16], [66, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 0
            },
            "end": {
              "line": 82,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/cvx.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "advlst");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "advlstHdr");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          var el4 = dom.createTextNode("Message");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "advCls");
          var el4 = dom.createTextNode("×");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 3]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["hideInfo"], [], ["loc", [null, [76, 33], [76, 54]]], 0, 0], ["content", "rstatus", ["loc", [null, [79, 16], [79, 27]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 83,
            "column": 7
          }
        },
        "moduleName": "netconfig/templates/cvx.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("CVX");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "router-pod-title");
        var el4 = dom.createTextNode("Pod type:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "width", "100%");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "class", "table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("host");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("pod type");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "width", "10%");
        var el6 = dom.createTextNode("status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cvx-popup dnoneImp");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cvx-popup-detail animated fadeIn");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        \n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(">");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 5]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element10, [1, 3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element10, [3, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element10, 5, 5);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["name", "podtype", "action", "updatePodData", "placeholder", "Select Pod type", "class", "router-pod"], 0, null, ["loc", [null, [6, 12], [10, 29]]]], ["block", "each", [["get", "content", ["loc", [null, [26, 20], [26, 27]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [26, 12], [49, 21]]]], ["block", "if", [["get", "isShowloading", ["loc", [null, [54, 14], [54, 27]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [54, 8], [68, 15]]]], ["block", "if", [["get", "showInfo", ["loc", [null, [72, 6], [72, 14]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [72, 0], [82, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/dashboard", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 16
              },
              "end": {
                "line": 12,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/dashboard.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element10 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element10, 'value');
            morphs[1] = dom.createMorphAt(element10, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.id", ["loc", [null, [11, 37], [11, 44]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.attributes.name", ["loc", [null, [11, 48], [11, 72]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 12
            },
            "end": {
              "line": 13,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/dashboard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "locationlist", ["loc", [null, [10, 24], [10, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [10, 16], [12, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 16
              },
              "end": {
                "line": 20,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/dashboard.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element9, 'value');
            morphs[1] = dom.createMorphAt(element9, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "datacentre", ["loc", [null, [19, 37], [19, 47]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "datacentre", ["loc", [null, [19, 51], [19, 65]]], 0, 0, 0, 0]],
          locals: ["datacentre"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 12
            },
            "end": {
              "line": 21,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/dashboard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "dc.mtrprofile", ["loc", [null, [18, 24], [18, 37]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [18, 16], [20, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 16
            },
            "end": {
              "line": 27,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/dashboard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-times");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element8);
          return morphs;
        },
        statements: [["element", "action", ["clearDashboardSearch"], [], ["loc", [null, [26, 43], [26, 76]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 16
            },
            "end": {
              "line": 29,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/dashboard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-search");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element7);
          return morphs;
        },
        statements: [["element", "action", ["dashboardSearch"], [], ["loc", [null, [28, 44], [28, 72]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 59,
                        "column": 52
                      },
                      "end": {
                        "line": 61,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/dashboard.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                    -\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 61,
                        "column": 52
                      },
                      "end": {
                        "line": 63,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/dashboard.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "seq-no");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element1 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element1);
                    morphs[1] = dom.createUnsafeMorphAt(element1, 0, 0);
                    return morphs;
                  },
                  statements: [["element", "action", ["showHistory", ["get", "tdata.mtr_id", ["loc", [null, [62, 100], [62, 112]]], 0, 0, 0, 0]], [], ["loc", [null, [62, 77], [62, 114]]], 0, 0], ["inline", "formateisp", [["get", "tdata.prefix", ["loc", [null, [62, 129], [62, 141]]], 0, 0, 0, 0]], [], ["loc", [null, [62, 115], [62, 144]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 66,
                        "column": 52
                      },
                      "end": {
                        "line": 68,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/dashboard.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                    -\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child3 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 68,
                        "column": 52
                      },
                      "end": {
                        "line": 70,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/dashboard.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["content", "tdata.description", ["loc", [null, [69, 56], [69, 77]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child4 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 73,
                        "column": 52
                      },
                      "end": {
                        "line": 75,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/dashboard.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "formateprefix", [["get", "tdata.prefix", ["loc", [null, [74, 72], [74, 84]]], 0, 0, 0, 0], ["get", "tdata.owner", ["loc", [null, [74, 85], [74, 96]]], 0, 0, 0, 0]], [], ["loc", [null, [74, 56], [74, 98]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child5 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 75,
                        "column": 52
                      },
                      "end": {
                        "line": 77,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/dashboard.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["content", "tdata.owner", ["loc", [null, [76, 56], [76, 71]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 56,
                      "column": 36
                    },
                    "end": {
                      "line": 83,
                      "column": 40
                    }
                  },
                  "moduleName": "netconfig/templates/dashboard.hbs"
                },
                isEmpty: false,
                arity: 2,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("tr");
                  var el2 = dom.createTextNode("\n                                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "class", "txtUpper");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("                                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("<td><button>History</button></td>");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(5);
                  morphs[0] = dom.createAttrMorph(element2, 'class');
                  morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
                  morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
                  morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
                  morphs[4] = dom.createMorphAt(dom.childAt(element2, [8]), 0, 0);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "gt", [["get", "c.tdata.length", ["loc", [null, [57, 64], [57, 78]]], 0, 0, 0, 0], 1], [], ["loc", [null, [57, 60], [57, 81]]], 0, 0], "rowhighlight"], [], ["loc", [null, [57, 55], [57, 98]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["subexpr", "not-eq", [["get", "gindex", ["loc", [null, [59, 66], [59, 72]]], 0, 0, 0, 0], 0], [], ["loc", [null, [59, 58], [59, 75]]], 0, 0]], [], 0, 1, ["loc", [null, [59, 52], [63, 59]]]], ["block", "if", [["subexpr", "not-eq", [["get", "gindex", ["loc", [null, [66, 66], [66, 72]]], 0, 0, 0, 0], 0], [], ["loc", [null, [66, 58], [66, 75]]], 0, 0]], [], 2, 3, ["loc", [null, [66, 52], [70, 59]]]], ["block", "if", [["subexpr", "gt", [["get", "c.tdata.length", ["loc", [null, [73, 62], [73, 76]]], 0, 0, 0, 0], 1], [], ["loc", [null, [73, 58], [73, 79]]], 0, 0]], [], 4, 5, ["loc", [null, [73, 52], [77, 59]]]], ["content", "tdata.latency", ["loc", [null, [80, 52], [80, 69]]], 0, 0, 0, 0]],
                locals: ["tdata", "gindex"],
                templates: [child0, child1, child2, child3, child4, child5]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 32
                  },
                  "end": {
                    "line": 84,
                    "column": 32
                  }
                },
                "moduleName": "netconfig/templates/dashboard.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "c.tdata", ["loc", [null, [56, 44], [56, 51]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [56, 36], [83, 49]]]]],
              locals: ["c", "d"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 27
                },
                "end": {
                  "line": 88,
                  "column": 27
                }
              },
              "moduleName": "netconfig/templates/dashboard.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "G_dash");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "router");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("table");
              dom.setAttribute(el2, "cellpadding", "0");
              dom.setAttribute(el2, "class", "tablesub");
              dom.setAttribute(el2, "cellspacing", "0");
              dom.setAttribute(el2, "border", "0");
              dom.setAttribute(el2, "width", "100%");
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("thead");
              var el4 = dom.createTextNode("\n                                    ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("tr");
              var el5 = dom.createTextNode("\n                                        ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("td");
              var el6 = dom.createTextNode("Advertised Prefix");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                                        ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("td");
              var el6 = dom.createTextNode("ISP");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                                        ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("td");
              dom.setAttribute(el5, "width", "30%");
              var el6 = dom.createTextNode("Route");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                                        ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("td");
              var el6 = dom.createTextNode("Latency");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                                        ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("<td></td>");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                                    ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("tbody");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("                                ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element3, [2, 3]), 1, 1);
              return morphs;
            },
            statements: [["content", "a.0.tdata.0.name", ["loc", [null, [43, 72], [43, 96]]], 0, 0, 0, 0], ["block", "each", [["get", "a", ["loc", [null, [55, 40], [55, 41]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [55, 32], [84, 41]]]]],
            locals: ["a", "b"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 20
              },
              "end": {
                "line": 91,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/dashboard.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "subtabledata");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2, "class", "inlinefView");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "item", ["loc", [null, [42, 35], [42, 39]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [42, 27], [88, 36]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 12
            },
            "end": {
              "line": 93,
              "column": 13
            }
          },
          "moduleName": "netconfig/templates/dashboard.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createElement("span");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element5, [0]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          morphs[1] = dom.createElementMorph(element6);
          morphs[2] = dom.createMorphAt(element5, 2, 2);
          morphs[3] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "unless", [["get", "item.0.isShowData", ["loc", [null, [38, 77], [38, 96]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [38, 68], [38, 137]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showFData", ["get", "item", ["loc", [null, [38, 51], [38, 55]]], 0, 0, 0, 0]], [], ["loc", [null, [38, 30], [38, 57]]], 0, 0], ["content", "item.0.0.dc", ["loc", [null, [38, 153], [38, 172]]], 0, 0, 0, 0], ["block", "unless", [["get", "item.0.isShowData", ["loc", [null, [39, 30], [39, 49]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [39, 20], [91, 31]]]]],
        locals: ["item", "index"],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 114,
                  "column": 36
                },
                "end": {
                  "line": 116,
                  "column": 36
                }
              },
              "moduleName": "netconfig/templates/dashboard.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    -\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 116,
                  "column": 36
                },
                "end": {
                  "line": 118,
                  "column": 36
                }
              },
              "moduleName": "netconfig/templates/dashboard.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "formateisp", [["get", "tdata.prefix", ["loc", [null, [117, 60], [117, 72]]], 0, 0, 0, 0]], [], ["loc", [null, [117, 46], [117, 75]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 121,
                  "column": 36
                },
                "end": {
                  "line": 123,
                  "column": 36
                }
              },
              "moduleName": "netconfig/templates/dashboard.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    -\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 123,
                  "column": 36
                },
                "end": {
                  "line": 125,
                  "column": 36
                }
              },
              "moduleName": "netconfig/templates/dashboard.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "tdata.description", ["loc", [null, [124, 40], [124, 61]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 128,
                  "column": 36
                },
                "end": {
                  "line": 130,
                  "column": 36
                }
              },
              "moduleName": "netconfig/templates/dashboard.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "formateprefix", [["get", "tdata.prefix", ["loc", [null, [129, 56], [129, 68]]], 0, 0, 0, 0], ["get", "tdata.owner", ["loc", [null, [129, 69], [129, 80]]], 0, 0, 0, 0]], [], ["loc", [null, [129, 40], [129, 82]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 130,
                  "column": 36
                },
                "end": {
                  "line": 132,
                  "column": 36
                }
              },
              "moduleName": "netconfig/templates/dashboard.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "tdata.owner", ["loc", [null, [131, 40], [131, 55]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 110,
                "column": 20
              },
              "end": {
                "line": 138,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/dashboard.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "txtUpper");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("<td><button>History</button></td>");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
            morphs[4] = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
            morphs[5] = dom.createMorphAt(dom.childAt(element0, [10]), 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "gt", [["get", "c.result.length", ["loc", [null, [111, 48], [111, 63]]], 0, 0, 0, 0], 1], [], ["loc", [null, [111, 44], [111, 66]]], 0, 0], "rowhighlight"], [], ["loc", [null, [111, 39], [111, 83]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "c.date", ["loc", [null, [112, 36], [112, 46]]], 0, 0, 0, 0], ["block", "if", [["subexpr", "not-eq", [["get", "gindex", ["loc", [null, [114, 50], [114, 56]]], 0, 0, 0, 0], 0], [], ["loc", [null, [114, 42], [114, 59]]], 0, 0]], [], 0, 1, ["loc", [null, [114, 36], [118, 43]]]], ["block", "if", [["subexpr", "not-eq", [["get", "gindex", ["loc", [null, [121, 50], [121, 56]]], 0, 0, 0, 0], 0], [], ["loc", [null, [121, 42], [121, 59]]], 0, 0]], [], 2, 3, ["loc", [null, [121, 36], [125, 43]]]], ["block", "if", [["subexpr", "gt", [["get", "c.result.length", ["loc", [null, [128, 46], [128, 61]]], 0, 0, 0, 0], 1], [], ["loc", [null, [128, 42], [128, 64]]], 0, 0]], [], 4, 5, ["loc", [null, [128, 36], [132, 43]]]], ["content", "tdata.latency", ["loc", [null, [135, 36], [135, 53]]], 0, 0, 0, 0]],
          locals: ["tdata", "gindex"],
          templates: [child0, child1, child2, child3, child4, child5]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 109,
              "column": 16
            },
            "end": {
              "line": 139,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/dashboard.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "c.result", ["loc", [null, [110, 28], [110, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [110, 20], [138, 33]]]]],
        locals: ["c", "d"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 145,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/dashboard.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Dashboard");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "dash-refresh");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "fa fa-refresh");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "data-centre");
        var el4 = dom.createTextNode("Data Center:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "dashboard_search");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "text");
        dom.setAttribute(el4, "name", "prefix_search");
        dom.setAttribute(el4, "placeholder", "Search by advertised prefix");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "inlinefView");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "myModal");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "modal-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "close");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "cellpadding", "0");
        dom.setAttribute(el4, "class", "tablesub");
        dom.setAttribute(el4, "cellspacing", "0");
        dom.setAttribute(el4, "border", "0");
        dom.setAttribute(el4, "width", "100%");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Date");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Advertised Prefix");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("ISP");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        dom.setAttribute(el7, "width", "30%");
        var el8 = dom.createTextNode("Route");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        var el8 = dom.createTextNode("Latency");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [0, 1]);
        var element12 = dom.childAt(element11, [1, 0]);
        var element13 = dom.childAt(element11, [5, 1]);
        var element14 = dom.childAt(element11, [13]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(fragment, [2]);
        var element17 = dom.childAt(element16, [3]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(element18, [1]);
        var morphs = new Array(10);
        morphs[0] = dom.createElementMorph(element12);
        morphs[1] = dom.createElementMorph(element13);
        morphs[2] = dom.createMorphAt(dom.childAt(element11, [7]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element11, [11]), 1, 1);
        morphs[4] = dom.createElementMorph(element15);
        morphs[5] = dom.createMorphAt(element14, 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element16, [1]), 1, 1);
        morphs[7] = dom.createElementMorph(element17);
        morphs[8] = dom.createElementMorph(element19);
        morphs[9] = dom.createMorphAt(dom.childAt(element18, [3, 3]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["element", "action", ["rePoll"], [], ["loc", [null, [6, 15], [6, 34]]], 0, 0], ["block", "ember-chosen", [], ["action", "geoChange", "name", "apigeo", "style", "", "class", "dash-drop required", "placeholder", "Select a router..."], 0, null, ["loc", [null, [9, 12], [13, 29]]]], ["block", "ember-chosen", [], ["name", "dashboard_dc", "action", "changeDc", "placeholder", "Select DC", "class", "dash-dc"], 1, null, ["loc", [null, [17, 12], [21, 29]]]], ["element", "action", ["dashboardSearch"], ["on", "keyUp"], ["loc", [null, [24, 94], [24, 133]]], 0, 0], ["block", "if", [["get", "dashboardSearch", ["loc", [null, [25, 22], [25, 37]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [25, 16], [29, 23]]]], ["block", "each", [["get", "content.mtrprofile", ["loc", [null, [36, 20], [36, 38]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [36, 12], [93, 22]]]], ["element", "action", ["divclose"], [], ["loc", [null, [95, 22], [95, 43]]], 0, 0], ["element", "action", ["close"], [], ["loc", [null, [97, 32], [97, 50]]], 0, 0], ["block", "each", [["get", "history", ["loc", [null, [109, 24], [109, 31]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [109, 16], [139, 25]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/dashboard_lan", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 29,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/dashboard_lan.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "alarm-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [27, 26], [27, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [26, 8], [28, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 6
              },
              "end": {
                "line": 42,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/dashboard_lan.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "device-status-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [40, 24], [40, 28]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [39, 6], [41, 8]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 4
              },
              "end": {
                "line": 55,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/dashboard_lan.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "device-category-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [53, 26], [53, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [52, 8], [54, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 56,
                "column": 4
              },
              "end": {
                "line": 68,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/dashboard_lan.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "commit-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [66, 26], [66, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [65, 8], [67, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/dashboard_lan.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 6, "y", 0], ["loc", [null, [19, 14], [24, 7]]], 0, 0]], 0, null, ["loc", [null, [18, 4], [29, 24]]]], ["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 0, "y", 0, "no-resize", true], ["loc", [null, [31, 14], [37, 7]]], 0, 0]], 1, null, ["loc", [null, [30, 6], [42, 24]]]], ["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [44, 14], [50, 7]]], 0, 0]], 2, null, ["loc", [null, [43, 4], [55, 24]]]], ["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 6, "y", 6, "no-resize", true], ["loc", [null, [57, 14], [63, 7]]], 0, 0]], 3, null, ["loc", [null, [56, 4], [68, 24]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 71,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/dashboard_lan.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("select");
        dom.setAttribute(el4, "name", "pSelect");
        dom.setAttribute(el4, "placeholder", "Select IP");
        dom.setAttribute(el4, "class", "pick-list");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "dashboard");
        var el6 = dom.createTextNode("Dashboard");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("option");
        dom.setAttribute(el5, "value", "telemetry");
        var el6 = dom.createTextNode("Telemetry");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "data-centre");
        var el4 = dom.createElement("b");
        var el5 = dom.createTextNode(" Data Center:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer lan-dashboard");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 0]);
        var element2 = dom.childAt(element0, [3, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createAttrMorph(element2, 'onchange');
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 2, 2);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["showLeft"], [], ["loc", [null, [3, 39], [3, 60]]], 0, 0], ["attribute", "onchange", ["subexpr", "action", ["pageSelect"], [], ["loc", [null, [null, null], [5, 67]]], 0, 0], 0, 0, 0, 0], ["content", "dcInfo.0.attributes.name", ["loc", [null, [10, 64], [10, 94]]], 0, 0, 0, 0], ["block", "grid-stack", [], ["options", ["subexpr", "hash", [], ["animate", true], ["loc", [null, [15, 14], [15, 33]]], 0, 0], "onChange", ["subexpr", "action", ["change"], [], ["loc", [null, [16, 15], [16, 32]]], 0, 0]], 0, null, ["loc", [null, [14, 4], [69, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/dc", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 8
            },
            "end": {
              "line": 6,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/dc.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("POP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 8,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/dc.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("         ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("LAN");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/dc.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "expand");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-long-arrow-left R");
          dom.setAttribute(el2, "aria-hidden", "true");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "lan-action");
          var el3 = dom.createTextNode("Expanded view of ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var element6 = dom.childAt(element5, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element5, 'style');
          morphs[1] = dom.createElementMorph(element6);
          morphs[2] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "style", ["subexpr", "if", [["get", "content.isPop", ["loc", [null, [32, 39], [32, 52]]], 0, 0, 0, 0], "display:none", "display:block"], [], ["loc", [null, [null, null], [32, 85]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["exitEnlargedView"], [], ["loc", [null, [33, 66], [33, 95]]], 0, 0], ["content", "pods", ["loc", [null, [34, 54], [34, 62]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 12
            },
            "end": {
              "line": 56,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/dc.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 1");
          var el2 = dom.createTextNode("Pod 1");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 2");
          var el2 = dom.createTextNode("Pod 2");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 3");
          var el2 = dom.createTextNode("Pod 3");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 4");
          var el2 = dom.createTextNode("Pod 4");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element4, 'selected');
          return morphs;
        },
        statements: [["attribute", "selected", ["subexpr", "if", [["get", "content.isPop", ["loc", [null, [52, 52], [52, 65]]], 0, 0, 0, 0], true, ""], [], ["loc", [null, [null, null], [52, 75]]], 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 103,
                  "column": 20
                },
                "end": {
                  "line": 105,
                  "column": 20
                }
              },
              "moduleName": "netconfig/templates/dc.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "item.bgp_dc_status_set.0.status", ["loc", [null, [104, 24], [104, 61]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 105,
                  "column": 20
                },
                "end": {
                  "line": 107,
                  "column": 20
                }
              },
              "moduleName": "netconfig/templates/dc.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        NOT OK\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 97,
                "column": 8
              },
              "end": {
                "line": 111,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/dc.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cvx-list animated fadeInRight");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("img");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "cvx-list-txt");
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h3");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createTextNode("Status:");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("i");
            dom.setAttribute(el5, "class", "fa");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" \n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("                    ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element0, [3]);
            var element3 = dom.childAt(element2, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element1, 'src');
            morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
            morphs[2] = dom.createAttrMorph(element3, 'class');
            morphs[3] = dom.createMorphAt(dom.childAt(element3, [1]), 3, 3);
            return morphs;
          },
          statements: [["attribute", "src", ["concat", ["/static/netconf/app/images/", ["subexpr", "if", [["subexpr", "eq", [["get", "item.bgp_dc_status_set.0.status", ["loc", [null, [99, 62], [99, 95]]], 0, 0, 0, 0], "OK"], [], ["loc", [null, [99, 58], [99, 102]]], 0, 0], "vm-active.svg", "vm-inactive.svg"], [], ["loc", [null, [99, 53], [99, 138]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [101, 24], [101, 37]]], 0, 0, 0, 0], ["attribute", "class", ["concat", ["cvx-status ", ["subexpr", "if", [["subexpr", "eq", [["get", "item.bgp_dc_status_set.0.status", ["loc", [null, [102, 53], [102, 86]]], 0, 0, 0, 0], "OK"], [], ["loc", [null, [102, 49], [102, 93]]], 0, 0], "active", "inactive"], [], ["loc", [null, [102, 44], [102, 115]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "item.bgp_dc_status_set.0.status", ["loc", [null, [103, 26], [103, 59]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [103, 20], [107, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/dc.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "item.category", ["loc", [null, [97, 18], [97, 31]]], 0, 0, 0, 0], "CVX"], [], ["loc", [null, [97, 14], [97, 38]]], 0, 0]], [], 0, null, ["loc", [null, [97, 8], [111, 15]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 115,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/dc.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "data-centre");
        var el4 = dom.createElement("b");
        var el5 = dom.createTextNode(" Data Center:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "fsButton");
        var el3 = dom.createTextNode("Toggle Full Screen");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "class", "switch");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3, "type", "checkbox");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "slider round");
        dom.setAttribute(el3, "onclick", "toggleNightMode()");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "graph");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "topology");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gAction");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "lan-action");
        var el4 = dom.createTextNode("Link");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "checkmark");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "class", "traf-contain");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "traf-action");
        var el4 = dom.createTextNode("Traffic");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n                ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "traf-mark");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "class", "podLabel");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "lan-action");
        var el4 = dom.createTextNode("Pods");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "podSelect");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "popup1");
        dom.setAttribute(el1, "class", "overlay");
        var el2 = dom.createTextNode("\n	");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "popup");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "title");
        var el4 = dom.createTextNode("\n		");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Configuration of ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "conf-refresh");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-refresh");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n		  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "close");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n	");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "content");
        dom.setAttribute(el3, "pre-line", "");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createTextNode("\n			");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n		");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n	");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "transceiver");
        var el2 = dom.createTextNode("\n	");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "popup");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "title");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Transceivers of ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "button");
        var el5 = dom.createTextNode(" Export to XLS");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "close");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "table");
        dom.setAttribute(el4, "id", "popuptbl");
        dom.setAttribute(el4, "width", "100%");
        dom.setAttribute(el4, "border", "1");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cvx-comp");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [1, 0]);
        var element10 = dom.childAt(element7, [3]);
        var element11 = dom.childAt(fragment, [4]);
        var element12 = dom.childAt(element11, [7]);
        var element13 = dom.childAt(element11, [9]);
        var element14 = dom.childAt(fragment, [6, 1]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element15, [3, 1]);
        var element17 = dom.childAt(element15, [5]);
        var element18 = dom.childAt(fragment, [8, 1, 1]);
        var element19 = dom.childAt(element18, [3]);
        var element20 = dom.childAt(element18, [5]);
        var morphs = new Array(18);
        morphs[0] = dom.createElementMorph(element9);
        morphs[1] = dom.createMorphAt(element8, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element8, [5]), 2, 2);
        morphs[3] = dom.createElementMorph(element10);
        morphs[4] = dom.createMorphAt(element11, 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element11, [3]), 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element11, [5]), 3, 3);
        morphs[7] = dom.createAttrMorph(element12, 'style');
        morphs[8] = dom.createAttrMorph(element13, 'style');
        morphs[9] = dom.createMorphAt(element13, 1, 1);
        morphs[10] = dom.createMorphAt(dom.childAt(element15, [1]), 1, 1);
        morphs[11] = dom.createElementMorph(element16);
        morphs[12] = dom.createElementMorph(element17);
        morphs[13] = dom.createMorphAt(dom.childAt(element14, [3, 1]), 1, 1);
        morphs[14] = dom.createMorphAt(dom.childAt(element18, [1]), 1, 1);
        morphs[15] = dom.createElementMorph(element19);
        morphs[16] = dom.createElementMorph(element20);
        morphs[17] = dom.createMorphAt(dom.childAt(fragment, [11]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["showLeft"], [], ["loc", [null, [3, 39], [3, 60]]], 0, 0], ["block", "if", [["get", "content.isPop", ["loc", [null, [4, 14], [4, 27]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 8], [8, 15]]]], ["content", "dcInfo.0.attributes.name", ["loc", [null, [10, 64], [10, 94]]], 0, 0, 0, 0], ["element", "action", ["toggleFS"], [], ["loc", [null, [19, 27], [19, 48]]], 0, 0], ["block", "if", [["get", "isEnlargedView", ["loc", [null, [31, 14], [31, 28]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [31, 8], [36, 15]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "showLine", ["loc", [null, [39, 44], [39, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "change", ["subexpr", "action", ["toggleLinks"], [], ["loc", [null, [39, 60], [39, 82]]], 0, 0]], ["loc", [null, [39, 12], [39, 84]]], 0, 0], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "showTraffic", ["loc", [null, [44, 48], [44, 59]]], 0, 0, 0, 0]], [], [], 0, 0], "change", ["subexpr", "action", ["trafficShow"], [], ["loc", [null, [44, 67], [44, 89]]], 0, 0]], ["loc", [null, [44, 16], [44, 91]]], 0, 0], ["attribute", "style", ["subexpr", "if", [["get", "content.isPop", ["loc", [null, [47, 43], [47, 56]]], 0, 0, 0, 0], "display:none", "display:block"], [], ["loc", [null, [null, null], [47, 89]]], 0, 0], 0, 0, 0, 0], ["attribute", "style", ["subexpr", "if", [["get", "content.isPop", ["loc", [null, [50, 42], [50, 55]]], 0, 0, 0, 0], "display:none", "display:block"], [], ["loc", [null, [null, null], [50, 88]]], 0, 0], 0, 0, 0, 0], ["block", "ember-chosen", [], ["name", "pods", "action", "podSelection", "class", "podSelect_drop", "placeholder", "Select pods", "multiple", true], 3, null, ["loc", [null, [51, 12], [56, 29]]]], ["content", "sDevice.name", ["loc", [null, [63, 23], [63, 39]]], 0, 0, 0, 0], ["element", "action", ["refresh", ["get", "sDevice.host", ["loc", [null, [65, 32], [65, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [65, 13], [65, 46]]], 0, 0], ["element", "action", ["closePopup"], [], ["loc", [null, [67, 21], [67, 44]]], 0, 0], ["content", "confText", ["loc", [null, [71, 3], [71, 15]]], 0, 0, 0, 0], ["content", "device.host", ["loc", [null, [79, 32], [79, 47]]], 0, 0, 0, 0], ["element", "action", ["exportToXls", ["get", "device.host", ["loc", [null, [80, 58], [80, 69]]], 0, 0, 0, 0]], [], ["loc", [null, [80, 35], [80, 71]]], 0, 0], ["element", "action", ["closeTrans"], [], ["loc", [null, [81, 29], [81, 52]]], 0, 0], ["block", "each", [["get", "cvxData", ["loc", [null, [96, 12], [96, 19]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [96, 4], [112, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/error/unauthorized", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/error/unauthorized.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "style", "text-align: center;color: red;padding-top: 1%;");
        var el2 = dom.createTextNode("You Do Not Have Permission To Perform This Action.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/foo", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/foo.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/inlinefilterview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 52,
                        "column": 64
                      },
                      "end": {
                        "line": 59,
                        "column": 64
                      }
                    },
                    "moduleName": "netconfig/templates/inlinefilterview.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("tr");
                    var el2 = dom.createTextNode("\n                                                                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                                                                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                                                                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                                                                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createElement("span");
                    var el4 = dom.createElement("i");
                    dom.appendChild(el3, el4);
                    var el4 = dom.createTextNode(" ");
                    dom.appendChild(el3, el4);
                    var el4 = dom.createComment("");
                    dom.appendChild(el3, el4);
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                                                                    ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var element1 = dom.childAt(element0, [7, 0]);
                    var element2 = dom.childAt(element1, [0]);
                    var morphs = new Array(5);
                    morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
                    morphs[1] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
                    morphs[2] = dom.createAttrMorph(element1, 'class');
                    morphs[3] = dom.createAttrMorph(element2, 'class');
                    morphs[4] = dom.createMorphAt(element1, 2, 2);
                    return morphs;
                  },
                  statements: [["content", "nmap.host", ["loc", [null, [55, 76], [55, 89]]], 0, 0, 0, 0], ["content", "nmap.port", ["loc", [null, [56, 76], [56, 89]]], 0, 0, 0, 0], ["attribute", "class", ["concat", ["intftxt nobg ", ["get", "nmap.status", ["loc", [null, [57, 104], [57, 115]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", ["nicon-", ["get", "nmap.status", ["loc", [null, [57, 137], [57, 148]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "nmap.status", ["loc", [null, [57, 157], [57, 172]]], 0, 0, 0, 0]],
                  locals: ["nmap"],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 59,
                        "column": 64
                      },
                      "end": {
                        "line": 63,
                        "column": 64
                      }
                    },
                    "moduleName": "netconfig/templates/inlinefilterview.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("tr");
                    var el2 = dom.createTextNode("\n                                                                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    dom.setAttribute(el2, "colspan", "3");
                    dom.setAttribute(el2, "align", "center");
                    var el3 = dom.createTextNode("No data available");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                                                                    ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 40,
                      "column": 44
                    },
                    "end": {
                      "line": 67,
                      "column": 44
                    }
                  },
                  "moduleName": "netconfig/templates/inlinefilterview.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nmapData");
                  var el2 = dom.createTextNode("\n                                                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("table");
                  dom.setAttribute(el2, "cellpadding", "0");
                  dom.setAttribute(el2, "class", "tablesub");
                  dom.setAttribute(el2, "cellspacing", "0");
                  dom.setAttribute(el2, "border", "0");
                  dom.setAttribute(el2, "width", "100%");
                  var el3 = dom.createTextNode("\n                                                            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("thead");
                  var el4 = dom.createTextNode("\n                                                                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("tr");
                  var el5 = dom.createTextNode("\n                                                                    ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("td");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                                                                    ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("td");
                  var el6 = dom.createTextNode("Host");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                                                                    ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("td");
                  var el6 = dom.createTextNode("Port");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                                                                    ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("td");
                  var el6 = dom.createTextNode("Status");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                                                                ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                                                            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                                                            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("tbody");
                  var el4 = dom.createTextNode("\n");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("                                                            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                                                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 3]), 1, 1);
                  return morphs;
                },
                statements: [["block", "each", [["get", "item.nmap", ["loc", [null, [52, 72], [52, 81]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [52, 64], [63, 73]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 69,
                        "column": 52
                      },
                      "end": {
                        "line": 71,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/inlinefilterview.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        Loading...\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 71,
                        "column": 52
                      },
                      "end": {
                        "line": 73,
                        "column": 52
                      }
                    },
                    "moduleName": "netconfig/templates/inlinefilterview.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        Click run to fetch data\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 67,
                      "column": 44
                    },
                    "end": {
                      "line": 75,
                      "column": 44
                    }
                  },
                  "moduleName": "netconfig/templates/inlinefilterview.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "trNoData");
                  var el2 = dom.createTextNode("\n");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("                                                ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["block", "if", [["get", "item.isFetchingData", ["loc", [null, [69, 58], [69, 77]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [69, 52], [73, 59]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 32
                  },
                  "end": {
                    "line": 78,
                    "column": 32
                  }
                },
                "moduleName": "netconfig/templates/inlinefilterview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "colspan", "6");
                dom.setAttribute(el2, "class", "p0Imp");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                                        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["block", "if", [["get", "item.nmap", ["loc", [null, [40, 50], [40, 59]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [40, 44], [75, 51]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 28
                },
                "end": {
                  "line": 79,
                  "column": 28
                }
              },
              "moduleName": "netconfig/templates/inlinefilterview.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createElement("span");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "txtCapt");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "align", "center");
              var el3 = dom.createTextNode("\n                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "runbtn");
              var el4 = dom.createElement("i");
              dom.setAttribute(el4, "class", "nicon-play");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" Run");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var element4 = dom.childAt(element3, [1, 0]);
              var element5 = dom.childAt(element3, [11, 1]);
              var morphs = new Array(8);
              morphs[0] = dom.createAttrMorph(element4, 'class');
              morphs[1] = dom.createElementMorph(element4);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element3, [9]), 0, 0);
              morphs[6] = dom.createElementMorph(element5);
              morphs[7] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "item.isShowData", ["loc", [null, [28, 89], [28, 104]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [28, 84], [28, 145]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showFData", ["get", "item", ["loc", [null, [28, 67], [28, 71]]], 0, 0, 0, 0]], [], ["loc", [null, [28, 46], [28, 73]]], 0, 0], ["content", "item.name", ["loc", [null, [29, 56], [29, 69]]], 0, 0, 0, 0], ["content", "item.iplist", ["loc", [null, [30, 40], [30, 55]]], 0, 0, 0, 0], ["content", "item.portlist", ["loc", [null, [31, 40], [31, 57]]], 0, 0, 0, 0], ["content", "item.protocol", ["loc", [null, [32, 40], [32, 57]]], 0, 0, 0, 0], ["element", "action", ["shownmap", ["get", "item", ["loc", [null, [34, 81], [34, 85]]], 0, 0, 0, 0]], [], ["loc", [null, [34, 61], [34, 87]]], 0, 0], ["block", "if", [["get", "item.isShowData", ["loc", [null, [37, 38], [37, 53]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [37, 32], [78, 39]]]]],
            locals: ["item", "index"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 16
              },
              "end": {
                "line": 83,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/inlinefilterview.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "subtabledata");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("table");
            dom.setAttribute(el2, "cellpadding", "0");
            dom.setAttribute(el2, "class", "table");
            dom.setAttribute(el2, "cellspacing", "0");
            dom.setAttribute(el2, "border", "0");
            dom.setAttribute(el2, "width", "100%");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("thead");
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("tr");
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("td");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("td");
            var el6 = dom.createTextNode("Name");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("td");
            var el6 = dom.createTextNode("IP List");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("td");
            var el6 = dom.createTextNode("Port List");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("td");
            var el6 = dom.createTextNode("Protocol");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("td");
            dom.setAttribute(el5, "width", "12%");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                            ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tbody");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "gitem.data", ["loc", [null, [26, 36], [26, 46]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [26, 28], [79, 37]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 8
            },
            "end": {
              "line": 85,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/inlinefilterview.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createElement("span");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "runbtn fr");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "nicon-play");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Run");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element7, [0]);
          var element9 = dom.childAt(element7, [4]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element8, 'class');
          morphs[1] = dom.createElementMorph(element8);
          morphs[2] = dom.createMorphAt(element7, 2, 2);
          morphs[3] = dom.createElementMorph(element9);
          morphs[4] = dom.createMorphAt(element6, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "gitem.isShowData", ["loc", [null, [11, 75], [11, 91]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [11, 70], [11, 132]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showFData", ["get", "gitem", ["loc", [null, [11, 47], [11, 52]]], 0, 0, 0, 0], true], [], ["loc", [null, [11, 26], [11, 59]]], 0, 0], ["content", "gitem.dc", ["loc", [null, [11, 142], [11, 154]]], 0, 0, 0, 0], ["element", "action", ["shownmap", ["get", "gitem", ["loc", [null, [11, 199], [11, 204]]], 0, 0, 0, 0]], [], ["loc", [null, [11, 179], [11, 206]]], 0, 0], ["block", "if", [["get", "gitem.isShowData", ["loc", [null, [12, 22], [12, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 16], [83, 23]]]]],
        locals: ["gitem"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 88,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/inlinefilterview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Inline Filter View");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "inlinefView");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [0, 1, 1, 0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element10);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["block", "each", [["get", "content", ["loc", [null, [9, 16], [9, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [9, 8], [85, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/interfaces", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 16
              },
              "end": {
                "line": 11,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/interfaces.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element7, 'value');
            morphs[1] = dom.createMorphAt(element7, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [10, 37], [10, 46]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [10, 50], [10, 63]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 12
            },
            "end": {
              "line": 12,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/interfaces.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.router", ["loc", [null, [9, 24], [9, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [9, 16], [11, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 9
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "moduleName": "netconfig/templates/interfaces.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h2");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "seq-no");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "intfdesc");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "inftdetail");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          var el4 = dom.createTextNode("TRAFFIC-STATISTICS");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "intfdet");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "intfcollft");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "intfrow");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intflbl");
          var el7 = dom.createTextNode("Input bps:");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intftxt");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "intfrow");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intflbl");
          var el7 = dom.createTextNode("Input pps:");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intftxt");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "intfcolrgt");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "intfrow");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intflbl");
          var el7 = dom.createTextNode("Output bps:");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intftxt");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "intfrow");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intflbl");
          var el7 = dom.createTextNode("Output pps:");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intftxt");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "intfrow");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "intflbl");
          var el7 = dom.createTextNode("Oper status:");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1, 0]);
          var element3 = dom.childAt(element1, [5, 3]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [3]);
          var element6 = dom.childAt(element5, [5, 3]);
          var morphs = new Array(9);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element4, [1, 3]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element4, [3, 3]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element5, [1, 3]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element5, [3, 3]), 0, 0);
          morphs[7] = dom.createAttrMorph(element6, 'class');
          morphs[8] = dom.createMorphAt(element6, 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["showInterface", ["get", "item.id", ["loc", [null, [20, 66], [20, 73]]], 0, 0, 0, 0]], [], ["loc", [null, [20, 41], [20, 75]]], 0, 0], ["content", "item.attributes.name", ["loc", [null, [20, 76], [20, 100]]], 0, 0, 0, 0], ["content", "item.attributes.description", ["loc", [null, [21, 39], [21, 70]]], 0, 0, 0, 0], ["content", "item.attributes.inputbps", ["loc", [null, [28, 54], [28, 82]]], 0, 0, 0, 0], ["content", "item.attributes.inputpps", ["loc", [null, [32, 54], [32, 82]]], 0, 0, 0, 0], ["content", "item.attributes.outputbps", ["loc", [null, [38, 54], [38, 83]]], 0, 0, 0, 0], ["content", "item.attributes.outputpps", ["loc", [null, [42, 54], [42, 83]]], 0, 0, 0, 0], ["attribute", "class", ["concat", ["intftxt ", ["get", "item.attributes.status", ["loc", [null, [46, 55], [46, 77]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.attributes.status", ["loc", [null, [46, 81], [46, 107]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 16
            },
            "end": {
              "line": 68,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/interfaces.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          return morphs;
        },
        statements: [["content", "key", ["loc", [null, [65, 28], [65, 35]]], 0, 0, 0, 0], ["content", "value", ["loc", [null, [66, 28], [66, 37]]], 0, 0, 0, 0]],
        locals: ["key", "value"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/interfaces.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Interface");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "hsplit cGray");
        var el4 = dom.createTextNode("|");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "fs13");
        var el5 = dom.createTextNode("Router:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "w180");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "interfacew");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "myModal");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "info-content");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createTextNode("×");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    	    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Inferface Information");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "cellpadding", "0");
        dom.setAttribute(el4, "class", "tablesub");
        dom.setAttribute(el4, "cellspacing", "0");
        dom.setAttribute(el4, "border", "0");
        dom.setAttribute(el4, "width", "100%");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [0, 1]);
        var element9 = dom.childAt(element8, [1, 0]);
        var element10 = dom.childAt(fragment, [2]);
        var element11 = dom.childAt(element10, [3, 1]);
        var element12 = dom.childAt(element11, [1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element9);
        morphs[1] = dom.createMorphAt(dom.childAt(element8, [9]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element10, [1]), 1, 1);
        morphs[3] = dom.createElementMorph(element12);
        morphs[4] = dom.createMorphAt(dom.childAt(element11, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["block", "ember-chosen", [], ["name", "router", "action", "routerchanged", "placeholder", "Select a router..."], 0, null, ["loc", [null, [8, 12], [12, 29]]]], ["block", "each", [["get", "content.interface", ["loc", [null, [18, 17], [18, 34]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [18, 9], [52, 18]]]], ["element", "action", ["close"], [], ["loc", [null, [58, 32], [58, 50]]], 0, 0], ["block", "each-in", [["get", "interface", ["loc", [null, [63, 27], [63, 36]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [63, 16], [68, 28]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/lanbgp", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanbgp.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element10 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element10, 'value');
            morphs[1] = dom.createMorphAt(element10, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [9, 27], [9, 30]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [9, 34], [9, 41]]], 0, 0, 0, 0]],
          locals: ["pod"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 6
            },
            "end": {
              "line": 11,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanbgp.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "pod", ["loc", [null, [8, 16], [8, 19]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 8], [10, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 29,
                      "column": 16
                    },
                    "end": {
                      "line": 31,
                      "column": 16
                    }
                  },
                  "moduleName": "netconfig/templates/lanbgp.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("img");
                  dom.setAttribute(el1, "src", "/static/netconf/app/images/checked.svg");
                  dom.setAttribute(el1, "width", "16");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("             \n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 31,
                      "column": 16
                    },
                    "end": {
                      "line": 33,
                      "column": 16
                    }
                  },
                  "moduleName": "netconfig/templates/lanbgp.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("img");
                  dom.setAttribute(el1, "src", "/static/netconf/app/images/cancel.svg");
                  dom.setAttribute(el1, "width", "16");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.9.1",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 56,
                          "column": 28
                        },
                        "end": {
                          "line": 56,
                          "column": 76
                        }
                      },
                      "moduleName": "netconfig/templates/lanbgp.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["content", "bgppeer.flat_count", ["loc", [null, [56, 54], [56, 76]]], 0, 0, 0, 0]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.9.1",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 56,
                          "column": 76
                        },
                        "end": {
                          "line": 56,
                          "column": 85
                        }
                      },
                      "moduleName": "netconfig/templates/lanbgp.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("-");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                var child2 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "revision": "Ember@2.9.1",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 64,
                            "column": 75
                          },
                          "end": {
                            "line": 64,
                            "column": 117
                          }
                        },
                        "moduleName": "netconfig/templates/lanbgp.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("-");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes() {
                        return [];
                      },
                      statements: [],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child1 = (function () {
                    return {
                      meta: {
                        "revision": "Ember@2.9.1",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 65,
                            "column": 28
                          },
                          "end": {
                            "line": 67,
                            "column": 28
                          }
                        },
                        "moduleName": "netconfig/templates/lanbgp.hbs"
                      },
                      isEmpty: false,
                      arity: 1,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                              ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("span");
                        dom.setAttribute(el1, "class", "net_advList");
                        var el2 = dom.createComment("");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                        return morphs;
                      },
                      statements: [["content", "bgppeeradv.network", ["loc", [null, [66, 56], [66, 78]]], 0, 0, 0, 0]],
                      locals: ["bgppeeradv"],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "revision": "Ember@2.9.1",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 60,
                          "column": 22
                        },
                        "end": {
                          "line": 70,
                          "column": 22
                        }
                      },
                      "moduleName": "netconfig/templates/lanbgp.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("tr");
                      var el2 = dom.createTextNode("\n                          ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("td");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                          ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("td");
                      dom.setAttribute(el2, "colspan", "5");
                      dom.setAttribute(el2, "style", "padding-botton:20px");
                      var el3 = dom.createTextNode("\n                            ");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createElement("h3");
                      dom.setAttribute(el3, "class", "advList_title");
                      var el4 = dom.createTextNode("Advertised List:");
                      dom.appendChild(el3, el4);
                      dom.appendChild(el2, el3);
                      var el3 = dom.createComment("");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createTextNode("\n");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createComment("");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createTextNode("                          ");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                        ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element0 = dom.childAt(fragment, [1, 3]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createMorphAt(element0, 2, 2);
                      morphs[1] = dom.createMorphAt(element0, 4, 4);
                      return morphs;
                    },
                    statements: [["block", "unless", [["get", "bgppeer.bgp_advertisement_set", ["loc", [null, [64, 85], [64, 114]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [64, 75], [64, 128]]]], ["block", "each", [["get", "bgppeer.bgp_advertisement_set", ["loc", [null, [65, 36], [65, 65]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [65, 28], [67, 37]]]]],
                    locals: [],
                    templates: [child0, child1]
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.9.1",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 49,
                        "column": 20
                      },
                      "end": {
                        "line": 71,
                        "column": 20
                      }
                    },
                    "moduleName": "netconfig/templates/lanbgp.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                      ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("tr");
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    dom.setAttribute(el2, "align", "right");
                    var el3 = dom.createElement("span");
                    dom.setAttribute(el3, "class", "bgprname");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("<td><span class=\"bgpadv\" {{action 'showadvlst' bgppeer bgppeer}}>{{bgppeer.peer_host}}</span></td>");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                      ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element1 = dom.childAt(fragment, [1]);
                    var element2 = dom.childAt(element1, [1, 0]);
                    var morphs = new Array(11);
                    morphs[0] = dom.createAttrMorph(element1, 'ids');
                    morphs[1] = dom.createAttrMorph(element1, 'class');
                    morphs[2] = dom.createAttrMorph(element2, 'class');
                    morphs[3] = dom.createElementMorph(element2);
                    morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
                    morphs[5] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
                    morphs[6] = dom.createMorphAt(dom.childAt(element1, [9]), 0, 0);
                    morphs[7] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
                    morphs[8] = dom.createMorphAt(dom.childAt(element1, [13]), 0, 0);
                    morphs[9] = dom.createMorphAt(dom.childAt(element1, [15]), 0, 0);
                    morphs[10] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["attribute", "ids", ["concat", [["get", "bgppeer.host", ["loc", [null, [50, 33], [50, 45]]], 0, 0, 0, 0], "_", ["get", "bgppeer.peer_host", ["loc", [null, [50, 50], [50, 67]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", ["bgp_", ["subexpr", "tolowercase", [["get", "bgppeer.peer_state", ["loc", [null, [50, 96], [50, 114]]], 0, 0, 0, 0]], [], ["loc", [null, [50, 82], [50, 116]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "bgppeer.isShowAdvData", ["loc", [null, [51, 142], [51, 163]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [51, 137], [51, 204]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showAdvData", ["get", "bgppeer", ["loc", [null, [51, 88], [51, 95]]], 0, 0, 0, 0], ["get", "router", ["loc", [null, [51, 96], [51, 102]]], 0, 0, 0, 0], ["get", "router.wData.bgp-peer", ["loc", [null, [51, 103], [51, 124]]], 0, 0, 0, 0]], [], ["loc", [null, [51, 65], [51, 126]]], 0, 0], ["content", "bgppeer.peer_host", ["loc", [null, [53, 28], [53, 49]]], 0, 0, 0, 0], ["content", "bgppeer.peer_as", ["loc", [null, [54, 28], [54, 47]]], 0, 0, 0, 0], ["content", "bgppeer.Description", ["loc", [null, [55, 28], [55, 51]]], 0, 0, 0, 0], ["block", "if", [["get", "bgppeer.flat_count", ["loc", [null, [56, 34], [56, 52]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [56, 28], [56, 92]]]], ["content", "bgppeer.peer_state", ["loc", [null, [57, 28], [57, 50]]], 0, 0, 0, 0], ["content", "bgppeer.elapsed_time", ["loc", [null, [58, 28], [58, 52]]], 0, 0, 0, 0], ["block", "if", [["get", "bgppeer.isShowAdvData", ["loc", [null, [60, 28], [60, 49]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [60, 22], [70, 29]]]]],
                  locals: ["bgppeer"],
                  templates: [child0, child1, child2]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 35,
                      "column": 16
                    },
                    "end": {
                      "line": 74,
                      "column": 16
                    }
                  },
                  "moduleName": "netconfig/templates/lanbgp.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("table");
                  dom.setAttribute(el1, "cellpadding", "0");
                  dom.setAttribute(el1, "class", "table");
                  dom.setAttribute(el1, "cellspacing", "0");
                  dom.setAttribute(el1, "border", "0");
                  dom.setAttribute(el1, "width", "100%");
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("thead");
                  var el3 = dom.createTextNode("\n                    ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("tr");
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("td");
                  dom.setAttribute(el4, "style", "text-align:center");
                  var el5 = dom.createElement("span");
                  dom.setAttribute(el5, "class", "bgprname");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("td");
                  var el5 = dom.createTextNode("Peer-Address");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("td");
                  var el5 = dom.createTextNode("Peer-As");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("td");
                  dom.setAttribute(el4, "width", "20%");
                  var el5 = dom.createTextNode("Description");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("td");
                  dom.setAttribute(el4, "nowrap", "");
                  var el5 = dom.createTextNode("Flap-Count");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("td");
                  var el5 = dom.createTextNode("Peer-State");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("td");
                  dom.setAttribute(el4, "nowrap", "");
                  var el5 = dom.createTextNode("Elapsed-Time");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                    ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("tbody");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                  ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var element4 = dom.childAt(element3, [1, 1, 1, 0]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element4, 'class');
                  morphs[1] = dom.createElementMorph(element4);
                  morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "router.isShowAllAdvList", ["loc", [null, [39, 147], [39, 170]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [39, 142], [39, 211]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showAllAdvList", ["get", "router", ["loc", [null, [39, 101], [39, 107]]], 0, 0, 0, 0], ["get", "router.wData.bgp-peer", ["loc", [null, [39, 108], [39, 129]]], 0, 0, 0, 0]], [], ["loc", [null, [39, 75], [39, 131]]], 0, 0], ["block", "each", [["get", "router.wData.bgp-peer", ["loc", [null, [49, 28], [49, 49]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [49, 20], [71, 29]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 12
                  },
                  "end": {
                    "line": 76,
                    "column": 12
                  }
                },
                "moduleName": "netconfig/templates/lanbgp.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "subtabledata");
                var el2 = dom.createTextNode("\n                   ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "bgprname");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" (");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(")\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var element6 = dom.childAt(element5, [1]);
                var morphs = new Array(6);
                morphs[0] = dom.createAttrMorph(element6, 'class');
                morphs[1] = dom.createElementMorph(element6);
                morphs[2] = dom.createMorphAt(element5, 3, 3);
                morphs[3] = dom.createMorphAt(element5, 5, 5);
                morphs[4] = dom.createMorphAt(element5, 7, 7);
                morphs[5] = dom.createMorphAt(element5, 9, 9);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "unless", [["get", "router.isShowPeer", ["loc", [null, [28, 106], [28, 123]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [28, 97], [28, 164]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showPeers", ["get", "router", ["loc", [null, [28, 78], [28, 84]]], 0, 0, 0, 0]], [], ["loc", [null, [28, 57], [28, 86]]], 0, 0], ["content", "router.name", ["loc", [null, [28, 180], [28, 195]]], 0, 0, 0, 0], ["content", "router.host", ["loc", [null, [28, 197], [28, 212]]], 0, 0, 0, 0], ["block", "if", [["get", "router.status", ["loc", [null, [29, 22], [29, 35]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [29, 16], [33, 23]]]], ["block", "unless", [["get", "router.isShowPeer", ["loc", [null, [35, 26], [35, 43]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [35, 16], [74, 27]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 77,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanbgp.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "unless", [["get", "item.isShowData", ["loc", [null, [26, 22], [26, 37]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [26, 12], [76, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 8
              },
              "end": {
                "line": 78,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanbgp.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "not-eq", [["get", "router.category", ["loc", [null, [25, 24], [25, 39]]], 0, 0, 0, 0], "CVX"], [], ["loc", [null, [25, 16], [25, 46]]], 0, 0]], [], 0, null, ["loc", [null, [25, 10], [77, 17]]]]],
          locals: ["router", "index"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanbgp.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode(" \n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "bgplview");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "bgprname");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" \n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element8, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element9, 'class');
          morphs[1] = dom.createElementMorph(element9);
          morphs[2] = dom.createMorphAt(element8, 2, 2);
          morphs[3] = dom.createMorphAt(element7, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["subexpr", "unless", [["get", "item.isShowData", ["loc", [null, [22, 80], [22, 95]]], 0, 0, 0, 0], "fa-minus-square-o", "fa-plus-square-o"], [], ["loc", [null, [22, 71], [22, 136]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showFData", ["get", "item", ["loc", [null, [22, 54], [22, 58]]], 0, 0, 0, 0]], [], ["loc", [null, [22, 33], [22, 60]]], 0, 0], ["content", "item.dc", ["loc", [null, [22, 151], [22, 162]]], 0, 0, 0, 0], ["block", "each", [["get", "item.routers", ["loc", [null, [24, 16], [24, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [24, 8], [78, 17]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 97,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanbgp.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("BGP");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "router-pod-title");
        var el4 = dom.createTextNode("Pod type:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "inlinefView");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" {{#if isShowAdv}}\n        <div class=\"advlst\">\n            <div class=\"advlstHdr\">\n                <h4>Advertised List</h4>\n                <span class=\"advCls\" {{action 'closeAdv'}}>×</span>\n            </div>\n            <ul>\n\n    {{#each advData.adv as |item|}}\n                    <li>{{item.network}}</li>\n                {{/each}}\n            </ul>\n        </div>\n    {{/if}} ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [0, 1]);
        var element12 = dom.childAt(element11, [1, 0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element12);
        morphs[1] = dom.createMorphAt(dom.childAt(element11, [7]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 35], [3, 57]]], 0, 0], ["block", "ember-chosen", [], ["name", "podtype", "action", "changeContents", "placeholder", "Select Pod type", "class", "router-pod"], 0, null, ["loc", [null, [7, 6], [11, 23]]]], ["block", "each", [["get", "content.router", ["loc", [null, [19, 12], [19, 26]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [19, 4], [80, 13]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/lanconf", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 104
            },
            "end": {
              "line": 4,
              "column": 122
            }
          },
          "moduleName": "netconfig/templates/lanconf.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("↓");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 122
            },
            "end": {
              "line": 4,
              "column": 136
            }
          },
          "moduleName": "netconfig/templates/lanconf.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("→");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 25
              },
              "end": {
                "line": 7,
                "column": 69
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Access List");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 25
              },
              "end": {
                "line": 8,
                "column": 68
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Interfaces");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 25
              },
              "end": {
                "line": 9,
                "column": 75
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Create/Edit Users");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 25
              },
              "end": {
                "line": 10,
                "column": 62
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Command");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 25
              },
              "end": {
                "line": 11,
                "column": 64
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Osupdate");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "lan-sub");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "item mlag");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "href", "#/lanconf/osupdate/mlag/");
            var el4 = dom.createTextNode("Leaf pair");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "item spine");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "href", "#/lanconf/osupdate/spine/");
            var el4 = dom.createTextNode("Spine/SuperSpine/CVX");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "item updatelist");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "href", "#/lanconf/osupdate/updatelist/");
            var el4 = dom.createTextNode("OS Upgrade History");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child6 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 25
              },
              "end": {
                "line": 20,
                "column": 57
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("CI/CD");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "lan-sub-top");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element1, [9]), 0, 0);
          morphs[5] = dom.createMorphAt(element1, 11, 11);
          morphs[6] = dom.createMorphAt(dom.childAt(element1, [13]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["lanconf/accesslist"], [], 0, null, ["loc", [null, [7, 25], [7, 81]]]], ["block", "link-to", ["lanconf.interfaces"], [], 1, null, ["loc", [null, [8, 25], [8, 80]]]], ["block", "link-to", ["lanconf.configuser"], [], 2, null, ["loc", [null, [9, 25], [9, 87]]]], ["block", "link-to", ["lanconf.command"], [], 3, null, ["loc", [null, [10, 25], [10, 74]]]], ["block", "link-to", ["lanconf.osupdate"], [], 4, null, ["loc", [null, [11, 25], [11, 76]]]], ["block", "if", [["get", "sub", ["loc", [null, [12, 14], [12, 17]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [12, 8], [19, 15]]]], ["block", "link-to", ["lanconf.cicd"], [], 6, null, ["loc", [null, [20, 25], [20, 69]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 104
            },
            "end": {
              "line": 23,
              "column": 122
            }
          },
          "moduleName": "netconfig/templates/lanconf.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("↓");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 122
            },
            "end": {
              "line": 23,
              "column": 136
            }
          },
          "moduleName": "netconfig/templates/lanconf.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("→");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 25
              },
              "end": {
                "line": 26,
                "column": 72
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Access List");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 25
              },
              "end": {
                "line": 27,
                "column": 71
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Interfaces");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 25
              },
              "end": {
                "line": 31,
                "column": 65
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Command");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 25
              },
              "end": {
                "line": 32,
                "column": 60
              }
            },
            "moduleName": "netconfig/templates/lanconf.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("CI/CD");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "lan-sub-top");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "item");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [6]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [8]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["lanconf/wanaccesslist"], [], 0, null, ["loc", [null, [26, 25], [26, 84]]]], ["block", "link-to", ["lanconf.waninterfaces"], [], 1, null, ["loc", [null, [27, 25], [27, 83]]]], ["block", "link-to", ["lanconf.wancommand"], [], 2, null, ["loc", [null, [31, 25], [31, 77]]]], ["block", "link-to", ["lanconf.wancicd"], [], 3, null, ["loc", [null, [32, 25], [32, 72]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("aside");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        dom.setAttribute(el2, "style", "justify-content: center;");
        var el3 = dom.createTextNode("LAN / WAN configuration");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "lan-conf-title");
        dom.setAttribute(el3, "style", "font-size: large;cursor:pointer");
        var el4 = dom.createTextNode("LAN Config  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "lan-conf-title");
        dom.setAttribute(el3, "style", "font-size: large;cursor:pointer");
        var el4 = dom.createTextNode("WAN Config  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "container settings");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [5]);
        var morphs = new Array(7);
        morphs[0] = dom.createElementMorph(element3);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createElementMorph(element4);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createMorphAt(element2, 7, 7);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["ltoggle"], [], ["loc", [null, [4, 31], [4, 51]]], 0, 0], ["block", "if", [["get", "ltog", ["loc", [null, [4, 110], [4, 114]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 104], [4, 143]]]], ["block", "if", [["get", "ltog", ["loc", [null, [5, 10], [5, 14]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [5, 4], [22, 11]]]], ["element", "action", ["wtoggle"], [], ["loc", [null, [23, 31], [23, 51]]], 0, 0], ["block", "if", [["get", "wtog", ["loc", [null, [23, 110], [23, 114]]], 0, 0, 0, 0]], [], 3, 4, ["loc", [null, [23, 104], [23, 143]]]], ["block", "if", [["get", "wtog", ["loc", [null, [24, 10], [24, 14]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [24, 4], [34, 11]]]], ["content", "outlet", ["loc", [null, [38, 2], [38, 12]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/lanconf/accesslist/extended", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            dom.setAttribute(el1, "style", "display:inline-block;");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "name", "hosts");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "href", "javascript:void(0);");
            var el2 = dom.createTextNode("View Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element15 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element15, [4]), [], true);
            }
            var element16 = dom.childAt(element15, [4]);
            var element17 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element15, 0, 0);
            morphs[1] = dom.createMorphAt(element15, 2, 2);
            morphs[2] = dom.createAttrMorph(element16, 'value');
            morphs[3] = dom.createElementMorph(element17);
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [30, 66], [30, 75]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [30, 77], [30, 86]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [30, 132], [30, 137]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfiguration", ["get", "r", ["loc", [null, [31, 100], [31, 101]]], 0, 0, 0, 0]], [], ["loc", [null, [31, 71], [31, 103]]], 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers with this AccessList ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "style", "color:red");
          var el4 = dom.createTextNode("(Please be careful with sequence number)");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithacl", ["loc", [null, [29, 16], [29, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 8], [32, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 8
              },
              "end": {
                "line": 40,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "name", "hosts");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element13 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element13, [4]), [], true);
            }
            var element14 = dom.childAt(element13, [4]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element13, 0, 0);
            morphs[1] = dom.createMorphAt(element13, 2, 2);
            morphs[2] = dom.createAttrMorph(element14, 'value');
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [39, 36], [39, 45]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [39, 47], [39, 56]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [39, 102], [39, 107]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers without this AccessList (New access list will be created)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithoutacl", ["loc", [null, [38, 16], [38, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [38, 8], [40, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 68,
                  "column": 18
                },
                "end": {
                  "line": 70,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element9, 'value');
              morphs[1] = dom.createMorphAt(element9, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [69, 39], [69, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [69, 82], [69, 90]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 67,
                "column": 14
              },
              "end": {
                "line": 71,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "action", ["loc", [null, [68, 26], [68, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [68, 18], [70, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 75,
                "column": 16
              },
              "end": {
                "line": 77,
                "column": 18
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "style", "text-transform: capitalize");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element8, 'value');
            morphs[1] = dom.createMorphAt(element8, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [76, 39], [76, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [76, 82], [76, 90]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 85,
                  "column": 18
                },
                "end": {
                  "line": 87,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element6 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element6, 'value');
              morphs[1] = dom.createMorphAt(element6, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item.value", ["loc", [null, [86, 39], [86, 49]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.label", ["loc", [null, [86, 88], [86, 102]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 12
              },
              "end": {
                "line": 91,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("select");
            dom.setAttribute(el2, "name", "srcoperator");
            dom.setAttribute(el2, "class", "seqprotocol");
            dom.setAttribute(el2, "style", "text-transform: capitalize; width:100px;");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "class", "acltext");
            dom.setAttribute(el2, "type", "text");
            dom.setAttribute(el2, "name", "srcport");
            dom.setAttribute(el2, "disabled", "");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element7);
            morphs[1] = dom.createMorphAt(element7, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["checksrcopr", ["get", "conf.id", ["loc", [null, [84, 135], [84, 142]]], 0, 0, 0, 0]], ["on", "change"], ["loc", [null, [84, 112], [84, 156]]], 0, 0], ["block", "each", [["get", "operators", ["loc", [null, [85, 26], [85, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [85, 18], [87, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 12
              },
              "end": {
                "line": 93,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 99,
                  "column": 18
                },
                "end": {
                  "line": 101,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element4, 'value');
              morphs[1] = dom.createMorphAt(element4, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item.value", ["loc", [null, [100, 39], [100, 49]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.label", ["loc", [null, [100, 88], [100, 102]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 96,
                "column": 12
              },
              "end": {
                "line": 105,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n                 ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("select");
            dom.setAttribute(el2, "name", "dstoperator");
            dom.setAttribute(el2, "class", "seqprotocol");
            dom.setAttribute(el2, "style", "text-transform: capitalize; width:100px;");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "class", "acltext");
            dom.setAttribute(el2, "type", "text");
            dom.setAttribute(el2, "name", "dstport");
            dom.setAttribute(el2, "disabled", "");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element5);
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["checkdstopr", ["get", "conf.id", ["loc", [null, [98, 136], [98, 143]]], 0, 0, 0, 0]], ["on", "change"], ["loc", [null, [98, 113], [98, 157]]], 0, 0], ["block", "each", [["get", "operators", ["loc", [null, [99, 26], [99, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [99, 18], [101, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 105,
                "column": 12
              },
              "end": {
                "line": 107,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child6 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 111,
                  "column": 18
                },
                "end": {
                  "line": 113,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element3, 'value');
              morphs[1] = dom.createMorphAt(element3, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [112, 39], [112, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [112, 47], [112, 55]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 14
              },
              "end": {
                "line": 114,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "log", ["loc", [null, [111, 26], [111, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [111, 18], [113, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "seqRow");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "class", "aclno");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "seqno");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("select");
          dom.setAttribute(el3, "name", "protocol");
          dom.setAttribute(el3, "class", "seqprotocol");
          dom.setAttribute(el3, "style", "text-transform: capitalize; width:80px;");
          dom.setAttribute(el3, "placeholder", "Select protocol..");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "text");
          dom.setAttribute(el3, "name", "srcaddr");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "srccidr");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "text");
          dom.setAttribute(el3, "name", "dstaddr");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "dstcidr");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-trash R");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1]);
          var element11 = dom.childAt(element10, [5, 1]);
          var element12 = dom.childAt(element10, [21, 0]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element10, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
          morphs[2] = dom.createElementMorph(element11);
          morphs[3] = dom.createMorphAt(element11, 1, 1);
          morphs[4] = dom.createMorphAt(element10, 11, 11);
          morphs[5] = dom.createMorphAt(element10, 17, 17);
          morphs[6] = dom.createMorphAt(dom.childAt(element10, [19]), 1, 1);
          morphs[7] = dom.createElementMorph(element12);
          return morphs;
        },
        statements: [["attribute", "ids", ["get", "conf.id", ["loc", [null, [64, 35], [64, 42]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "ember-chosen", [], ["name", "action", "placeholder", "Select Action", "style", "text-transform: capitalize"], 0, null, ["loc", [null, [67, 14], [71, 31]]]], ["element", "action", ["checkprotocol", ["get", "conf.id", ["loc", [null, [74, 163], [74, 170]]], 0, 0, 0, 0]], ["on", "change"], ["loc", [null, [74, 138], [74, 184]]], 0, 0], ["block", "each", [["get", "protocol", ["loc", [null, [75, 24], [75, 32]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [75, 16], [77, 27]]]], ["block", "if", [["get", "conf.hidepcl", ["loc", [null, [82, 18], [82, 30]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [82, 12], [93, 19]]]], ["block", "if", [["get", "conf.hidepcl", ["loc", [null, [96, 18], [96, 30]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [96, 12], [107, 19]]]], ["block", "ember-chosen", [], ["name", "log", "placeholder", "Select log"], 6, null, ["loc", [null, [109, 14], [114, 31]]]], ["element", "action", ["delSeqRow", ["get", "conf", ["loc", [null, [116, 62], [116, 66]]], 0, 0, 0, 0]], [], ["loc", [null, [116, 41], [116, 68]]], 0, 0]],
        locals: ["conf"],
        templates: [child0, child1, child2, child3, child4, child5, child6]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 98
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["isPrim", false, "type", "reset", "action", "cancel", "label", "Cancel"], ["loc", [null, [125, 26], [125, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popup-model active");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "popup-model-container");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-header");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h1");
          var el5 = dom.createTextNode("Configuration of ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "popup-model-close");
          var el5 = dom.createTextNode("×");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-content");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("pre");
          dom.setAttribute(el4, "style", "font-size:13px;");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
          return morphs;
        },
        statements: [["content", "configurationData.name", ["loc", [null, [133, 31], [133, 57]]], 0, 0, 0, 0], ["element", "action", ["closePopup"], [], ["loc", [null, [134, 39], [134, 62]]], 0, 0], ["content", "configurationData.output", ["loc", [null, [138, 16], [138, 44]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 145,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/accesslist/extended.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode(" Access List - Configuration ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "extacl");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("AccessList type ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "acltype");
        dom.setAttribute(el5, "value", "extendedACL");
        dom.setAttribute(el5, "style", "text-transform: capitalize;width: 50% !important");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("AccessList Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" \n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "aclname");
        dom.setAttribute(el5, "style", "width: 50% !important;");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Approver");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "approver_email");
        dom.setAttribute(el5, "style", "width: 50% !important;");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "config_comment");
        dom.setAttribute(el5, "style", "width: 50% !important;");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table extdAcl");
        dom.setAttribute(el3, "width", "100%");
        dom.setAttribute(el3, "cellpadding", "0");
        dom.setAttribute(el3, "cellspacing", "0");
        dom.setAttribute(el3, "border", "0");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Seq No");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Action");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Protocol");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Address");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Netmask");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Operator");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Port");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Address");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Netmask");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Operator");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Port");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Log");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "cursor: pointer");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-plus-circle R");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("ADD SEQUENCE");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element18 = dom.childAt(fragment, [2]);
        var element19 = dom.childAt(element18, [1]);
        var element20 = dom.childAt(element19, [8, 1]);
        var element21 = dom.childAt(element19, [10]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element19, 3, 3);
        morphs[1] = dom.createMorphAt(element19, 4, 4);
        morphs[2] = dom.createMorphAt(dom.childAt(element19, [6, 3]), 1, 1);
        morphs[3] = dom.createElementMorph(element20);
        morphs[4] = dom.createMorphAt(element21, 1, 1);
        morphs[5] = dom.createMorphAt(element21, 3, 3);
        morphs[6] = dom.createMorphAt(element18, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "hostwithacl", ["loc", [null, [26, 10], [26, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [26, 4], [34, 11]]]], ["block", "if", [["get", "hostwithoutacl", ["loc", [null, [35, 10], [35, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [35, 4], [42, 11]]]], ["block", "each", [["get", "config", ["loc", [null, [63, 16], [63, 22]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [63, 8], [118, 17]]]], ["element", "action", ["addSeqRow"], [], ["loc", [null, [122, 12], [122, 34]]], 0, 0], ["block", "unless", [["get", "isSaving", ["loc", [null, [125, 16], [125, 24]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [125, 6], [125, 109]]]], ["inline", "bs-primary", [], ["action", "aextacl", "label", "Apply", "loadingTxt", "Applying..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [126, 84], [126, 92]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [126, 6], [126, 94]]], 0, 0], ["block", "if", [["get", "isShowConfig", ["loc", [null, [129, 8], [129, 20]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [129, 2], [143, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/lanconf/accesslist/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 12
              },
              "end": {
                "line": 15,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "style", "text-transform: capitalize");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element12 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element12, 'value');
            morphs[1] = dom.createMorphAt(element12, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [14, 33], [14, 37]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [14, 76], [14, 84]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 8
            },
            "end": {
              "line": 16,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "types", ["loc", [null, [13, 20], [13, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [13, 12], [15, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 8
              },
              "end": {
                "line": 29,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element11 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element11, 'value');
            morphs[1] = dom.createMorphAt(element11, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "dc", ["loc", [null, [28, 27], [28, 29]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "dc", ["loc", [null, [28, 33], [28, 39]]], 0, 0, 0, 0]],
          locals: ["dc", "pods"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each-in", [["get", "content.routers", ["loc", [null, [27, 19], [27, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [27, 8], [29, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 8
              },
              "end": {
                "line": 38,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element10 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element10, 'value');
            morphs[1] = dom.createMorphAt(element10, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [37, 27], [37, 30]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [37, 34], [37, 41]]], 0, 0, 0, 0]],
          locals: ["pod"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "pods", ["loc", [null, [36, 16], [36, 20]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [36, 8], [38, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 8
                },
                "end": {
                  "line": 47,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element9, 'value');
              morphs[1] = dom.createMorphAt(element9, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [46, 27], [46, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [46, 35], [46, 43]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 6
              },
              "end": {
                "line": 48,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "content.approver", ["loc", [null, [45, 16], [45, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [45, 8], [47, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Approver");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "mandatory");
          var el4 = dom.createTextNode("*");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["name", "approver_email", "placeholder", "Select Approver Email"], 0, null, ["loc", [null, [44, 6], [48, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formAct");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["action", "getlogin", "label", "Next"], ["loc", [null, [59, 8], [59, 53]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 72,
                    "column": 16
                  },
                  "end": {
                    "line": 74,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "checklabel");
                var el3 = dom.createTextNode("  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" [");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("]");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("input");
                dom.setAttribute(el3, "type", "checkbox");
                dom.setAttribute(el3, "name", "router");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "checkmark");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1, 0]);
                var element6 = dom.childAt(element5, [5]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element5, 1, 1);
                morphs[1] = dom.createMorphAt(element5, 3, 3);
                morphs[2] = dom.createAttrMorph(element6, 'value');
                return morphs;
              },
              statements: [["content", "ip.name", ["loc", [null, [73, 60], [73, 71]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [73, 73], [73, 84]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [73, 131], [73, 138]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [73, 143], [73, 150]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
              locals: ["ip"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 67,
                  "column": 8
                },
                "end": {
                  "line": 78,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "routers-pod-name");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("        \n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "checklabel");
              var el4 = dom.createElement("input");
              dom.setAttribute(el4, "type", "checkbox");
              dom.setAttribute(el4, "name", "routername");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "checkmark");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("b");
              var el5 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "mandatory");
              var el6 = dom.createTextNode("*");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "router-pod-list");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("  \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1, 1]);
              var element8 = dom.childAt(element7, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element8, 'value');
              morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [70, 90], [70, 97]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [70, 102], [70, 109]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "podhosts", ["loc", [null, [72, 24], [72, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [72, 16], [74, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 85,
                      "column": 22
                    },
                    "end": {
                      "line": 87,
                      "column": 22
                    }
                  },
                  "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  var el2 = dom.createElement("label");
                  dom.setAttribute(el2, "class", "checklabel");
                  var el3 = dom.createTextNode("  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" [");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("]");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("input");
                  dom.setAttribute(el3, "type", "checkbox");
                  dom.setAttribute(el3, "name", "router");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "checkmark");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1, 0]);
                  var element1 = dom.childAt(element0, [5]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(element0, 1, 1);
                  morphs[1] = dom.createMorphAt(element0, 3, 3);
                  morphs[2] = dom.createAttrMorph(element1, 'value');
                  return morphs;
                },
                statements: [["content", "ip.name", ["loc", [null, [86, 66], [86, 77]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [86, 79], [86, 90]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [86, 137], [86, 144]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [86, 149], [86, 156]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
                locals: ["ip"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 80,
                    "column": 10
                  },
                  "end": {
                    "line": 91,
                    "column": 10
                  }
                },
                "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1, "class", "routers-pod-name");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("label");
                dom.setAttribute(el3, "class", "checklabel");
                var el4 = dom.createElement("input");
                dom.setAttribute(el4, "type", "checkbox");
                dom.setAttribute(el4, "name", "routername");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "checkmark");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("         \n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("ul");
                dom.setAttribute(el3, "class", "router-pod-list");
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                    ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var element3 = dom.childAt(element2, [1]);
                var element4 = dom.childAt(element3, [0]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element4, 'value');
                morphs[1] = dom.createMorphAt(element3, 3, 3);
                morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [83, 96], [83, 103]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [83, 108], [83, 115]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "key", ["loc", [null, [83, 151], [83, 158]]], 0, 0, 0, 0], ["block", "each", [["get", "value", ["loc", [null, [85, 30], [85, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [85, 22], [87, 31]]]]],
              locals: ["key", "value"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 78,
                  "column": 8
                },
                "end": {
                  "line": 92,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              dom.setAttribute(el1, "style", "font-weight: bold");
              var el2 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "mandatory");
              var el3 = dom.createTextNode("*");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each-in", [["get", "podhosts", ["loc", [null, [80, 21], [80, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [80, 10], [91, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 66,
                "column": 8
              },
              "end": {
                "line": 93,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isSspine", ["loc", [null, [67, 14], [67, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [67, 8], [92, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 94,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isRouterConnected", ["loc", [null, [66, 18], [66, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [66, 8], [93, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 123,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/accesslist/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("LAN Access List");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "alconf");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Type");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Name");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "aclname");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    \n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Data Center");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Pod Type");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "config_comment");
        dom.setAttribute(el5, "placeholder", "Enter configuration comment");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element13 = dom.childAt(fragment, [2]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element13, [5, 1]);
        var element17 = dom.childAt(element16, [1, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element15, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element15, [5]), 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element15, [7]), 3, 3);
        morphs[3] = dom.createMorphAt(element15, 9, 9);
        morphs[4] = dom.createMorphAt(element14, 3, 3);
        morphs[5] = dom.createMorphAt(dom.childAt(element13, [3, 1]), 1, 1);
        morphs[6] = dom.createElementMorph(element17);
        morphs[7] = dom.createMorphAt(dom.childAt(element16, [3, 7]), 1, 1);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["style", "text-transform: capitalize", "name", "acltype", "placeholder", "Select Access list type", "class", "required"], 0, null, ["loc", [null, [11, 8], [16, 25]]]], ["block", "ember-chosen", [], ["action", "setdc", "name", "dc", "placeholder", "Select Data Center"], 1, null, ["loc", [null, [25, 6], [30, 23]]]], ["block", "ember-chosen", [], ["action", "fetchhosts", "name", "podtype", "placeholder", "Select Pod Type"], 2, null, ["loc", [null, [34, 6], [39, 23]]]], ["block", "unless", [["get", "content.isAdminAccount", ["loc", [null, [41, 14], [41, 36]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [41, 4], [50, 15]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [57, 10], [57, 27]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [57, 4], [61, 11]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [65, 12], [65, 29]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [65, 6], [94, 13]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [100, 28], [100, 52]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [117, 88], [117, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [117, 10], [117, 99]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/lanconf/accesslist/standard", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            dom.setAttribute(el1, "style", "display:inline-block;");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "href", "javascript:void(0);");
            var el2 = dom.createTextNode("View Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element9, [4]), [], true);
            }
            var element10 = dom.childAt(element9, [4]);
            var element11 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element9, 0, 0);
            morphs[1] = dom.createMorphAt(element9, 2, 2);
            morphs[2] = dom.createAttrMorph(element10, 'value');
            morphs[3] = dom.createElementMorph(element11);
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [30, 66], [30, 75]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [30, 77], [30, 86]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [30, 119], [30, 124]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfiguration", ["get", "r", ["loc", [null, [31, 100], [31, 101]]], 0, 0, 0, 0]], [], ["loc", [null, [31, 71], [31, 103]]], 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers with this Access List ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "style", "color:red");
          var el4 = dom.createTextNode("(Please be careful with sequence number)");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithacl", ["loc", [null, [29, 16], [29, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 8], [32, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 8
              },
              "end": {
                "line": 40,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element7, [4]), [], true);
            }
            var element8 = dom.childAt(element7, [4]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element7, 0, 0);
            morphs[1] = dom.createMorphAt(element7, 2, 2);
            morphs[2] = dom.createAttrMorph(element8, 'value');
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [39, 37], [39, 46]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [39, 48], [39, 57]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [39, 90], [39, 95]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers without this AccessList (New access list will be created)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithoutacl", ["loc", [null, [38, 16], [38, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [38, 8], [40, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 61,
                  "column": 16
                },
                "end": {
                  "line": 63,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element4, 'value');
              morphs[1] = dom.createMorphAt(element4, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [62, 35], [62, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [62, 78], [62, 86]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 14
              },
              "end": {
                "line": 64,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "action", ["loc", [null, [61, 24], [61, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [61, 16], [63, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 16
                },
                "end": {
                  "line": 73,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element3, 'value');
              morphs[1] = dom.createMorphAt(element3, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [72, 35], [72, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [72, 43], [72, 51]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 69,
                "column": 14
              },
              "end": {
                "line": 74,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "log", ["loc", [null, [71, 24], [71, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [71, 16], [73, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "seqRow");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "seqno");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "text");
          dom.setAttribute(el3, "name", "addr");
          dom.setAttribute(el3, "class", "required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "cidr");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.setAttribute(el3, "class", "required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-trash R");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var element6 = dom.childAt(element5, [11, 0]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element5, [9]), 1, 1);
          morphs[2] = dom.createElementMorph(element6);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["name", "action", "style", "text-transform: capitalize", "placeholder", "Select Action", "class", "required"], 0, null, ["loc", [null, [60, 14], [64, 31]]]], ["block", "ember-chosen", [], ["name", "log", "placeholder", "Select log"], 1, null, ["loc", [null, [69, 14], [74, 31]]]], ["element", "action", ["delSeqRow", ["get", "conf", ["loc", [null, [76, 62], [76, 66]]], 0, 0, 0, 0]], [], ["loc", [null, [76, 41], [76, 68]]], 0, 0]],
        locals: ["conf"],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 98
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["isPrim", false, "type", "reset", "action", "cancel", "label", "Cancel"], ["loc", [null, [85, 26], [85, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 103,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popup-model active");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "popup-model-container");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-header");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h1");
          var el5 = dom.createTextNode("Configuration of ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "popup-model-close");
          var el5 = dom.createTextNode("×");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-content");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("pre");
          dom.setAttribute(el4, "style", "font-size:13px;");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
          return morphs;
        },
        statements: [["content", "configurationData.name", ["loc", [null, [93, 31], [93, 57]]], 0, 0, 0, 0], ["element", "action", ["closePopup"], [], ["loc", [null, [94, 39], [94, 62]]], 0, 0], ["content", "configurationData.output", ["loc", [null, [98, 16], [98, 44]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 104,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/lanconf/accesslist/standard.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode(" Access List - Configuration ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "stdconf");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Type ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "acltype");
        dom.setAttribute(el5, "value", "standardACL");
        dom.setAttribute(el5, "style", "text-transform: capitalize");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "aclname");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Approver");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "approver_email");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "config_comment");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table");
        dom.setAttribute(el3, "width", "220% !important");
        dom.setAttribute(el3, "cellpadding", "0");
        dom.setAttribute(el3, "cellspacing", "0");
        dom.setAttribute(el3, "border", "0");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Seq NO");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Action");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("IP Address");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Netmask");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Log");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        dom.setAttribute(el4, "style", "width: 100% !important;");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "cursor: pointer");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-plus-circle R");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("ADD SEQUENCE");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element12 = dom.childAt(fragment, [2]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element13, [8, 1]);
        var element15 = dom.childAt(element13, [10]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element13, 3, 3);
        morphs[1] = dom.createMorphAt(element13, 4, 4);
        morphs[2] = dom.createMorphAt(dom.childAt(element13, [6, 3]), 1, 1);
        morphs[3] = dom.createElementMorph(element14);
        morphs[4] = dom.createMorphAt(element15, 1, 1);
        morphs[5] = dom.createMorphAt(element15, 3, 3);
        morphs[6] = dom.createMorphAt(element12, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "hostwithacl", ["loc", [null, [26, 10], [26, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [26, 4], [34, 11]]]], ["block", "if", [["get", "hostwithoutacl", ["loc", [null, [35, 10], [35, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [35, 4], [42, 11]]]], ["block", "each", [["get", "config", ["loc", [null, [56, 16], [56, 22]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [56, 8], [78, 17]]]], ["element", "action", ["addSeqRow"], [], ["loc", [null, [82, 12], [82, 34]]], 0, 0], ["block", "unless", [["get", "isSaving", ["loc", [null, [85, 16], [85, 24]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [85, 6], [85, 109]]]], ["inline", "bs-primary", [], ["action", "astdacl", "label", "Apply", "loadingTxt", "Applying..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [86, 84], [86, 92]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [86, 6], [86, 94]]], 0, 0], ["block", "if", [["get", "isShowConfig", ["loc", [null, [89, 8], [89, 20]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [89, 2], [103, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/lanconf/cicd/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 8
              },
              "end": {
                "line": 14,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element17 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element17, 'value');
            morphs[1] = dom.createMorphAt(element17, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "dc", ["loc", [null, [13, 27], [13, 29]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "dc", ["loc", [null, [13, 33], [13, 39]]], 0, 0, 0, 0]],
          locals: ["dc", "pods"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 15,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each-in", [["get", "content.routers", ["loc", [null, [12, 19], [12, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 8], [14, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element16 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element16, 'value');
            morphs[1] = dom.createMorphAt(element16, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [22, 27], [22, 30]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [22, 34], [22, 41]]], 0, 0, 0, 0]],
          locals: ["pod"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "pods", ["loc", [null, [21, 16], [21, 20]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [21, 8], [23, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element15 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element15, 'value');
            morphs[1] = dom.createMorphAt(element15, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [33, 27], [33, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [33, 35], [33, 43]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.approver", ["loc", [null, [32, 16], [32, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [32, 8], [34, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 12
            },
            "end": {
              "line": 55,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "style", "line-height: 14px;font-size:15px;overflow:hidden");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element14 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element14, 'value');
          morphs[1] = dom.createMorphAt(element14, 0, 0);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["get", "features", ["loc", [null, [54, 88], [54, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "features", ["loc", [null, [54, 100], [54, 112]]], 0, 0, 0, 0]],
        locals: ["features"],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 103,
                "column": 12
              },
              "end": {
                "line": 105,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element13 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element13, 'value');
            morphs[1] = dom.createMorphAt(element13, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "custom_template", ["loc", [null, [104, 31], [104, 46]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "custom_template", ["loc", [null, [104, 50], [104, 69]]], 0, 0, 0, 0]],
          locals: ["custom_template"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 101,
              "column": 10
            },
            "end": {
              "line": 106,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "None");
          var el2 = dom.createTextNode("None");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.custom_template", ["loc", [null, [103, 20], [103, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [103, 12], [105, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 139,
                    "column": 16
                  },
                  "end": {
                    "line": 141,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "style", "display: flex;flex-direction:row;");
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "checklabel");
                dom.setAttribute(el2, "style", "padding-right: 19px;");
                var el3 = dom.createTextNode("  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("input");
                dom.setAttribute(el3, "type", "checkbox");
                dom.setAttribute(el3, "name", "router");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "checkmark");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("a");
                dom.setAttribute(el2, "style", "cursor: pointer;");
                var el3 = dom.createTextNode("[");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("]");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [0]);
                var element9 = dom.childAt(element8, [3]);
                var element10 = dom.childAt(element7, [2]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(element8, 1, 1);
                morphs[1] = dom.createAttrMorph(element9, 'value');
                morphs[2] = dom.createElementMorph(element10);
                morphs[3] = dom.createMorphAt(element10, 1, 1);
                return morphs;
              },
              statements: [["content", "ip.name", ["loc", [null, [140, 131], [140, 142]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [140, 189], [140, 196]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [140, 201], [140, 208]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfig", ["get", "ip.name", ["loc", [null, [140, 279], [140, 286]]], 0, 0, 0, 0], ["get", "ip.host", ["loc", [null, [140, 287], [140, 294]]], 0, 0, 0, 0]], [], ["loc", [null, [140, 256], [140, 297]]], 0, 0], ["content", "ip.host", ["loc", [null, [140, 324], [140, 335]]], 0, 0, 0, 0]],
              locals: ["ip"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 134,
                  "column": 8
                },
                "end": {
                  "line": 145,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "routers-pod-name");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("        \n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "checklabel");
              var el4 = dom.createElement("input");
              dom.setAttribute(el4, "type", "checkbox");
              dom.setAttribute(el4, "name", "routername");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "checkmark");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("b");
              var el5 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "mandatory");
              var el6 = dom.createTextNode("*");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "router-pod-list");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("  \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element11 = dom.childAt(fragment, [1, 1]);
              var element12 = dom.childAt(element11, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element12, 'value');
              morphs[1] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [137, 90], [137, 97]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [137, 102], [137, 109]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "podhosts", ["loc", [null, [139, 24], [139, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [139, 16], [141, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 152,
                      "column": 22
                    },
                    "end": {
                      "line": 154,
                      "column": 22
                    }
                  },
                  "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "style", "display: flex;flex-direction:row;");
                  var el2 = dom.createElement("label");
                  dom.setAttribute(el2, "class", "checklabel");
                  dom.setAttribute(el2, "style", "padding-right: 19px;");
                  var el3 = dom.createTextNode("  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("input");
                  dom.setAttribute(el3, "type", "checkbox");
                  dom.setAttribute(el3, "name", "router");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "checkmark");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("a");
                  dom.setAttribute(el2, "style", "cursor: pointer;");
                  var el3 = dom.createTextNode("[");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("]");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [0]);
                  var element2 = dom.childAt(element1, [2]);
                  var element3 = dom.childAt(element0, [2]);
                  var morphs = new Array(5);
                  morphs[0] = dom.createMorphAt(element1, 1, 1);
                  morphs[1] = dom.createAttrMorph(element2, 'data-router');
                  morphs[2] = dom.createAttrMorph(element2, 'value');
                  morphs[3] = dom.createElementMorph(element3);
                  morphs[4] = dom.createMorphAt(element3, 1, 1);
                  return morphs;
                },
                statements: [["content", "ip.name", ["loc", [null, [153, 138], [153, 149]]], 0, 0, 0, 0], ["attribute", "data-router", ["concat", [["get", "key", ["loc", [null, [153, 187], [153, 190]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [153, 217], [153, 224]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [153, 229], [153, 236]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfig", ["get", "ip.name", ["loc", [null, [153, 306], [153, 313]]], 0, 0, 0, 0], ["get", "ip.host", ["loc", [null, [153, 314], [153, 321]]], 0, 0, 0, 0]], [], ["loc", [null, [153, 283], [153, 324]]], 0, 0], ["content", "ip.host", ["loc", [null, [153, 352], [153, 363]]], 0, 0, 0, 0]],
                locals: ["ip"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 147,
                    "column": 10
                  },
                  "end": {
                    "line": 158,
                    "column": 10
                  }
                },
                "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1, "class", "routers-pod-name");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("label");
                dom.setAttribute(el3, "class", "checklabel");
                var el4 = dom.createElement("input");
                dom.setAttribute(el4, "type", "checkbox");
                dom.setAttribute(el4, "name", "routername");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "checkmark");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("         \n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("ul");
                dom.setAttribute(el3, "class", "router-pod-list");
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                    ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1, 1]);
                var element5 = dom.childAt(element4, [1]);
                var element6 = dom.childAt(element5, [0]);
                var morphs = new Array(4);
                morphs[0] = dom.createAttrMorph(element6, 'data-router');
                morphs[1] = dom.createAttrMorph(element6, 'value');
                morphs[2] = dom.createMorphAt(element5, 3, 3);
                morphs[3] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
                return morphs;
              },
              statements: [["attribute", "data-router", ["concat", [["get", "key", ["loc", [null, [150, 84], [150, 87]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [150, 118], [150, 125]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [150, 130], [150, 137]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "key", ["loc", [null, [150, 173], [150, 180]]], 0, 0, 0, 0], ["block", "each", [["get", "value", ["loc", [null, [152, 30], [152, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [152, 22], [154, 31]]]]],
              locals: ["key", "value"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 145,
                  "column": 8
                },
                "end": {
                  "line": 159,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              dom.setAttribute(el1, "style", "font-weight: bold");
              var el2 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "mandatory");
              var el3 = dom.createTextNode("*");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each-in", [["get", "podhosts", ["loc", [null, [147, 21], [147, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [147, 10], [158, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 133,
                "column": 8
              },
              "end": {
                "line": 160,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isSspine", ["loc", [null, [134, 14], [134, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [134, 8], [159, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isRouterConnected", ["loc", [null, [133, 18], [133, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [133, 8], [160, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 211,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/lanconf/cicd/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("LAN CI/CD");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content-container");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "key-box");
        var el5 = dom.createTextNode("Data Center");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "key-box");
        var el5 = dom.createTextNode("Pod Type");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        dom.setAttribute(el4, "class", "key-box");
        dom.setAttribute(el4, "for", "choose");
        var el5 = dom.createTextNode("Pipeline Approver");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    \n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "key-box");
        var el5 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "text");
        dom.setAttribute(el4, "name", "config_comment");
        dom.setAttribute(el4, "placeholder", "Enter configuration comment");
        dom.setAttribute(el4, "class", "value-box required");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        dom.setAttribute(el3, "name", "conf_type");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        dom.setAttribute(el4, "class", "key-box");
        dom.setAttribute(el4, "for", "choose");
        var el5 = dom.createTextNode("Configuration Type");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "typeDiv");
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("select");
        dom.setAttribute(el5, "action", "onTypeChange");
        dom.setAttribute(el5, "style", "text-transform: capitalize");
        dom.setAttribute(el5, "name", "type");
        dom.setAttribute(el5, "aria-placeholder", "Type");
        dom.setAttribute(el5, "class", "newSele");
        var el6 = dom.createTextNode("\n             ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("option");
        dom.setAttribute(el6, "value", "");
        dom.setAttribute(el6, "disabled", "");
        dom.setAttribute(el6, "selected", "");
        dom.setAttribute(el6, "hidden", "");
        var el7 = dom.createTextNode("Type");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("    ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "downArrow");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "checklabel");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "lan-action");
        var el6 = dom.createTextNode("Custom Config");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "checkmark");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "customYaml");
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "style", "display: flex;flex-direction:row;");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "textAreaTitle");
        var el7 = dom.createTextNode("YAML DATA");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "docTitle");
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "style", "color: black;");
        dom.setAttribute(el7, "href", "https://ab1-netops-git.zohonoc.com/netops/project_cicd/-/tree/main/build/examples");
        dom.setAttribute(el7, "target", "_blank");
        var el8 = dom.createTextNode(" Examples ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n        ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        \n         ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "id", "container");
        dom.setAttribute(el5, "class", "txtEditor");
        dom.setAttribute(el5, "name", "yamldata");
        dom.setAttribute(el5, "style", "height:550px;font-size:16px");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        \n         ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "customYaml");
        var el5 = dom.createTextNode("\n\n        \n\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "style", "display: flex;flex-direction:row;");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "textAreaTitle");
        dom.setAttribute(el6, "style", "margin-right: 10px;");
        var el7 = dom.createTextNode("JINJA TEMPLATE");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          \n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n         ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "id", "container2");
        dom.setAttribute(el5, "class", "txtEditor");
        dom.setAttribute(el5, "name", "jinjadata");
        dom.setAttribute(el5, "style", "height:550px;font-size:16px");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                  \n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        dom.setAttribute(el5, "name", "new_template_name_div");
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "key-box");
        var el7 = dom.createTextNode("Create (Enter template name)");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "template_name");
        dom.setAttribute(el6, "placeholder", "Enter template name");
        dom.setAttribute(el6, "class", "value-box required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n         ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "form-container");
        var el4 = dom.createTextNode("    \n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" \n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n	  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cicd_config");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n		");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5, "class", "conf_title_display");
        var el6 = dom.createTextNode("Configuration of ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "conf-refresh");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-refresh");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n		  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "close cicd");
        var el6 = dom.createTextNode("×");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        dom.setAttribute(el4, "style", "padding : 5px !important");
        var el5 = dom.createTextNode("\n			    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n	");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n\n\n\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindivcicd");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element18 = dom.childAt(fragment, [2]);
        var element19 = dom.childAt(element18, [1]);
        var element20 = dom.childAt(element19, [11, 3, 1]);
        var element21 = dom.childAt(element19, [15]);
        var element22 = dom.childAt(element18, [3]);
        var element23 = dom.childAt(element22, [3]);
        var element24 = dom.childAt(element23, [1]);
        var element25 = dom.childAt(element24, [3, 1]);
        var element26 = dom.childAt(element24, [5]);
        var element27 = dom.childAt(element18, [5, 1]);
        var element28 = dom.childAt(element27, [1, 1]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(dom.childAt(element19, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element19, [3]), 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element19, [6]), 3, 3);
        morphs[3] = dom.createElementMorph(element20);
        morphs[4] = dom.createMorphAt(element20, 3, 3);
        morphs[5] = dom.createMorphAt(dom.childAt(element19, [13, 1]), 1, 1);
        morphs[6] = dom.createAttrMorph(element21, 'class');
        morphs[7] = dom.createMorphAt(dom.childAt(element21, [3, 1]), 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element19, [19]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element22, [1]), 1, 1);
        morphs[10] = dom.createMorphAt(dom.childAt(element24, [1]), 1, 1);
        morphs[11] = dom.createElementMorph(element25);
        morphs[12] = dom.createElementMorph(element26);
        morphs[13] = dom.createMorphAt(dom.childAt(element23, [3]), 1, 1);
        morphs[14] = dom.createElementMorph(element28);
        morphs[15] = dom.createMorphAt(dom.childAt(element27, [3, 7]), 1, 1);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["action", "setdc", "class", "value-box", "name", "dc", "placeholder", "Select Data Center"], 0, null, ["loc", [null, [10, 6], [15, 23]]]], ["block", "ember-chosen", [], ["action", "fetchhosts", "name", "podtype", "placeholder", "Select Pod Type", "class", "value-box"], 1, null, ["loc", [null, [19, 6], [24, 23]]]], ["block", "ember-chosen", [], ["name", "approver_email", "class", "selected", "placeholder", "Select Approver Email"], 2, null, ["loc", [null, [30, 6], [35, 23]]]], ["element", "action", ["onTypeChange"], [], ["loc", [null, [51, 34], [51, 59]]], 0, 0], ["block", "each", [["get", "content.features", ["loc", [null, [53, 20], [53, 36]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [53, 12], [55, 19]]]], ["inline", "input", [], ["name", "cusTogg", "type", "checkbox", "change", ["subexpr", "action", ["customToggle"], [], ["loc", [null, [68, 58], [68, 81]]], 0, 0]], ["loc", [null, [68, 12], [68, 83]]], 0, 0], ["attribute", "class", ["concat", ["customDiv ", ["subexpr", "if", [["get", "showCustomDiv", ["loc", [null, [75, 31], [75, 44]]], 0, 0, 0, 0], "", "dnonelan"], [], ["loc", [null, [75, 26], [75, 60]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "ember-chosen", [], ["action", "onTemplateChange", "name", "template_name_list", "placeholder", "None", "class", "selected"], 4, null, ["loc", [null, [101, 10], [106, 25]]]], ["inline", "bs-primary", [], ["label", "submit", "id", "submit_btn_cicd", "class", "btn", "action", "convertToJson"], ["loc", [null, [124, 8], [124, 93]]], 0, 0], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [132, 12], [132, 29]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [132, 6], [161, 13]]]], ["content", "sDevice.host", ["loc", [null, [166, 50], [166, 66]]], 0, 0, 0, 0], ["element", "action", ["refresh", ["get", "sDevice.host", ["loc", [null, [168, 32], [168, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [168, 13], [168, 46]]], 0, 0], ["element", "action", ["closePopupCicd"], [], ["loc", [null, [170, 26], [170, 53]]], 0, 0], ["content", "confText", ["loc", [null, [173, 7], [173, 19]]], 0, 0, 0, 0], ["element", "action", ["close_popup"], [], ["loc", [null, [187, 28], [187, 52]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [204, 88], [204, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [204, 10], [204, 99]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/lanconf/command/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "dcname");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 10
                },
                "end": {
                  "line": 18,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanconf/command/index.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element13 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element13, 'value');
              morphs[1] = dom.createMorphAt(element13, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "dc", ["loc", [null, [17, 29], [17, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "dc", ["loc", [null, [17, 35], [17, 41]]], 0, 0, 0, 0]],
            locals: ["dc", "pods"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each-in", [["get", "content.routers", ["loc", [null, [16, 21], [16, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [16, 10], [18, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "setdc", "name", "dc", "placeholder", "Select Data Center"], 0, null, ["loc", [null, [14, 8], [19, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "pdtype");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanconf/command/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element12, 'value');
              morphs[1] = dom.createMorphAt(element12, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [30, 29], [30, 32]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [30, 36], [30, 43]]], 0, 0, 0, 0]],
            locals: ["pod"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "pods", ["loc", [null, [29, 18], [29, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 10], [31, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "fetchhosts", "name", "podtype", "placeholder", "Select Pod Type"], 0, null, ["loc", [null, [27, 8], [32, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 40,
                    "column": 8
                  },
                  "end": {
                    "line": 42,
                    "column": 8
                  }
                },
                "moduleName": "netconfig/templates/lanconf/command/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element11 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element11, 'value');
                morphs[1] = dom.createMorphAt(element11, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [41, 27], [41, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [41, 35], [41, 43]]], 0, 0, 0, 0]],
              locals: ["item"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 6
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "moduleName": "netconfig/templates/lanconf/command/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "content.approver", ["loc", [null, [40, 16], [40, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [40, 8], [42, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 4
              },
              "end": {
                "line": 45,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createTextNode("Approver");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "mandatory");
            var el4 = dom.createTextNode("*");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
            return morphs;
          },
          statements: [["block", "ember-chosen", [], ["name", "approver_email", "placeholder", "Select Approver Email"], 0, null, ["loc", [null, [39, 6], [43, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Configuration Comment");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "mandatory");
          var el4 = dom.createTextNode("*");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "config_comment");
          dom.setAttribute(el2, "placeholder", "Enter configuration comment");
          dom.setAttribute(el2, "class", "required");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "unless", [["get", "content.isAdminAccount", ["loc", [null, [36, 14], [36, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [36, 4], [45, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 57,
                    "column": 14
                  },
                  "end": {
                    "line": 59,
                    "column": 14
                  }
                },
                "moduleName": "netconfig/templates/lanconf/command/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "class", "checklabel");
                var el2 = dom.createTextNode("  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" [");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("]");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("input");
                dom.setAttribute(el2, "type", "checkbox");
                dom.setAttribute(el2, "checked", "");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "checkmark");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element9 = dom.childAt(fragment, [1]);
                if (this.cachedFragment) {
                  dom.repairClonedNode(dom.childAt(element9, [5]), [], true);
                }
                var element10 = dom.childAt(element9, [5]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element9, 1, 1);
                morphs[1] = dom.createMorphAt(element9, 3, 3);
                morphs[2] = dom.createAttrMorph(element10, 'value');
                return morphs;
              },
              statements: [["content", "ua.0", ["loc", [null, [58, 54], [58, 64]]], 0, 0, 0, 0], ["content", "ua.1", ["loc", [null, [58, 66], [58, 76]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ua.1", ["loc", [null, [58, 109], [58, 115]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
              locals: ["ua"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 12
                },
                "end": {
                  "line": 60,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/lanconf/command/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode("Switches");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "userAbsent", ["loc", [null, [57, 22], [57, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [57, 14], [59, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 8
              },
              "end": {
                "line": 62,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "userAbsent", ["loc", [null, [55, 18], [55, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [55, 12], [60, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 8
              },
              "end": {
                "line": 66,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formAct");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "bs-primary", [], ["action", "getlogin", "label", "Next"], ["loc", [null, [64, 12], [64, 57]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "name", "auser");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "isRouterConnected", ["loc", [null, [53, 14], [53, 31]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [53, 8], [66, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 98
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["isPrim", false, "type", "reset", "action", "cancel", "label", "Exit"], ["loc", [null, [74, 28], [74, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 8
              },
              "end": {
                "line": 79,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "bs-primary", [], ["action", "approve", "label", "Approve and Submit", "loadingTxt", "Approve..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [78, 100], [78, 108]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [78, 10], [78, 110]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 79,
                "column": 8
              },
              "end": {
                "line": 81,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "bs-primary", [], ["action", "approve", "label", "Submit for approval", "loadingTxt", "Approve..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [80, 101], [80, 109]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [80, 10], [80, 111]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 82,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "content.isAdminAccount", ["loc", [null, [77, 14], [77, 36]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [77, 8], [81, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 95,
                    "column": 16
                  },
                  "end": {
                    "line": 97,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/lanconf/command/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "checklabel");
                var el3 = dom.createTextNode("  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" [");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("]");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("input");
                dom.setAttribute(el3, "type", "checkbox");
                dom.setAttribute(el3, "name", "router");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "checkmark");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1, 0]);
                var element6 = dom.childAt(element5, [5]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element5, 1, 1);
                morphs[1] = dom.createMorphAt(element5, 3, 3);
                morphs[2] = dom.createAttrMorph(element6, 'value');
                return morphs;
              },
              statements: [["content", "ip.name", ["loc", [null, [96, 60], [96, 71]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [96, 73], [96, 84]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [96, 131], [96, 138]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [96, 143], [96, 150]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
              locals: ["ip"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 90,
                  "column": 8
                },
                "end": {
                  "line": 101,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/command/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "routers-pod-name");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("        \n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "checklabel");
              var el4 = dom.createElement("input");
              dom.setAttribute(el4, "type", "checkbox");
              dom.setAttribute(el4, "name", "routername");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "checkmark");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("b");
              var el5 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "mandatory");
              var el6 = dom.createTextNode("*");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "router-pod-list");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1, 1]);
              var element8 = dom.childAt(element7, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element8, 'value');
              morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [93, 90], [93, 97]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [93, 102], [93, 109]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "podhosts", ["loc", [null, [95, 24], [95, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [95, 16], [97, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 108,
                      "column": 20
                    },
                    "end": {
                      "line": 110,
                      "column": 20
                    }
                  },
                  "moduleName": "netconfig/templates/lanconf/command/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  var el2 = dom.createElement("label");
                  dom.setAttribute(el2, "class", "checklabel");
                  var el3 = dom.createTextNode("  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" [");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("]");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("input");
                  dom.setAttribute(el3, "type", "checkbox");
                  dom.setAttribute(el3, "name", "router");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "checkmark");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1, 0]);
                  var element1 = dom.childAt(element0, [5]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(element0, 1, 1);
                  morphs[1] = dom.createMorphAt(element0, 3, 3);
                  morphs[2] = dom.createAttrMorph(element1, 'value');
                  return morphs;
                },
                statements: [["content", "ip.name", ["loc", [null, [109, 64], [109, 75]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [109, 77], [109, 88]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [109, 135], [109, 142]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [109, 147], [109, 154]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
                locals: ["ip"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 103,
                    "column": 10
                  },
                  "end": {
                    "line": 114,
                    "column": 10
                  }
                },
                "moduleName": "netconfig/templates/lanconf/command/index.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1, "class", "routers-pod-name");
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createTextNode("\n                  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("label");
                dom.setAttribute(el3, "class", "checklabel");
                var el4 = dom.createElement("input");
                dom.setAttribute(el4, "type", "checkbox");
                dom.setAttribute(el4, "name", "routername");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "checkmark");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("         \n                  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("ul");
                dom.setAttribute(el3, "class", "router-pod-list");
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                  ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var element3 = dom.childAt(element2, [1]);
                var element4 = dom.childAt(element3, [0]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element4, 'value');
                morphs[1] = dom.createMorphAt(element3, 3, 3);
                morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [106, 94], [106, 101]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [106, 106], [106, 113]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "key", ["loc", [null, [106, 149], [106, 156]]], 0, 0, 0, 0], ["block", "each", [["get", "value", ["loc", [null, [108, 28], [108, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [108, 20], [110, 29]]]]],
              locals: ["key", "value"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 101,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/command/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              dom.setAttribute(el1, "style", "font-weight: bold");
              var el2 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "mandatory");
              var el3 = dom.createTextNode("*");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each-in", [["get", "podhosts", ["loc", [null, [103, 21], [103, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [103, 10], [114, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 8
              },
              "end": {
                "line": 116,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isSspine", ["loc", [null, [90, 14], [90, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [90, 8], [115, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 117,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isRouterConnected", ["loc", [null, [89, 18], [89, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [89, 8], [116, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child9 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 123,
                "column": 6
              },
              "end": {
                "line": 125,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-spinner fa-spin");
            dom.setAttribute(el1, "style", "font-size:24px");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 126,
                  "column": 8
                },
                "end": {
                  "line": 130,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/command/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "text");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("pre");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
              return morphs;
            },
            statements: [["content", "cmdResult", ["loc", [null, [128, 17], [128, 30]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 125,
                "column": 6
              },
              "end": {
                "line": 131,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/lanconf/command/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "cmdResult", ["loc", [null, [126, 14], [126, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [126, 8], [130, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/command/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1, "class", "title");
          var el2 = dom.createTextNode("Output");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isSaving", ["loc", [null, [123, 12], [123, 20]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [123, 6], [131, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 160,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/command/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("LAN Command");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Data Center");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Pod Type");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cmd_form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Command");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "id", "editor");
        dom.setAttribute(el4, "style", "height: 500px; width: 100%");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cmdResult");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element14 = dom.childAt(fragment, [2]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element15, [8, 5]);
        var element17 = dom.childAt(element14, [7, 1]);
        var element18 = dom.childAt(element17, [1, 1]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(element15, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element15, [3]), 3, 3);
        morphs[2] = dom.createMorphAt(element15, 5, 5);
        morphs[3] = dom.createMorphAt(element15, 6, 6);
        morphs[4] = dom.createMorphAt(element16, 1, 1);
        morphs[5] = dom.createMorphAt(element16, 3, 3);
        morphs[6] = dom.createMorphAt(element16, 5, 5);
        morphs[7] = dom.createMorphAt(dom.childAt(element14, [3, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element14, [5]), 1, 1);
        morphs[9] = dom.createElementMorph(element18);
        morphs[10] = dom.createMorphAt(dom.childAt(element17, [3, 7]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "isRouterConnected", ["loc", [null, [11, 12], [11, 29]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [11, 6], [20, 13]]]], ["block", "if", [["get", "isRouterConnected", ["loc", [null, [24, 12], [24, 29]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [24, 6], [33, 13]]]], ["block", "if", [["get", "isShowApprove", ["loc", [null, [35, 10], [35, 23]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [35, 4], [50, 11]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [51, 10], [51, 27]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [51, 4], [68, 11]]]], ["block", "unless", [["get", "isSaving", ["loc", [null, [74, 18], [74, 26]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [74, 8], [74, 109]]]], ["inline", "bs-primary", [], ["action", "submit", "label", "Execute", "loadingTxt", "Executing..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [75, 88], [75, 96]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [75, 8], [75, 98]]], 0, 0], ["block", "if", [["get", "isShowApprove", ["loc", [null, [76, 14], [76, 27]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [76, 8], [82, 15]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [88, 12], [88, 29]]], 0, 0, 0, 0]], [], 8, null, ["loc", [null, [88, 6], [117, 13]]]], ["block", "if", [["get", "cmdResultShow", ["loc", [null, [121, 10], [121, 23]]], 0, 0, 0, 0]], [], 9, null, ["loc", [null, [121, 4], [132, 11]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [137, 28], [137, 52]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [154, 88], [154, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [154, 10], [154, 99]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
    };
  })());
});
define("netconfig/templates/lanconf/configuser/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "dcname");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 10
                },
                "end": {
                  "line": 18,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element17 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element17, 'value');
              morphs[1] = dom.createMorphAt(element17, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "dc", ["loc", [null, [17, 29], [17, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "dc", ["loc", [null, [17, 35], [17, 41]]], 0, 0, 0, 0]],
            locals: ["dc", "pods"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each-in", [["get", "content.routers", ["loc", [null, [16, 21], [16, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [16, 10], [18, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "setdc", "name", "dc", "placeholder", "Select Data Center"], 0, null, ["loc", [null, [14, 8], [19, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "pdtype");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element16 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element16, 'value');
              morphs[1] = dom.createMorphAt(element16, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [30, 29], [30, 32]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [30, 36], [30, 43]]], 0, 0, 0, 0]],
            locals: ["pod"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "pods", ["loc", [null, [29, 18], [29, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 10], [31, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "fetchhosts", "name", "podtype", "placeholder", "Select Pod Type"], 0, null, ["loc", [null, [27, 8], [32, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 10
              },
              "end": {
                "line": 41,
                "column": 10
              }
            },
            "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "type", "text");
            dom.setAttribute(el1, "name", "name");
            dom.setAttribute(el1, "class", "required");
            dom.setAttribute(el1, "readonly", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 10
              },
              "end": {
                "line": 43,
                "column": 10
              }
            },
            "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "type", "text");
            dom.setAttribute(el1, "name", "name");
            dom.setAttribute(el1, "class", "required");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 49,
                    "column": 14
                  },
                  "end": {
                    "line": 51,
                    "column": 14
                  }
                },
                "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "class", "checklabel");
                var el2 = dom.createTextNode("  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" [");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("]");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("input");
                dom.setAttribute(el2, "type", "checkbox");
                dom.setAttribute(el2, "checked", "");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "checkmark");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element11 = dom.childAt(fragment, [1]);
                if (this.cachedFragment) {
                  dom.repairClonedNode(dom.childAt(element11, [5]), [], true);
                }
                var element12 = dom.childAt(element11, [5]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element11, 1, 1);
                morphs[1] = dom.createMorphAt(element11, 3, 3);
                morphs[2] = dom.createAttrMorph(element12, 'value');
                return morphs;
              },
              statements: [["content", "ua.0", ["loc", [null, [50, 54], [50, 64]]], 0, 0, 0, 0], ["content", "ua.1", ["loc", [null, [50, 66], [50, 76]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ua.1", ["loc", [null, [50, 109], [50, 115]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
              locals: ["ua"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 12
                },
                "end": {
                  "line": 52,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode("New user to be created in:");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "userAbsent", ["loc", [null, [49, 22], [49, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [49, 14], [51, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 14
                  },
                  "end": {
                    "line": 57,
                    "column": 14
                  }
                },
                "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "class", "checklabel");
                var el2 = dom.createTextNode("  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" [");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("]");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("input");
                dom.setAttribute(el2, "type", "checkbox");
                dom.setAttribute(el2, "checked", "");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "checkmark");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element9 = dom.childAt(fragment, [1]);
                if (this.cachedFragment) {
                  dom.repairClonedNode(dom.childAt(element9, [5]), [], true);
                }
                var element10 = dom.childAt(element9, [5]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element9, 1, 1);
                morphs[1] = dom.createMorphAt(element9, 3, 3);
                morphs[2] = dom.createAttrMorph(element10, 'value');
                return morphs;
              },
              statements: [["content", "up.0", ["loc", [null, [56, 54], [56, 64]]], 0, 0, 0, 0], ["content", "up.1", ["loc", [null, [56, 66], [56, 76]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "up.1", ["loc", [null, [56, 109], [56, 115]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
              locals: ["up"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 12
                },
                "end": {
                  "line": 58,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode("Existing user to be edited in routers:");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "userPresent", ["loc", [null, [55, 22], [55, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [55, 14], [57, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 65,
                  "column": 12
                },
                "end": {
                  "line": 65,
                  "column": 104
                }
              },
              "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "bs-primary", [], ["isPrim", false, "type", "reset", "action", "cancel", "label", "Cancel"], ["loc", [null, [65, 32], [65, 104]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 8
              },
              "end": {
                "line": 68,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createTextNode("Password");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "mandatory");
            var el4 = dom.createTextNode("*");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "password");
            dom.setAttribute(el2, "name", "pswd");
            dom.setAttribute(el2, "class", "required");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formAct");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element13 = dom.childAt(fragment, [1]);
            var element14 = dom.childAt(fragment, [5]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element13, 1, 1);
            morphs[1] = dom.createMorphAt(element13, 2, 2);
            morphs[2] = dom.createMorphAt(element14, 1, 1);
            morphs[3] = dom.createMorphAt(element14, 3, 3);
            return morphs;
          },
          statements: [["block", "if", [["get", "userAbsent", ["loc", [null, [47, 18], [47, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [47, 12], [52, 19]]]], ["block", "if", [["get", "userPresent", ["loc", [null, [53, 18], [53, 29]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [53, 12], [58, 19]]]], ["block", "unless", [["get", "isSaving", ["loc", [null, [65, 22], [65, 30]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [65, 12], [65, 115]]]], ["inline", "bs-primary", [], ["action", "submit", "label", "Apply", "loadingTxt", "Applying..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [66, 89], [66, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [66, 12], [66, 99]]], 0, 0]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 68,
                "column": 8
              },
              "end": {
                "line": 72,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formAct");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "bs-primary", [], ["action", "getlogin", "label", "Next"], ["loc", [null, [70, 12], [70, 57]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "name", "auser");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "formRow");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          var el4 = dom.createTextNode("User Name");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "mandatory");
          var el5 = dom.createTextNode("*");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element15 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element15, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(element15, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "isRouterConnected", ["loc", [null, [39, 16], [39, 33]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [39, 10], [43, 17]]]], ["block", "if", [["get", "isRouterConnected", ["loc", [null, [45, 14], [45, 31]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [45, 8], [72, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 86,
                    "column": 16
                  },
                  "end": {
                    "line": 88,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "checklabel");
                var el3 = dom.createTextNode("  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" [");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("]");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("input");
                dom.setAttribute(el3, "type", "checkbox");
                dom.setAttribute(el3, "name", "router");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "checkmark");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1, 0]);
                var element6 = dom.childAt(element5, [5]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element5, 1, 1);
                morphs[1] = dom.createMorphAt(element5, 3, 3);
                morphs[2] = dom.createAttrMorph(element6, 'value');
                return morphs;
              },
              statements: [["content", "ip.name", ["loc", [null, [87, 60], [87, 71]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [87, 73], [87, 84]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [87, 131], [87, 138]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [87, 143], [87, 150]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
              locals: ["ip"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 80,
                  "column": 8
                },
                "end": {
                  "line": 92,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          \n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "routers-pod-name");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("        \n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "checklabel");
              var el4 = dom.createElement("input");
              dom.setAttribute(el4, "type", "checkbox");
              dom.setAttribute(el4, "name", "routername");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "checkmark");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("b");
              var el5 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "mandatory");
              var el6 = dom.createTextNode("*");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "router-pod-list");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1, 1]);
              var element8 = dom.childAt(element7, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element8, 'value');
              morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [84, 90], [84, 97]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [84, 102], [84, 109]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "podhosts", ["loc", [null, [86, 24], [86, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [86, 16], [88, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 99,
                      "column": 19
                    },
                    "end": {
                      "line": 101,
                      "column": 19
                    }
                  },
                  "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  var el2 = dom.createElement("label");
                  dom.setAttribute(el2, "class", "checklabel");
                  var el3 = dom.createTextNode("  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" [");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("]");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("input");
                  dom.setAttribute(el3, "type", "checkbox");
                  dom.setAttribute(el3, "name", "router");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "checkmark");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1, 0]);
                  var element1 = dom.childAt(element0, [5]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(element0, 1, 1);
                  morphs[1] = dom.createMorphAt(element0, 3, 3);
                  morphs[2] = dom.createAttrMorph(element1, 'value');
                  return morphs;
                },
                statements: [["content", "ip.name", ["loc", [null, [100, 62], [100, 73]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [100, 75], [100, 86]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [100, 133], [100, 140]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [100, 145], [100, 152]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
                locals: ["ip"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 94,
                    "column": 12
                  },
                  "end": {
                    "line": 105,
                    "column": 12
                  }
                },
                "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1, "class", "routers-pod-name");
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createTextNode("\n                  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("label");
                dom.setAttribute(el3, "class", "checklabel");
                var el4 = dom.createElement("input");
                dom.setAttribute(el4, "type", "checkbox");
                dom.setAttribute(el4, "name", "routername");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "checkmark");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("         \n                  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("ul");
                dom.setAttribute(el3, "class", "router-pod-list");
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                  ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var element3 = dom.childAt(element2, [1]);
                var element4 = dom.childAt(element3, [0]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element4, 'value');
                morphs[1] = dom.createMorphAt(element3, 3, 3);
                morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [97, 94], [97, 101]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [97, 106], [97, 113]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "key", ["loc", [null, [97, 149], [97, 156]]], 0, 0, 0, 0], ["block", "each", [["get", "value", ["loc", [null, [99, 27], [99, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [99, 19], [101, 28]]]]],
              locals: ["key", "value"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 106,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              dom.setAttribute(el1, "style", "font-weight: bold");
              var el2 = dom.createTextNode("Routers in Pod");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "mandatory");
              var el3 = dom.createTextNode("*");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each-in", [["get", "podhosts", ["loc", [null, [94, 23], [94, 31]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [94, 12], [105, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 79,
                "column": 8
              },
              "end": {
                "line": 107,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isSspine", ["loc", [null, [80, 14], [80, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [80, 8], [106, 17]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isRouterConnected", ["loc", [null, [79, 18], [79, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [79, 8], [107, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 137,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/configuser/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Create/Edit Users");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Data Center");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Pod Type");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element18 = dom.childAt(fragment, [2]);
        var element19 = dom.childAt(element18, [1]);
        var element20 = dom.childAt(element18, [5, 1]);
        var element21 = dom.childAt(element20, [1, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element19, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element19, [3]), 3, 3);
        morphs[2] = dom.createMorphAt(element19, 5, 5);
        morphs[3] = dom.createMorphAt(dom.childAt(element18, [3, 1]), 1, 1);
        morphs[4] = dom.createElementMorph(element21);
        morphs[5] = dom.createMorphAt(dom.childAt(element20, [3, 7]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "isRouterConnected", ["loc", [null, [11, 12], [11, 29]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [11, 6], [20, 13]]]], ["block", "if", [["get", "isRouterConnected", ["loc", [null, [24, 12], [24, 29]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [24, 6], [33, 13]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [35, 10], [35, 27]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [35, 4], [74, 11]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [78, 12], [78, 29]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [78, 6], [108, 13]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [114, 28], [114, 52]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [131, 88], [131, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [131, 10], [131, 99]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/lanconf/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/index.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/lanconf/interfaces/index",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":13,"column":8},"end":{"line":17,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","L2");var el2=dom.createTextNode("L2");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","L3");var el2=dom.createTextNode("L3");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":23,"column":10},"end":{"line":25,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("option");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element28=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element28,'value');morphs[1] = dom.createMorphAt(element28,0,0);return morphs;},statements:[["attribute","value",["concat",[["get","val",["loc",[null,[24,29],[24,32]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","val",["loc",[null,[24,36],[24,43]]],0,0,0,0]],locals:["val"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":21,"column":8},"end":{"line":26,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","inttypes",["loc",[null,[23,18],[23,26]]],0,0,0,0]],[],0,null,["loc",[null,[23,10],[25,19]]]]],locals:[],templates:[child0]};})();var child2=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":28,"column":6},"end":{"line":33,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("Vlan Id");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","text");dom.setAttribute(el2,"name","interfacenumber");dom.setAttribute(el2,"class","required");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":33,"column":6},"end":{"line":38,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("Interface Number");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","text");dom.setAttribute(el2,"name","interfacenumber");dom.setAttribute(el2,"class","required");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":43,"column":10},"end":{"line":45,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:2,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("option");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element27=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element27,'value');morphs[1] = dom.createMorphAt(element27,0,0);return morphs;},statements:[["attribute","value",["concat",[["get","dc",["loc",[null,[44,29],[44,31]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","dc",["loc",[null,[44,35],[44,41]]],0,0,0,0]],locals:["dc","pods"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":41,"column":8},"end":{"line":46,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each-in",[["get","content.routers",["loc",[null,[43,21],[43,36]]],0,0,0,0]],[],0,null,["loc",[null,[43,10],[45,22]]]]],locals:[],templates:[child0]};})();var child5=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":52,"column":10},"end":{"line":54,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("option");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element26,'value');morphs[1] = dom.createMorphAt(element26,0,0);return morphs;},statements:[["attribute","value",["concat",[["get","pod",["loc",[null,[53,29],[53,32]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","pod",["loc",[null,[53,36],[53,43]]],0,0,0,0]],locals:["pod"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":50,"column":8},"end":{"line":55,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","pods",["loc",[null,[52,18],[52,22]]],0,0,0,0]],[],0,null,["loc",[null,[52,10],[54,19]]]]],locals:[],templates:[child0]};})();var child6=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":62,"column":10},"end":{"line":64,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("option");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element25=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element25,'value');morphs[1] = dom.createMorphAt(element25,0,0);return morphs;},statements:[["attribute","value",["concat",[["get","item",["loc",[null,[63,29],[63,33]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","item",["loc",[null,[63,37],[63,45]]],0,0,0,0]],locals:["item"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":61,"column":8},"end":{"line":65,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","content.approver",["loc",[null,[62,18],[62,34]]],0,0,0,0]],[],0,null,["loc",[null,[62,10],[64,19]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":58,"column":4},"end":{"line":67,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("Approver");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","ember-chosen",[],["name","approver_email","placeholder","Select Approver Email"],0,null,["loc",[null,[61,8],[65,25]]]]],locals:[],templates:[child0]};})();var child7=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":75,"column":6},"end":{"line":79,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formAct");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","bs-primary",[],["action","getlogin","label","Next"],["loc",[null,[77,10],[77,55]]],0,0]],locals:[],templates:[]};})();var child8=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":93,"column":16},"end":{"line":95,"column":16}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"class","checklabel");var el3=dom.createTextNode("  ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(" [");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("]");dom.appendChild(el2,el3);var el3=dom.createElement("input");dom.setAttribute(el3,"type","checkbox");dom.setAttribute(el3,"name","router");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","checkmark");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element21=dom.childAt(fragment,[1,0]);var element22=dom.childAt(element21,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element21,1,1);morphs[1] = dom.createMorphAt(element21,3,3);morphs[2] = dom.createAttrMorph(element22,'value');return morphs;},statements:[["content","ip.name",["loc",[null,[94,60],[94,71]]],0,0,0,0],["content","ip.host",["loc",[null,[94,73],[94,84]]],0,0,0,0],["attribute","value",["concat",[["get","ip.name",["loc",[null,[94,131],[94,138]]],0,0,0,0],",",["get","ip.host",["loc",[null,[94,143],[94,150]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":88,"column":10},"end":{"line":99,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("ul");dom.setAttribute(el1,"class","routers-pod-name");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createTextNode("        \n              ");dom.appendChild(el2,el3);var el3=dom.createElement("label");dom.setAttribute(el3,"class","checklabel");var el4=dom.createElement("input");dom.setAttribute(el4,"type","checkbox");dom.setAttribute(el4,"name","routername");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","checkmark");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createElement("b");var el5=dom.createTextNode("Routers in Pod");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("ul");dom.setAttribute(el3,"class","router-pod-list");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("              ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("  \n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element23=dom.childAt(fragment,[1,1]);var element24=dom.childAt(element23,[1,0]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element24,'value');morphs[1] = dom.createMorphAt(dom.childAt(element23,[3]),1,1);return morphs;},statements:[["attribute","value",["concat",[["get","ip.name",["loc",[null,[91,90],[91,97]]],0,0,0,0],",",["get","ip.host",["loc",[null,[91,102],[91,109]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["block","each",[["get","podhosts",["loc",[null,[93,24],[93,32]]],0,0,0,0]],[],0,null,["loc",[null,[93,16],[95,25]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":106,"column":20},"end":{"line":108,"column":20}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"class","checklabel");var el3=dom.createTextNode("  ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(" [");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("]");dom.appendChild(el2,el3);var el3=dom.createElement("input");dom.setAttribute(el3,"type","checkbox");dom.setAttribute(el3,"name","router");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","checkmark");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element16=dom.childAt(fragment,[1,0]);var element17=dom.childAt(element16,[5]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(element16,1,1);morphs[1] = dom.createMorphAt(element16,3,3);morphs[2] = dom.createAttrMorph(element17,'data-router');morphs[3] = dom.createAttrMorph(element17,'value');return morphs;},statements:[["content","ip.name",["loc",[null,[107,64],[107,75]]],0,0,0,0],["content","ip.host",["loc",[null,[107,77],[107,88]]],0,0,0,0],["attribute","data-router",["concat",[["get","key",["loc",[null,[107,127],[107,130]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["attribute","value",["concat",[["get","ip.name",["loc",[null,[107,157],[107,164]]],0,0,0,0],",",["get","ip.host",["loc",[null,[107,169],[107,176]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":101,"column":10},"end":{"line":112,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:2,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("ul");dom.setAttribute(el1,"class","routers-pod-name");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("label");dom.setAttribute(el3,"class","checklabel");var el4=dom.createElement("input");dom.setAttribute(el4,"type","checkbox");dom.setAttribute(el4,"name","routername");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","checkmark");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("         \n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("ul");dom.setAttribute(el3,"class","router-pod-list");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("                  ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("       \n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element18=dom.childAt(fragment,[1,1]);var element19=dom.childAt(element18,[1]);var element20=dom.childAt(element19,[0]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element20,'data-router');morphs[1] = dom.createAttrMorph(element20,'value');morphs[2] = dom.createMorphAt(element19,3,3);morphs[3] = dom.createMorphAt(dom.childAt(element18,[3]),1,1);return morphs;},statements:[["attribute","data-router",["concat",[["get","key",["loc",[null,[104,82],[104,85]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["attribute","value",["concat",[["get","ip.name",["loc",[null,[104,116],[104,123]]],0,0,0,0],",",["get","ip.host",["loc",[null,[104,128],[104,135]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","key",["loc",[null,[104,171],[104,178]]],0,0,0,0],["block","each",[["get","value",["loc",[null,[106,28],[106,33]]],0,0,0,0]],[],0,null,["loc",[null,[106,20],[108,29]]]]],locals:["key","value"],templates:[child0]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":99,"column":10},"end":{"line":113,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"style","font-weight: bold");var el2=dom.createTextNode("Routers in Pod");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","mandatory");var el3=dom.createTextNode("*");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each-in",[["get","podhosts",["loc",[null,[101,21],[101,29]]],0,0,0,0]],[],0,null,["loc",[null,[101,10],[112,22]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":86,"column":10},"end":{"line":114,"column":10}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          \n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isSspine",["loc",[null,[88,16],[88,24]]],0,0,0,0]],[],0,1,["loc",[null,[88,10],[113,17]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":85,"column":8},"end":{"line":115,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isRouterConnected",["loc",[null,[86,20],[86,37]]],0,0,0,0]],[],0,null,["loc",[null,[86,10],[114,21]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":8,"column":2},"end":{"line":119,"column":2}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formContainer");dom.setAttribute(el1,"style","float:left");var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);var el2=dom.createElement("form");dom.setAttribute(el2,"name","alconf");var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Layer");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Type");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Data Center");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Pod Type");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Configuration Comment");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("input");dom.setAttribute(el4,"type","text");dom.setAttribute(el4,"name","config_comment");dom.setAttribute(el4,"placeholder","Enter configuration comment");dom.setAttribute(el4,"class","required");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formContainer");dom.setAttribute(el1,"style","float:right");var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);var el2=dom.createElement("form");dom.setAttribute(el2,"name","alconf");var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element29=dom.childAt(fragment,[1,1]);var morphs=new Array(8);morphs[0] = dom.createMorphAt(dom.childAt(element29,[1]),3,3);morphs[1] = dom.createMorphAt(dom.childAt(element29,[3]),3,3);morphs[2] = dom.createMorphAt(element29,5,5);morphs[3] = dom.createMorphAt(dom.childAt(element29,[7]),3,3);morphs[4] = dom.createMorphAt(dom.childAt(element29,[9]),3,3);morphs[5] = dom.createMorphAt(element29,11,11);morphs[6] = dom.createMorphAt(element29,15,15);morphs[7] = dom.createMorphAt(dom.childAt(fragment,[3,1,1]),1,1);return morphs;},statements:[["block","ember-chosen",[],["action","updateType","style","text-transform: capitalize","name","type","placeholder","Select interface layer","class","required"],0,null,["loc",[null,[13,8],[17,25]]]],["block","ember-chosen",[],["action","l2VlanCheck","style","text-transform: capitalize","name","interfacetype","placeholder","Select interface type","class","required"],1,null,["loc",[null,[21,8],[26,25]]]],["block","if",[["get","l2Vlan",["loc",[null,[28,12],[28,18]]],0,0,0,0]],[],2,3,["loc",[null,[28,6],[38,13]]]],["block","ember-chosen",[],["action","setdc","name","dc","placeholder","Select Data Center"],4,null,["loc",[null,[41,8],[46,25]]]],["block","ember-chosen",[],["action","fetchhosts","name","podtype","placeholder","Select Pod Type"],5,null,["loc",[null,[50,8],[55,25]]]],["block","unless",[["get","content.isAdminAccount",["loc",[null,[58,14],[58,36]]],0,0,0,0]],[],6,null,["loc",[null,[58,4],[67,17]]]],["block","if",[["get","isPodTypeSelected",["loc",[null,[75,12],[75,29]]],0,0,0,0]],[],7,null,["loc",[null,[75,6],[79,13]]]],["block","if",[["get","isPodTypeSelected",["loc",[null,[85,14],[85,31]]],0,0,0,0]],[],8,null,["loc",[null,[85,8],[115,15]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":153,"column":8},"end":{"line":155,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element14=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element14,[5]),[],true);}var element15=dom.childAt(element14,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element14,1,1);morphs[1] = dom.createMorphAt(element14,3,3);morphs[2] = dom.createAttrMorph(element15,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[154,48],[154,58]]],0,0,0,0],["content","ip.1",["loc",[null,[154,60],[154,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[154,117],[154,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":150,"column":6},"end":{"line":157,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[153,16],[153,23]]],0,0,0,0]],[],0,null,["loc",[null,[153,8],[155,17]]]]],locals:[],templates:[child0]};})();var child2=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":161,"column":8},"end":{"line":163,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element12=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element12,[5]),[],true);}var element13=dom.childAt(element12,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element12,1,1);morphs[1] = dom.createMorphAt(element12,3,3);morphs[2] = dom.createAttrMorph(element13,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[162,48],[162,58]]],0,0,0,0],["content","ip.1",["loc",[null,[162,60],[162,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[162,117],[162,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":158,"column":6},"end":{"line":165,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[161,16],[161,22]]],0,0,0,0]],[],0,null,["loc",[null,[161,8],[163,17]]]]],locals:[],templates:[child0]};})();var child3=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":172,"column":8},"end":{"line":177,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","access");var el2=dom.createTextNode("access");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","trunk");var el2=dom.createTextNode("trunk");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value"," ");var el2=dom.createTextNode("None");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":179,"column":6},"end":{"line":184,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("VLAN");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("textarea");dom.setAttribute(el2,"name","vlan");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child5=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":186,"column":6},"end":{"line":191,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("CHANNEL GROUP");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","number");dom.setAttribute(el2,"min","1");dom.setAttribute(el2,"name","channel_group");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":185,"column":6},"end":{"line":192,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","portChannel",["loc",[null,[186,16],[186,27]]],0,0,0,0]],[],0,null,["loc",[null,[186,6],[191,17]]]]],locals:[],templates:[child0]};})();var child6=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":193,"column":6},"end":{"line":198,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("MLAG ID");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","number");dom.setAttribute(el2,"min","1");dom.setAttribute(el2,"name","mlag");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child7=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":200,"column":8},"end":{"line":200,"column":91}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelConf","label","cancel","isPrim",false],["loc",[null,[200,29],[200,91]]],0,0]],locals:[],templates:[]};})();var child8=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":212,"column":8},"end":{"line":214,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element10=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element10,[5]),[],true);}var element11=dom.childAt(element10,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element10,1,1);morphs[1] = dom.createMorphAt(element10,3,3);morphs[2] = dom.createAttrMorph(element11,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[213,48],[213,58]]],0,0,0,0],["content","ip.1",["loc",[null,[213,60],[213,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[213,117],[213,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":209,"column":6},"end":{"line":216,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[212,16],[212,23]]],0,0,0,0]],[],0,null,["loc",[null,[212,8],[214,17]]]]],locals:[],templates:[child0]};})();var child9=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":220,"column":8},"end":{"line":222,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element8=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element8,[5]),[],true);}var element9=dom.childAt(element8,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element8,1,1);morphs[1] = dom.createMorphAt(element8,3,3);morphs[2] = dom.createAttrMorph(element9,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[221,48],[221,58]]],0,0,0,0],["content","ip.1",["loc",[null,[221,60],[221,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[221,117],[221,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":217,"column":6},"end":{"line":224,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[220,16],[220,22]]],0,0,0,0]],[],0,null,["loc",[null,[220,8],[222,17]]]]],locals:[],templates:[child0]};})();var child10=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":230,"column":8},"end":{"line":230,"column":92}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelForm2","label","cancel","isPrim",false],["loc",[null,[230,29],[230,92]]],0,0]],locals:[],templates:[]};})();var child11=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":242,"column":8},"end":{"line":244,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element6=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element6,[5]),[],true);}var element7=dom.childAt(element6,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element6,1,1);morphs[1] = dom.createMorphAt(element6,3,3);morphs[2] = dom.createAttrMorph(element7,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[243,48],[243,58]]],0,0,0,0],["content","ip.1",["loc",[null,[243,60],[243,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[243,117],[243,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":239,"column":6},"end":{"line":246,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[242,16],[242,23]]],0,0,0,0]],[],0,null,["loc",[null,[242,8],[244,17]]]]],locals:[],templates:[child0]};})();var child12=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":250,"column":8},"end":{"line":252,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element4=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element4,[5]),[],true);}var element5=dom.childAt(element4,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element4,1,1);morphs[1] = dom.createMorphAt(element4,3,3);morphs[2] = dom.createAttrMorph(element5,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[251,48],[251,58]]],0,0,0,0],["content","ip.1",["loc",[null,[251,60],[251,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[251,117],[251,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":247,"column":6},"end":{"line":254,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[250,16],[250,22]]],0,0,0,0]],[],0,null,["loc",[null,[250,8],[252,17]]]]],locals:[],templates:[child0]};})();var child13=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":264,"column":7},"end":{"line":264,"column":92}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode(" ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelForm3","label","cancel","isPrim",false],["loc",[null,[264,29],[264,92]]],0,0]],locals:[],templates:[]};})();var child14=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":276,"column":8},"end":{"line":278,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element2=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element2,[5]),[],true);}var element3=dom.childAt(element2,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element2,1,1);morphs[1] = dom.createMorphAt(element2,3,3);morphs[2] = dom.createAttrMorph(element3,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[277,48],[277,58]]],0,0,0,0],["content","ip.1",["loc",[null,[277,60],[277,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[277,117],[277,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":273,"column":6},"end":{"line":280,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[276,16],[276,23]]],0,0,0,0]],[],0,null,["loc",[null,[276,8],[278,17]]]]],locals:[],templates:[child0]};})();var child15=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":284,"column":8},"end":{"line":286,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element0,[5]),[],true);}var element1=dom.childAt(element0,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element0,1,1);morphs[1] = dom.createMorphAt(element0,3,3);morphs[2] = dom.createAttrMorph(element1,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[285,48],[285,58]]],0,0,0,0],["content","ip.1",["loc",[null,[285,60],[285,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[285,117],[285,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":281,"column":6},"end":{"line":288,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[284,16],[284,22]]],0,0,0,0]],[],0,null,["loc",[null,[284,8],[286,17]]]]],locals:[],templates:[child0]};})();var child16=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":307,"column":8},"end":{"line":312,"column":8}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","in");var el2=dom.createTextNode("In");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","out");var el2=dom.createTextNode("Out");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value"," ");var el2=dom.createTextNode("None");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child17=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":314,"column":6},"end":{"line":319,"column":6}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("DHCP Address");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","text");dom.setAttribute(el2,"name","dhcp_address");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child18=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":321,"column":8},"end":{"line":321,"column":92}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelForm4","label","cancel","isPrim",false],["loc",[null,[321,29],[321,92]]],0,0]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":327,"column":0}},"moduleName":"netconfig/templates/lanconf/interfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("header");dom.setAttribute(el1,"class","shdr");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("ul");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("li");var el4=dom.createTextNode("LAN Interfaces");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","innerContainer");var el2=dom.createTextNode("\n\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","logindiv");dom.setAttribute(el2,"class","modal");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","login-popup");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","title");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","close");var el6=dom.createElement("i");dom.setAttribute(el6,"class","fa fa-close");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","val");var el6=dom.createTextNode("Router Login");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("form");dom.setAttribute(el4,"name","loginform");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("label");var el7=dom.createTextNode("Username");dom.appendChild(el6,el7);var el7=dom.createElement("span");dom.setAttribute(el7,"class","mandatory");var el8=dom.createTextNode("*");dom.appendChild(el7,el8);dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","text");dom.setAttribute(el6,"name","username");dom.setAttribute(el6,"class","required");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("label");var el7=dom.createTextNode("Password");dom.appendChild(el6,el7);var el7=dom.createElement("span");dom.setAttribute(el7,"class","mandatory");var el8=dom.createTextNode("*");dom.appendChild(el7,el8);dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","password");dom.setAttribute(el6,"name","password");dom.setAttribute(el6,"class","required");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("label");var el7=dom.createTextNode("Enable Password");dom.appendChild(el6,el7);var el7=dom.createElement("span");dom.setAttribute(el7,"class","mandatory");var el8=dom.createTextNode("*");dom.appendChild(el7,el8);dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","password");dom.setAttribute(el6,"name","enpwd");dom.setAttribute(el6,"class","required");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formAct");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanIntConf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","ConfForm");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("DESCRIPTION");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","description");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("SWITCHPORT TYPE");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanVlanConf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","Form2");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("NAME");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","name");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanVxlanConf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","Form3");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("VLAN");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","mandatory");var el7=dom.createTextNode("*");dom.appendChild(el6,el7);dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"name","vlan");dom.setAttribute(el5,"type","number");dom.setAttribute(el5,"min","1");dom.setAttribute(el5,"class","required");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("VNI");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","mandatory");var el7=dom.createTextNode("*");dom.appendChild(el6,el7);dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"name","vni");dom.setAttribute(el5,"type","number");dom.setAttribute(el5,"min","1");dom.setAttribute(el5,"class","required");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n       ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanL3Conf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","Form4");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("DESCRIPTION");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","description");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("MTU");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","number");dom.setAttribute(el5,"min","0");dom.setAttribute(el5,"name","mtu");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("IP ADDRESS/MASK");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","ipaddr");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("ACCESS LIST NAME");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","acl");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("ACCESS LIST DIRECTION");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element30=dom.childAt(fragment,[2]);var element31=dom.childAt(element30,[3,1]);var element32=dom.childAt(element31,[1,1]);var element33=dom.childAt(element30,[5]);var element34=dom.childAt(element33,[3]);var element35=dom.childAt(element34,[12]);var element36=dom.childAt(element30,[7]);var element37=dom.childAt(element36,[3]);var element38=dom.childAt(element37,[6]);var element39=dom.childAt(element30,[9]);var element40=dom.childAt(element39,[3]);var element41=dom.childAt(element40,[8]);var element42=dom.childAt(element30,[11]);var element43=dom.childAt(element42,[3]);var element44=dom.childAt(element43,[16]);var morphs=new Array(29);morphs[0] = dom.createMorphAt(element30,1,1);morphs[1] = dom.createElementMorph(element32);morphs[2] = dom.createMorphAt(dom.childAt(element31,[3,7]),1,1);morphs[3] = dom.createMorphAt(element33,1,1);morphs[4] = dom.createMorphAt(element34,1,1);morphs[5] = dom.createMorphAt(element34,2,2);morphs[6] = dom.createMorphAt(dom.childAt(element34,[6]),3,3);morphs[7] = dom.createMorphAt(element34,8,8);morphs[8] = dom.createMorphAt(element34,9,9);morphs[9] = dom.createMorphAt(element34,10,10);morphs[10] = dom.createMorphAt(element35,1,1);morphs[11] = dom.createMorphAt(element35,3,3);morphs[12] = dom.createMorphAt(element36,1,1);morphs[13] = dom.createMorphAt(element37,1,1);morphs[14] = dom.createMorphAt(element37,2,2);morphs[15] = dom.createMorphAt(element38,1,1);morphs[16] = dom.createMorphAt(element38,3,3);morphs[17] = dom.createMorphAt(element39,1,1);morphs[18] = dom.createMorphAt(element40,1,1);morphs[19] = dom.createMorphAt(element40,2,2);morphs[20] = dom.createMorphAt(element41,1,1);morphs[21] = dom.createMorphAt(element41,3,3);morphs[22] = dom.createMorphAt(element42,1,1);morphs[23] = dom.createMorphAt(element43,1,1);morphs[24] = dom.createMorphAt(element43,2,2);morphs[25] = dom.createMorphAt(dom.childAt(element43,[12]),3,3);morphs[26] = dom.createMorphAt(element43,14,14);morphs[27] = dom.createMorphAt(element44,1,1);morphs[28] = dom.createMorphAt(element44,3,3);return morphs;},statements:[["block","if",[["get","showForm0",["loc",[null,[8,8],[8,17]]],0,0,0,0]],[],0,null,["loc",[null,[8,2],[119,9]]]],["element","action",["close_popup"],[],["loc",[null,[124,28],[124,52]]],0,0],["inline","bs-primary",[],["action","login","label","Login","loadingTxt","Logging In..","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[141,88],[141,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[141,10],[141,99]]],0,0],["inline","int-details",[],["label","INTERFACE","cate",["subexpr","@mut",[["get","type",["loc",[null,[148,41],[148,45]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[148,51],[148,64]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[148,72],[148,87]]],0,0,0,0]],[],[],0,0]],["loc",[null,[148,4],[148,89]]],0,0],["block","if",[["get","present",["loc",[null,[150,12],[150,19]]],0,0,0,0]],[],1,null,["loc",[null,[150,6],[157,13]]]],["block","if",[["get","absent",["loc",[null,[158,12],[158,18]]],0,0,0,0]],[],2,null,["loc",[null,[158,6],[165,13]]]],["block","ember-chosen",[],["style","text-transform: capitalize","action","hideChannelGroup","name","switchport_type","placeholder","Select type"],3,null,["loc",[null,[172,8],[177,25]]]],["block","if",[["get","showVlan",["loc",[null,[179,12],[179,20]]],0,0,0,0]],[],4,null,["loc",[null,[179,6],[184,13]]]],["block","if",[["get","channelGroup",["loc",[null,[185,12],[185,24]]],0,0,0,0]],[],5,null,["loc",[null,[185,6],[192,13]]]],["block","if",[["get","portChannel",["loc",[null,[193,12],[193,23]]],0,0,0,0]],[],6,null,["loc",[null,[193,6],[198,13]]]],["block","unless",[["get","isLoading",["loc",[null,[200,18],[200,27]]],0,0,0,0]],[],7,null,["loc",[null,[200,8],[200,102]]]],["inline","bs-primary",[],["action","confFormSubmit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[201,91],[201,100]]],0,0,0,0]],[],[],0,0]],["loc",[null,[201,8],[201,102]]],0,0],["inline","int-details",[],["label","VLAN","cate",["subexpr","@mut",[["get","type",["loc",[null,[207,36],[207,40]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[207,46],[207,59]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[207,67],[207,82]]],0,0,0,0]],[],[],0,0]],["loc",[null,[207,4],[207,84]]],0,0],["block","if",[["get","present",["loc",[null,[209,12],[209,19]]],0,0,0,0]],[],8,null,["loc",[null,[209,6],[216,13]]]],["block","if",[["get","absent",["loc",[null,[217,12],[217,18]]],0,0,0,0]],[],9,null,["loc",[null,[217,6],[224,13]]]],["block","unless",[["get","isLoading",["loc",[null,[230,18],[230,27]]],0,0,0,0]],[],10,null,["loc",[null,[230,8],[230,103]]]],["inline","bs-primary",[],["action","form2Submit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[231,88],[231,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[231,8],[231,99]]],0,0],["inline","int-details",[],["label","INTERFACE","cate",["subexpr","@mut",[["get","type",["loc",[null,[237,41],[237,45]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[237,51],[237,64]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[237,72],[237,87]]],0,0,0,0]],[],[],0,0]],["loc",[null,[237,4],[237,89]]],0,0],["block","if",[["get","present",["loc",[null,[239,12],[239,19]]],0,0,0,0]],[],11,null,["loc",[null,[239,6],[246,13]]]],["block","if",[["get","absent",["loc",[null,[247,12],[247,18]]],0,0,0,0]],[],12,null,["loc",[null,[247,6],[254,13]]]],["block","unless",[["get","isLoading",["loc",[null,[264,17],[264,26]]],0,0,0,0]],[],13,null,["loc",[null,[264,7],[264,103]]]],["inline","bs-primary",[],["action","form3Submit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[265,88],[265,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[265,8],[265,99]]],0,0],["inline","int-details",[],["label","INTERFACE","cate",["subexpr","@mut",[["get","type",["loc",[null,[271,41],[271,45]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[271,51],[271,64]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[271,72],[271,87]]],0,0,0,0]],[],[],0,0]],["loc",[null,[271,4],[271,89]]],0,0],["block","if",[["get","present",["loc",[null,[273,12],[273,19]]],0,0,0,0]],[],14,null,["loc",[null,[273,6],[280,13]]]],["block","if",[["get","absent",["loc",[null,[281,12],[281,18]]],0,0,0,0]],[],15,null,["loc",[null,[281,6],[288,13]]]],["block","ember-chosen",[],["style","text-transform: capitalize","name","acl_direction","placeholder","Select ACL Direction"],16,null,["loc",[null,[307,8],[312,25]]]],["block","if",[["get","vlan",["loc",[null,[314,12],[314,16]]],0,0,0,0]],[],17,null,["loc",[null,[314,6],[319,13]]]],["block","unless",[["get","isLoading",["loc",[null,[321,18],[321,27]]],0,0,0,0]],[],18,null,["loc",[null,[321,8],[321,103]]]],["inline","bs-primary",[],["action","form4Submit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[322,88],[322,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[322,8],[322,99]]],0,0]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11,child12,child13,child14,child15,child16,child17,child18]};})());});
define("netconfig/templates/lanconf/osupdate/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 12
            },
            "end": {
              "line": 49,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-spinner fa-spin");
          dom.setAttribute(el1, "style", "font-size:24px");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 12
            },
            "end": {
              "line": 51,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "mlag-next btn btn-primary");
          dom.setAttribute(el1, "value", "Upload");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element22 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element22);
          return morphs;
        },
        statements: [["element", "action", ["uploadImage"], [], ["loc", [null, [50, 86], [50, 110]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 110,
              "column": 18
            },
            "end": {
              "line": 112,
              "column": 18
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element21 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element21, 'value');
          morphs[1] = dom.createMorphAt(element21, 0, 0);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [111, 35], [111, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [111, 43], [111, 51]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 12
            },
            "end": {
              "line": 127,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n                      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element16 = dom.childAt(fragment, [1]);
          var element17 = dom.childAt(element16, [1]);
          var element18 = dom.childAt(element17, [1]);
          var element19 = dom.childAt(element17, [3]);
          var element20 = dom.childAt(element16, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element18, 'id');
          morphs[1] = dom.createAttrMorph(element18, 'value');
          morphs[2] = dom.createAttrMorph(element19, 'for');
          morphs[3] = dom.createMorphAt(element19, 0, 0);
          morphs[4] = dom.createMorphAt(element19, 2, 2);
          morphs[5] = dom.createAttrMorph(element20, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckboxss_", ["get", "index", ["loc", [null, [122, 47], [122, 52]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [122, 101], [122, 110]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckboxss_", ["get", "index", ["loc", [null, [123, 48], [123, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.host", ["loc", [null, [123, 82], [123, 95]]], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [123, 97], [123, 110]]], 0, 0, 0, 0], ["attribute", "ipid", ["get", "item.host", ["loc", [null, [125, 65], [125, 74]]], 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 127,
              "column": 12
            },
            "end": {
              "line": 129,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 132,
              "column": 14
            },
            "end": {
              "line": 140,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element12, [3]);
          var element15 = dom.childAt(element11, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element13, 'id');
          morphs[1] = dom.createAttrMorph(element13, 'value');
          morphs[2] = dom.createAttrMorph(element14, 'for');
          morphs[3] = dom.createMorphAt(element14, 0, 0);
          morphs[4] = dom.createMorphAt(element14, 2, 2);
          morphs[5] = dom.createAttrMorph(element15, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckboxs_", ["get", "index", ["loc", [null, [135, 48], [135, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [135, 102], [135, 111]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckboxs_", ["get", "index", ["loc", [null, [136, 49], [136, 54]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.host", ["loc", [null, [136, 83], [136, 96]]], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [136, 98], [136, 111]]], 0, 0, 0, 0], ["attribute", "ipid", ["get", "item.host", ["loc", [null, [138, 67], [138, 76]]], 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 140,
              "column": 14
            },
            "end": {
              "line": 142,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 146,
              "column": 14
            },
            "end": {
              "line": 151,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 1");
          var el2 = dom.createTextNode("Pod 1");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 2");
          var el2 = dom.createTextNode("Pod 2");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 3");
          var el2 = dom.createTextNode("Pod 3");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 4");
          var el2 = dom.createTextNode("Pod 4");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 153,
              "column": 12
            },
            "end": {
              "line": 161,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element7, [3]);
          var element10 = dom.childAt(element6, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element8, 'id');
          morphs[1] = dom.createAttrMorph(element8, 'value');
          morphs[2] = dom.createAttrMorph(element9, 'for');
          morphs[3] = dom.createMorphAt(element9, 0, 0);
          morphs[4] = dom.createMorphAt(element9, 2, 2);
          morphs[5] = dom.createAttrMorph(element10, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckboxl_", ["get", "index", ["loc", [null, [156, 44], [156, 49]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [156, 98], [156, 107]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckboxl_", ["get", "index", ["loc", [null, [157, 45], [157, 50]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.host", ["loc", [null, [157, 79], [157, 92]]], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [157, 94], [157, 107]]], 0, 0, 0, 0], ["attribute", "ipid", ["get", "item.host", ["loc", [null, [159, 63], [159, 72]]], 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 161,
              "column": 14
            },
            "end": {
              "line": 163,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 166,
              "column": 14
            },
            "end": {
              "line": 174,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [3]);
          var element5 = dom.childAt(element1, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element3, 'id');
          morphs[1] = dom.createAttrMorph(element3, 'value');
          morphs[2] = dom.createAttrMorph(element4, 'for');
          morphs[3] = dom.createMorphAt(element4, 0, 0);
          morphs[4] = dom.createMorphAt(element4, 2, 2);
          morphs[5] = dom.createAttrMorph(element5, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckboxc_", ["get", "index", ["loc", [null, [169, 48], [169, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [169, 102], [169, 111]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckboxc_", ["get", "index", ["loc", [null, [170, 49], [170, 54]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.host", ["loc", [null, [170, 83], [170, 96]]], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [170, 98], [170, 111]]], 0, 0, 0, 0], ["attribute", "ipid", ["get", "item.host", ["loc", [null, [172, 67], [172, 76]]], 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 174,
              "column": 14
            },
            "end": {
              "line": 176,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 181,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "mlag-next next btn btn-primary w180");
          dom.setAttribute(el1, "value", "Copy");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["startCopy"], [], ["loc", [null, [180, 90], [180, 112]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 200,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/lanconf/osupdate/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("OS Update");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        dom.setAttribute(el1, "style", "display: flex; align-items: center;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "os-update-cont");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Upload OS Image (or) Copy image to devices");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "os-update-upload");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "src", "/static/netconf/app/images/upload_cloud.svg");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Uplod New Image");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "os-update-copy");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "src", "/static/netconf/app/images/copy_device.svg");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Copy Image to devices");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "uploadPopup");
        dom.setAttribute(el2, "class", "popup-overlay dnoneImpl");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "popup-new");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "text");
        var el6 = dom.createTextNode("Image Upload");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close-new");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "src", "/static/netconf/app/images/close.svg");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "name", "imageUpload");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "os-image-upload");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7, "src", "/static/netconf/app/images/up-arrow.svg");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h3");
        var el8 = dom.createTextNode("Drop your files here");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "id", "arista-swi-input");
        dom.setAttribute(el7, "type", "file");
        dom.setAttribute(el7, "name", "file");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "id", "arista-swi-name");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "style", "display: flex;flex-direction:row");
        var el7 = dom.createTextNode("\n          \n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formAction txtAC");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "copyPopup");
        dom.setAttribute(el2, "class", "popup-overlay dnoneImpl");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "popup-new");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "text");
        var el6 = dom.createTextNode("Image Copy");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close-new");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "src", "/static/netconf/app/images/close.svg");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content");
        dom.setAttribute(el4, "style", "height:550px;");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "image-copy-tabs");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("ul");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("li");
        dom.setAttribute(el7, "class", "active");
        dom.setAttribute(el7, "data-name", "login");
        var el8 = dom.createTextNode("User Login");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("li");
        dom.setAttribute(el7, "data-name", "superspine");
        var el8 = dom.createTextNode("Super Spine");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("li");
        dom.setAttribute(el7, "data-name", "spine");
        var el8 = dom.createTextNode("Spine");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("li");
        dom.setAttribute(el7, "data-name", "leaf");
        var el8 = dom.createTextNode("Leaf");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("li");
        dom.setAttribute(el7, "data-name", "CVX");
        var el8 = dom.createTextNode("CVX");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "tab-content");
        dom.setAttribute(el6, "data-name", "login");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("form");
        dom.setAttribute(el7, "name", "mlag-osupdate");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "formRow");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("label");
        var el10 = dom.createTextNode("Username\n                  ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        dom.setAttribute(el10, "class", "mandatory");
        var el11 = dom.createTextNode("*");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("input");
        dom.setAttribute(el9, "type", "text");
        dom.setAttribute(el9, "name", "username");
        dom.setAttribute(el9, "class", "required");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "formRow");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("label");
        var el10 = dom.createTextNode("Password\n                  ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        dom.setAttribute(el10, "class", "mandatory");
        var el11 = dom.createTextNode("*");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("input");
        dom.setAttribute(el9, "type", "password");
        dom.setAttribute(el9, "name", "password");
        dom.setAttribute(el9, "class", "required");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("label");
        dom.setAttribute(el9, "for", "shpwd1");
        dom.setAttribute(el9, "style", "\n    cursor: pointer;\n");
        var el10 = dom.createElement("input");
        dom.setAttribute(el10, "type", "checkbox");
        dom.setAttribute(el10, "onclick", "var pass = $(this).parents('div.formRow').find('input.required')[0];pass.type = pass.type === 'password' ? 'text' : 'password';");
        dom.setAttribute(el10, "name", "shpwd1");
        dom.setAttribute(el10, "id", "shpwd1");
        dom.setAttribute(el10, "style", "opacity: 100");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("div");
        dom.setAttribute(el10, "style", "\n    margin-left: 17px;\n    font-size: smaller;\n");
        var el11 = dom.createTextNode("toggle password");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "formRow");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("label");
        var el10 = dom.createTextNode("Enable Password\n                  ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        dom.setAttribute(el10, "class", "mandatory");
        var el11 = dom.createTextNode("*");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("input");
        dom.setAttribute(el9, "type", "password");
        dom.setAttribute(el9, "name", "enablepwd");
        dom.setAttribute(el9, "class", "required");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("label");
        dom.setAttribute(el9, "for", "shpwd2");
        dom.setAttribute(el9, "style", "\n    cursor: pointer;\n");
        var el10 = dom.createElement("input");
        dom.setAttribute(el10, "type", "checkbox");
        dom.setAttribute(el10, "onclick", "var pass = $(this).parents('div.formRow').find('input.required')[0];pass.type = pass.type === 'password' ? 'text' : 'password';");
        dom.setAttribute(el10, "name", "shpwd2");
        dom.setAttribute(el10, "id", "shpwd2");
        dom.setAttribute(el10, "style", "opacity: 100");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("div");
        dom.setAttribute(el10, "style", "\n    margin-left: 17px;\n    font-size: smaller;\n");
        var el11 = dom.createTextNode("toggle password");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "formRow");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("label");
        var el10 = dom.createTextNode("Image Name\n                  ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        dom.setAttribute(el10, "class", "mandatory");
        var el11 = dom.createTextNode("*");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("select");
        dom.setAttribute(el9, "class", "myselect");
        dom.setAttribute(el9, "name", "filename");
        var el10 = dom.createTextNode("\n");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment(" <input type=\"text\"  name=\"filename\" class=\"required\"/> ");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "tab-content dnoneImpl");
        dom.setAttribute(el6, "data-name", "superspine");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "tab-content dnoneImpl");
        dom.setAttribute(el6, "data-name", "spine");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "tab-content dnoneImpl");
        dom.setAttribute(el6, "data-name", "leaf");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "formRow");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "tab-content dnoneImpl");
        dom.setAttribute(el6, "data-name", "CVX");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          \n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "popup-actions");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "popup2");
        dom.setAttribute(el2, "class", "log-popup-overlay");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "popup-new");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "text");
        var el6 = dom.createTextNode("Log");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close-new");
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "src", "/static/netconf/app/images/close.svg");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("pre");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element23 = dom.childAt(fragment, [2]);
        var element24 = dom.childAt(element23, [2]);
        var element25 = dom.childAt(element24, [3]);
        var element26 = dom.childAt(element24, [5]);
        var element27 = dom.childAt(element23, [4, 1]);
        var element28 = dom.childAt(element27, [1, 3]);
        var element29 = dom.childAt(element23, [6, 1]);
        var element30 = dom.childAt(element29, [1, 3]);
        var element31 = dom.childAt(element29, [3, 1]);
        var element32 = dom.childAt(element31, [1]);
        var element33 = dom.childAt(element32, [1]);
        var element34 = dom.childAt(element32, [3]);
        var element35 = dom.childAt(element32, [5]);
        var element36 = dom.childAt(element32, [7]);
        var element37 = dom.childAt(element32, [9]);
        var element38 = dom.childAt(element31, [9]);
        var element39 = dom.childAt(element23, [8, 1, 1, 3]);
        var morphs = new Array(18);
        morphs[0] = dom.createElementMorph(element25);
        morphs[1] = dom.createElementMorph(element26);
        morphs[2] = dom.createElementMorph(element28);
        morphs[3] = dom.createMorphAt(dom.childAt(element27, [3, 1, 5]), 1, 1);
        morphs[4] = dom.createElementMorph(element30);
        morphs[5] = dom.createElementMorph(element33);
        morphs[6] = dom.createElementMorph(element34);
        morphs[7] = dom.createElementMorph(element35);
        morphs[8] = dom.createElementMorph(element36);
        morphs[9] = dom.createElementMorph(element37);
        morphs[10] = dom.createMorphAt(dom.childAt(element31, [3, 1, 7, 3]), 1, 1);
        morphs[11] = dom.createMorphAt(dom.childAt(element31, [5]), 1, 1);
        morphs[12] = dom.createMorphAt(dom.childAt(element31, [7]), 1, 1);
        morphs[13] = dom.createMorphAt(dom.childAt(element38, [1]), 1, 1);
        morphs[14] = dom.createMorphAt(element38, 3, 3);
        morphs[15] = dom.createMorphAt(dom.childAt(element31, [11]), 1, 1);
        morphs[16] = dom.createMorphAt(dom.childAt(element31, [13]), 1, 1);
        morphs[17] = dom.createElementMorph(element39);
        return morphs;
      },
      statements: [["element", "action", ["showUploadForm"], [], ["loc", [null, [18, 34], [18, 61]]], 0, 0], ["element", "action", ["showCopyForm"], [], ["loc", [null, [22, 32], [22, 57]]], 0, 0], ["element", "action", ["close"], [], ["loc", [null, [31, 32], [31, 50]]], 0, 0], ["block", "if", [["get", "isUploading", ["loc", [null, [47, 18], [47, 29]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [47, 12], [51, 19]]]], ["element", "action", ["closeCopyForm"], [], ["loc", [null, [61, 32], [61, 58]]], 0, 0], ["element", "action", ["showTabs", "login"], [], ["loc", [null, [68, 16], [68, 45]]], 0, 0], ["element", "action", ["showTabs", "superspine"], [], ["loc", [null, [69, 16], [69, 50]]], 0, 0], ["element", "action", ["showTabs", "spine"], [], ["loc", [null, [70, 16], [70, 45]]], 0, 0], ["element", "action", ["showTabs", "leaf"], [], ["loc", [null, [71, 16], [71, 44]]], 0, 0], ["element", "action", ["showTabs", "CVX"], [], ["loc", [null, [72, 16], [72, 43]]], 0, 0], ["block", "each", [["get", "imgFiles", ["loc", [null, [110, 26], [110, 34]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [110, 18], [112, 27]]]], ["block", "each", [["get", "superSpine", ["loc", [null, [119, 20], [119, 30]]], 0, 0, 0, 0]], [], 3, 4, ["loc", [null, [119, 12], [129, 21]]]], ["block", "each", [["get", "spine", ["loc", [null, [132, 22], [132, 27]]], 0, 0, 0, 0]], [], 5, 6, ["loc", [null, [132, 14], [142, 23]]]], ["block", "ember-chosen", [], ["name", "pods", "action", "podSelection", "class", "podSelect_drop", "placeholder", "Select pods", "multiple", true], 7, null, ["loc", [null, [146, 14], [151, 31]]]], ["block", "each", [["get", "fLeaf", ["loc", [null, [153, 20], [153, 25]]], 0, 0, 0, 0]], [], 8, 9, ["loc", [null, [153, 12], [163, 23]]]], ["block", "each", [["get", "CVX", ["loc", [null, [166, 22], [166, 25]]], 0, 0, 0, 0]], [], 10, 11, ["loc", [null, [166, 14], [176, 23]]]], ["block", "unless", [["get", "isUpdating", ["loc", [null, [179, 20], [179, 30]]], 0, 0, 0, 0]], [], 12, null, ["loc", [null, [179, 10], [181, 21]]]], ["element", "action", ["close"], [], ["loc", [null, [192, 32], [192, 50]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12]
    };
  })());
});
define("netconfig/templates/lanconf/osupdate/mlag", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 10
            },
            "end": {
              "line": 15,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/mlag.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 1");
          var el2 = dom.createTextNode("Pod 1");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 2");
          var el2 = dom.createTextNode("Pod 2");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 3");
          var el2 = dom.createTextNode("Pod 3");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "Pod 4");
          var el2 = dom.createTextNode("Pod 4");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/mlag.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]   ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    \n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [3]);
          var element6 = dom.childAt(element2, [3]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element4, 'id');
          morphs[1] = dom.createAttrMorph(element4, 'value');
          morphs[2] = dom.createAttrMorph(element5, 'for');
          morphs[3] = dom.createMorphAt(element5, 0, 0);
          morphs[4] = dom.createMorphAt(element5, 2, 2);
          morphs[5] = dom.createMorphAt(element5, 4, 4);
          morphs[6] = dom.createMorphAt(element5, 6, 6);
          morphs[7] = dom.createAttrMorph(element6, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckbox_", ["get", "index", ["loc", [null, [20, 35], [20, 40]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.0.host", ["loc", [null, [20, 89], [20, 102]]], 0, 0, 0, 0], ",", ["get", "item.1.host", ["loc", [null, [20, 107], [20, 120]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckbox_", ["get", "index", ["loc", [null, [21, 36], [21, 41]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.0.host", ["loc", [null, [21, 70], [21, 87]]], 0, 0, 0, 0], ["content", "item.0.name", ["loc", [null, [21, 89], [21, 106]]], 0, 0, 0, 0], ["content", "item.1.host", ["loc", [null, [21, 115], [21, 132]]], 0, 0, 0, 0], ["content", "item.1.name", ["loc", [null, [21, 134], [21, 151]]], 0, 0, 0, 0], ["attribute", "ipid", ["concat", [["get", "item.0.host", ["loc", [null, [23, 56], [23, 69]]], 0, 0, 0, 0], "_", ["get", "item.1.host", ["loc", [null, [23, 74], [23, 87]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 5
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/mlag.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/mlag.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "fromAction txtAC");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "name", "next");
          dom.setAttribute(el2, "class", "btn btn-primary w180");
          dom.setAttribute(el2, "value", "Next");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["showUpdateForm"], [], ["loc", [null, [31, 81], [31, 108]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 16
            },
            "end": {
              "line": 69,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/mlag.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [68, 35], [68, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [68, 43], [68, 51]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 12
            },
            "end": {
              "line": 78,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/mlag.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formAct");
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["action", "startUpdate", "label", "Update"], ["loc", [null, [76, 14], [76, 64]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 98,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/osupdate/mlag.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Mlag Pair");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "mlag-pair");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow PodSelection");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "popup1");
        dom.setAttribute(el2, "class", "popup-overlay dnoneImp");
        var el3 = dom.createTextNode("\n    	");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "popup-new");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n    		  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "text");
        var el6 = dom.createTextNode("Update Form");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close-new");
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "src", "/static/netconf/app/images/close.svg");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    		");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "name", "mlag-osupdate");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Username");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "type", "text");
        dom.setAttribute(el7, "name", "username");
        dom.setAttribute(el7, "class", "required");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Password");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "type", "password");
        dom.setAttribute(el7, "name", "password");
        dom.setAttribute(el7, "class", "required");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        dom.setAttribute(el7, "for", "shpwd1");
        dom.setAttribute(el7, "style", "\n    cursor: pointer;\n");
        var el8 = dom.createElement("input");
        dom.setAttribute(el8, "type", "checkbox");
        dom.setAttribute(el8, "onclick", "var pass = $(this).parents('div.formRow').find('input.required')[0];pass.type = pass.type === 'password' ? 'text' : 'password';");
        dom.setAttribute(el8, "name", "shpwd1");
        dom.setAttribute(el8, "id", "shpwd1");
        dom.setAttribute(el8, "style", "opacity: 100");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "style", "\n    margin-left: 17px;\n    font-size: smaller;\n");
        var el9 = dom.createTextNode("toggle password");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Enable Password");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "type", "password");
        dom.setAttribute(el7, "name", "enablepwd");
        dom.setAttribute(el7, "class", "required");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        dom.setAttribute(el7, "for", "shpwd2");
        dom.setAttribute(el7, "style", "\n    cursor: pointer;\n");
        var el8 = dom.createElement("input");
        dom.setAttribute(el8, "type", "checkbox");
        dom.setAttribute(el8, "onclick", "var pass = $(this).parents('div.formRow').find('input.required')[0];pass.type = pass.type === 'password' ? 'text' : 'password';");
        dom.setAttribute(el8, "name", "shpwd2");
        dom.setAttribute(el8, "id", "shpwd2");
        dom.setAttribute(el8, "style", "opacity: 100");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "style", "\n    margin-left: 17px;\n    font-size: smaller;\n");
        var el9 = dom.createTextNode("toggle password");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Image Name");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("select");
        dom.setAttribute(el7, "name", "imgname");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("              ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment(" <input type=\"text\"  name=\"imgname\" class=\"required\"/> ");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "hidden");
        dom.setAttribute(el6, "name", "updateType");
        dom.setAttribute(el6, "value", "MLAG");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    		");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    	");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "popup2");
        dom.setAttribute(el2, "class", "log-popup-overlay");
        var el3 = dom.createTextNode("\n    	");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "popup-new");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n    		  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "text");
        var el6 = dom.createTextNode("Log");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close-new");
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "src", "/static/netconf/app/images/close.svg");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    		");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("pre");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    		");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    	");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [2]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element7, [5, 1]);
        var element10 = dom.childAt(element9, [1, 3]);
        var element11 = dom.childAt(element9, [3, 1]);
        var element12 = dom.childAt(element7, [7, 1, 1, 3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element8, 3, 3);
        morphs[2] = dom.createMorphAt(element7, 3, 3);
        morphs[3] = dom.createElementMorph(element10);
        morphs[4] = dom.createMorphAt(dom.childAt(element11, [7, 3]), 1, 1);
        morphs[5] = dom.createMorphAt(element11, 11, 11);
        morphs[6] = dom.createElementMorph(element12);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["name", "pods", "action", "podSelection", "class", "podSelect_drop", "placeholder", "Select pods", "multiple", true], 0, null, ["loc", [null, [10, 10], [15, 27]]]], ["block", "each", [["get", "content", ["loc", [null, [17, 12], [17, 19]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [17, 4], [27, 14]]]], ["block", "unless", [["get", "isUpdating", ["loc", [null, [29, 12], [29, 22]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [29, 2], [33, 13]]]], ["element", "action", ["close"], [], ["loc", [null, [38, 34], [38, 52]]], 0, 0], ["block", "each", [["get", "imgFiles", ["loc", [null, [67, 24], [67, 32]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [67, 16], [69, 25]]]], ["block", "unless", [["get", "isUpdating", ["loc", [null, [74, 22], [74, 32]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [74, 12], [78, 23]]]], ["element", "action", ["close"], [], ["loc", [null, [88, 34], [88, 52]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/lanconf/osupdate/spine", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    \n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element13, [1]);
          var element15 = dom.childAt(element13, [3]);
          var element16 = dom.childAt(element12, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element14, 'id');
          morphs[1] = dom.createAttrMorph(element14, 'value');
          morphs[2] = dom.createAttrMorph(element15, 'for');
          morphs[3] = dom.createMorphAt(element15, 0, 0);
          morphs[4] = dom.createMorphAt(element15, 2, 2);
          morphs[5] = dom.createAttrMorph(element16, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckbox_", ["get", "index", ["loc", [null, [11, 35], [11, 40]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [11, 89], [11, 98]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckbox_", ["get", "index", ["loc", [null, [12, 36], [12, 41]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.host", ["loc", [null, [12, 70], [12, 83]]], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [12, 85], [12, 98]]], 0, 0, 0, 0], ["attribute", "ipid", ["concat", [["get", "item.host", ["loc", [null, [14, 56], [14, 65]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 5
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    \n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element8, [3]);
          var element11 = dom.childAt(element7, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element9, 'id');
          morphs[1] = dom.createAttrMorph(element9, 'value');
          morphs[2] = dom.createAttrMorph(element10, 'for');
          morphs[3] = dom.createMorphAt(element10, 0, 0);
          morphs[4] = dom.createMorphAt(element10, 2, 2);
          morphs[5] = dom.createAttrMorph(element11, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckboxs_", ["get", "index", ["loc", [null, [24, 36], [24, 41]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [24, 90], [24, 99]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckboxs_", ["get", "index", ["loc", [null, [25, 37], [25, 42]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.host", ["loc", [null, [25, 71], [25, 84]]], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [25, 86], [25, 99]]], 0, 0, 0, 0], ["attribute", "ipid", ["concat", [["get", "item.host", ["loc", [null, [27, 56], [27, 65]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 5
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow task");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zcheckbox");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "checkbox");
          dom.setAttribute(el3, "name", "mlag-devices");
          dom.setAttribute(el3, "class", "zcheckbox__helper");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "zcheckbox__label");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" [");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("]");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    \n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "margin: 0px 0px 0px 10px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [3]);
          var element6 = dom.childAt(element2, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element4, 'id');
          morphs[1] = dom.createAttrMorph(element4, 'value');
          morphs[2] = dom.createAttrMorph(element5, 'for');
          morphs[3] = dom.createMorphAt(element5, 0, 0);
          morphs[4] = dom.createMorphAt(element5, 2, 2);
          morphs[5] = dom.createAttrMorph(element6, 'ipid');
          return morphs;
        },
        statements: [["attribute", "id", ["concat", ["zcheckboxss_", ["get", "index", ["loc", [null, [37, 37], [37, 42]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "item.host", ["loc", [null, [37, 91], [37, 100]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", ["zcheckboxss_", ["get", "index", ["loc", [null, [38, 38], [38, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.host", ["loc", [null, [38, 72], [38, 85]]], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [38, 87], [38, 100]]], 0, 0, 0, 0], ["attribute", "ipid", ["concat", [["get", "item.host", ["loc", [null, [40, 56], [40, 65]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 42,
              "column": 5
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No device");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formAction txtAC");
          var el2 = dom.createTextNode("\n       ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "name", "next");
          dom.setAttribute(el2, "class", "btn btn-primary w180");
          dom.setAttribute(el2, "value", "Next");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["showUpdateForm"], [], ["loc", [null, [48, 82], [48, 109]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 16
            },
            "end": {
              "line": 88,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [87, 35], [87, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [87, 43], [87, 51]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 91,
              "column": 12
            },
            "end": {
              "line": 95,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formAct");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["action", "startUpdate", "label", "Update"], ["loc", [null, [93, 16], [93, 66]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 114,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/osupdate/spine.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Spine/SuperSpine/CVX");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "superspine-cont");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "spine-cont");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cvx-cont");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "popup1");
        dom.setAttribute(el2, "class", "popup-overlay dnoneImp");
        var el3 = dom.createTextNode("\n    	");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "popup-new");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n    		  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "text");
        var el6 = dom.createTextNode("Update Form");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close-new");
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "src", "/static/netconf/app/images/close.svg");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    		");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "name", "mlag-osupdate");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Username");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "type", "text");
        dom.setAttribute(el7, "name", "username");
        dom.setAttribute(el7, "class", "required");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Password");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "type", "password");
        dom.setAttribute(el7, "name", "password");
        dom.setAttribute(el7, "class", "required");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        dom.setAttribute(el7, "for", "shpwd1");
        dom.setAttribute(el7, "style", "\n    cursor: pointer;\n");
        var el8 = dom.createElement("input");
        dom.setAttribute(el8, "type", "checkbox");
        dom.setAttribute(el8, "onclick", "var pass = $(this).parents('div.formRow').find('input.required')[0];pass.type = pass.type === 'password' ? 'text' : 'password';");
        dom.setAttribute(el8, "name", "shpwd1");
        dom.setAttribute(el8, "id", "shpwd1");
        dom.setAttribute(el8, "style", "opacity: 100");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "style", "\n    margin-left: 17px;\n    font-size: smaller;\n");
        var el9 = dom.createTextNode("toggle password");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Enable Password");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "type", "password");
        dom.setAttribute(el7, "name", "enablepwd");
        dom.setAttribute(el7, "class", "required");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        dom.setAttribute(el7, "for", "shpwd2");
        dom.setAttribute(el7, "style", "\n    cursor: pointer;\n");
        var el8 = dom.createElement("input");
        dom.setAttribute(el8, "type", "checkbox");
        dom.setAttribute(el8, "onclick", "var pass = $(this).parents('div.formRow').find('input.required')[0];pass.type = pass.type === 'password' ? 'text' : 'password';");
        dom.setAttribute(el8, "name", "shpwd2");
        dom.setAttribute(el8, "id", "shpwd2");
        dom.setAttribute(el8, "style", "opacity: 100");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "style", "\n    margin-left: 17px;\n    font-size: smaller;\n");
        var el9 = dom.createTextNode("toggle password");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "formRow");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("Image Name");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "mandatory");
        var el9 = dom.createTextNode("*");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("select");
        dom.setAttribute(el7, "name", "imgname");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("              ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    		");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    	");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "popup2");
        dom.setAttribute(el2, "class", "log-popup-overlay");
        var el3 = dom.createTextNode("\n    	");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "popup-new");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n    		  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "text");
        var el6 = dom.createTextNode("Log");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close-new");
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "src", "/static/netconf/app/images/close.svg");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    		");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("pre");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    		");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    	");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element17 = dom.childAt(fragment, [2]);
        var element18 = dom.childAt(element17, [9, 1]);
        var element19 = dom.childAt(element18, [1, 3]);
        var element20 = dom.childAt(element18, [3, 1]);
        var element21 = dom.childAt(element17, [11, 1, 1, 3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element17, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element17, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element17, [5]), 1, 1);
        morphs[3] = dom.createMorphAt(element17, 7, 7);
        morphs[4] = dom.createElementMorph(element19);
        morphs[5] = dom.createMorphAt(dom.childAt(element20, [7, 3]), 1, 1);
        morphs[6] = dom.createMorphAt(element20, 9, 9);
        morphs[7] = dom.createElementMorph(element21);
        return morphs;
      },
      statements: [["block", "each", [["get", "superSpine", ["loc", [null, [8, 12], [8, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [8, 4], [18, 14]]]], ["block", "each", [["get", "spine", ["loc", [null, [21, 12], [21, 17]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [21, 4], [31, 14]]]], ["block", "each", [["get", "CVX", ["loc", [null, [34, 12], [34, 15]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [34, 4], [44, 14]]]], ["block", "unless", [["get", "isUpdating", ["loc", [null, [46, 12], [46, 22]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [46, 2], [50, 15]]]], ["element", "action", ["close"], [], ["loc", [null, [55, 34], [55, 52]]], 0, 0], ["block", "each", [["get", "imgFiles", ["loc", [null, [86, 24], [86, 32]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [86, 16], [88, 25]]]], ["block", "unless", [["get", "isUpdating", ["loc", [null, [91, 22], [91, 32]]], 0, 0, 0, 0]], [], 8, null, ["loc", [null, [91, 12], [95, 23]]]], ["element", "action", ["close"], [], ["loc", [null, [105, 34], [105, 52]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("netconfig/templates/lanconf/osupdate/updatelist", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 14
            },
            "end": {
              "line": 10,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/updatelist.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-close");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["c_search"], [], ["loc", [null, [9, 21], [9, 42]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 12
              },
              "end": {
                "line": 43,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/osupdate/updatelist.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "timestampdate", [["get", "row.attributes.last_updated", ["loc", [null, [42, 32], [42, 59]]], 0, 0, 0, 0], "Asia/Kolkata"], [], ["loc", [null, [42, 16], [42, 76]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 12
              },
              "end": {
                "line": 45,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/osupdate/updatelist.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 47,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/lanconf/osupdate/updatelist.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element0, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
          morphs[7] = dom.createMorphAt(element0, 13, 13);
          return morphs;
        },
        statements: [["attribute", "ids", ["get", "row.devices", ["loc", [null, [34, 20], [34, 31]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "row.attributes.devices", ["loc", [null, [35, 16], [35, 42]]], 0, 0, 0, 0], ["content", "row.attributes.app_user", ["loc", [null, [36, 16], [36, 43]]], 0, 0, 0, 0], ["content", "row.attributes.device_user", ["loc", [null, [37, 16], [37, 46]]], 0, 0, 0, 0], ["content", "row.attributes.image", ["loc", [null, [38, 16], [38, 40]]], 0, 0, 0, 0], ["content", "row.attributes.status", ["loc", [null, [39, 16], [39, 41]]], 0, 0, 0, 0], ["content", "row.attributes.log", ["loc", [null, [40, 16], [40, 38]]], 0, 0, 0, 0], ["block", "if", [["get", "row.attributes.last_updated", ["loc", [null, [41, 18], [41, 45]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [41, 12], [45, 19]]]]],
        locals: ["row"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/lanconf/osupdate/updatelist.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Upgrade History");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "cmmt_s");
        var el5 = dom.createTextNode("\n\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "class", "s_bar");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "id", "cmmt_s");
        dom.setAttribute(el5, "placeholder", "search");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-search");
        dom.setAttribute(el5, "aria-hidden", "true");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n     ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "addbtn");
        dom.setAttribute(el2, "style", "position:unset;");
        var el3 = dom.createTextNode("Export History");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "width", "100%");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "class", "table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Devices");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("App User");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Device User");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("image");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Result");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Remarks");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Updated time");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1, 3, 1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [5]);
        var element6 = dom.childAt(element2, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element4, 'oninput');
        morphs[1] = dom.createMorphAt(element3, 3, 3);
        morphs[2] = dom.createElementMorph(element5);
        morphs[3] = dom.createElementMorph(element6);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "oninput", ["subexpr", "action", ["search"], [], ["loc", [null, [null, null], [7, 62]]], 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "c_search", ["loc", [null, [8, 20], [8, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 14], [10, 21]]]], ["element", "action", ["search"], [], ["loc", [null, [11, 17], [11, 36]]], 0, 0], ["element", "action", ["csvdownld", ["get", "item", ["loc", [null, [16, 35], [16, 39]]], 0, 0, 0, 0]], [], ["loc", [null, [16, 14], [16, 41]]], 0, 0], ["block", "each", [["get", "content", ["loc", [null, [33, 18], [33, 25]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [33, 10], [47, 19]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/lanconf/wanaccesslist/extended", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            dom.setAttribute(el1, "style", "display:inline-block;");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "name", "hosts");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "href", "javascript:void(0);");
            var el2 = dom.createTextNode("View Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element15 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element15, [4]), [], true);
            }
            var element16 = dom.childAt(element15, [4]);
            var element17 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element15, 0, 0);
            morphs[1] = dom.createMorphAt(element15, 2, 2);
            morphs[2] = dom.createAttrMorph(element16, 'value');
            morphs[3] = dom.createElementMorph(element17);
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [30, 66], [30, 75]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [30, 77], [30, 86]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [30, 132], [30, 137]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfiguration", ["get", "r", ["loc", [null, [31, 100], [31, 101]]], 0, 0, 0, 0]], [], ["loc", [null, [31, 71], [31, 103]]], 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers with this AccessList ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "style", "color:red");
          var el4 = dom.createTextNode("(Please be careful with sequence number)");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithacl", ["loc", [null, [29, 16], [29, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 8], [32, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 8
              },
              "end": {
                "line": 40,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "name", "hosts");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element13 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element13, [4]), [], true);
            }
            var element14 = dom.childAt(element13, [4]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element13, 0, 0);
            morphs[1] = dom.createMorphAt(element13, 2, 2);
            morphs[2] = dom.createAttrMorph(element14, 'value');
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [39, 36], [39, 45]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [39, 47], [39, 56]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [39, 102], [39, 107]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers without this AccessList (New access list will be created)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithoutacl", ["loc", [null, [38, 16], [38, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [38, 8], [40, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 68,
                  "column": 18
                },
                "end": {
                  "line": 70,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element9, 'value');
              morphs[1] = dom.createMorphAt(element9, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [69, 39], [69, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [69, 82], [69, 90]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 67,
                "column": 14
              },
              "end": {
                "line": 71,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "action", ["loc", [null, [68, 26], [68, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [68, 18], [70, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 75,
                "column": 16
              },
              "end": {
                "line": 77,
                "column": 18
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "style", "text-transform: capitalize");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element8, 'value');
            morphs[1] = dom.createMorphAt(element8, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [76, 39], [76, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [76, 82], [76, 90]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 85,
                  "column": 18
                },
                "end": {
                  "line": 87,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element6 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element6, 'value');
              morphs[1] = dom.createMorphAt(element6, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item.value", ["loc", [null, [86, 39], [86, 49]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.label", ["loc", [null, [86, 88], [86, 102]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 12
              },
              "end": {
                "line": 91,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("select");
            dom.setAttribute(el2, "name", "srcoperator");
            dom.setAttribute(el2, "class", "seqprotocol");
            dom.setAttribute(el2, "style", "text-transform: capitalize; width:100px;");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "class", "acltext");
            dom.setAttribute(el2, "type", "text");
            dom.setAttribute(el2, "name", "srcport");
            dom.setAttribute(el2, "disabled", "");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element7);
            morphs[1] = dom.createMorphAt(element7, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["checksrcopr", ["get", "conf.id", ["loc", [null, [84, 135], [84, 142]]], 0, 0, 0, 0]], ["on", "change"], ["loc", [null, [84, 112], [84, 156]]], 0, 0], ["block", "each", [["get", "operators", ["loc", [null, [85, 26], [85, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [85, 18], [87, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 12
              },
              "end": {
                "line": 93,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 99,
                  "column": 18
                },
                "end": {
                  "line": 101,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element4, 'value');
              morphs[1] = dom.createMorphAt(element4, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item.value", ["loc", [null, [100, 39], [100, 49]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.label", ["loc", [null, [100, 88], [100, 102]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 96,
                "column": 12
              },
              "end": {
                "line": 105,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n                 ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("select");
            dom.setAttribute(el2, "name", "dstoperator");
            dom.setAttribute(el2, "class", "seqprotocol");
            dom.setAttribute(el2, "style", "text-transform: capitalize; width:100px;");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "class", "acltext");
            dom.setAttribute(el2, "type", "text");
            dom.setAttribute(el2, "name", "dstport");
            dom.setAttribute(el2, "disabled", "");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element5);
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["checkdstopr", ["get", "conf.id", ["loc", [null, [98, 136], [98, 143]]], 0, 0, 0, 0]], ["on", "change"], ["loc", [null, [98, 113], [98, 157]]], 0, 0], ["block", "each", [["get", "operators", ["loc", [null, [99, 26], [99, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [99, 18], [101, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 105,
                "column": 12
              },
              "end": {
                "line": 107,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("-");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child6 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 111,
                  "column": 18
                },
                "end": {
                  "line": 113,
                  "column": 18
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element3, 'value');
              morphs[1] = dom.createMorphAt(element3, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [112, 39], [112, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [112, 47], [112, 55]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 14
              },
              "end": {
                "line": 114,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "log", ["loc", [null, [111, 26], [111, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [111, 18], [113, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "seqRow");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "class", "aclno");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "seqno");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("select");
          dom.setAttribute(el3, "name", "protocol");
          dom.setAttribute(el3, "class", "seqprotocol");
          dom.setAttribute(el3, "style", "text-transform: capitalize; width:80px;");
          dom.setAttribute(el3, "placeholder", "Select protocol..");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "text");
          dom.setAttribute(el3, "name", "srcaddr");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "srccidr");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "text");
          dom.setAttribute(el3, "name", "dstaddr");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "dstcidr");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.setAttribute(el3, "class", "acltext required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-trash R");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1]);
          var element11 = dom.childAt(element10, [5, 1]);
          var element12 = dom.childAt(element10, [21, 0]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element10, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
          morphs[2] = dom.createElementMorph(element11);
          morphs[3] = dom.createMorphAt(element11, 1, 1);
          morphs[4] = dom.createMorphAt(element10, 11, 11);
          morphs[5] = dom.createMorphAt(element10, 17, 17);
          morphs[6] = dom.createMorphAt(dom.childAt(element10, [19]), 1, 1);
          morphs[7] = dom.createElementMorph(element12);
          return morphs;
        },
        statements: [["attribute", "ids", ["get", "conf.id", ["loc", [null, [64, 35], [64, 42]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "ember-chosen", [], ["name", "action", "placeholder", "Select Action", "style", "text-transform: capitalize"], 0, null, ["loc", [null, [67, 14], [71, 31]]]], ["element", "action", ["checkprotocol", ["get", "conf.id", ["loc", [null, [74, 163], [74, 170]]], 0, 0, 0, 0]], ["on", "change"], ["loc", [null, [74, 138], [74, 184]]], 0, 0], ["block", "each", [["get", "protocol", ["loc", [null, [75, 24], [75, 32]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [75, 16], [77, 27]]]], ["block", "if", [["get", "conf.hidepcl", ["loc", [null, [82, 18], [82, 30]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [82, 12], [93, 19]]]], ["block", "if", [["get", "conf.hidepcl", ["loc", [null, [96, 18], [96, 30]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [96, 12], [107, 19]]]], ["block", "ember-chosen", [], ["name", "log", "placeholder", "Select log"], 6, null, ["loc", [null, [109, 14], [114, 31]]]], ["element", "action", ["delSeqRow", ["get", "conf", ["loc", [null, [116, 62], [116, 66]]], 0, 0, 0, 0]], [], ["loc", [null, [116, 41], [116, 68]]], 0, 0]],
        locals: ["conf"],
        templates: [child0, child1, child2, child3, child4, child5, child6]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 98
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["isPrim", false, "type", "reset", "action", "cancel", "label", "Cancel"], ["loc", [null, [125, 26], [125, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popup-model active");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "popup-model-container");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-header");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h1");
          var el5 = dom.createTextNode("Configuration of ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "popup-model-close");
          var el5 = dom.createTextNode("×");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-content");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("pre");
          dom.setAttribute(el4, "style", "font-size:13px;");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
          return morphs;
        },
        statements: [["content", "configurationData.name", ["loc", [null, [133, 31], [133, 57]]], 0, 0, 0, 0], ["element", "action", ["closePopup"], [], ["loc", [null, [134, 39], [134, 62]]], 0, 0], ["content", "configurationData.output", ["loc", [null, [138, 16], [138, 44]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 145,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/wanaccesslist/extended.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode(" Access List - Configuration ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "extacl");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("AccessList type ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "acltype");
        dom.setAttribute(el5, "value", "extendedACL");
        dom.setAttribute(el5, "style", "text-transform: capitalize");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("AccessList Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" \n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "aclname");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Approver");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "approver_email");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "config_comment");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table extdAcl");
        dom.setAttribute(el3, "width", "100%");
        dom.setAttribute(el3, "cellpadding", "0");
        dom.setAttribute(el3, "cellspacing", "0");
        dom.setAttribute(el3, "border", "0");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Seq No");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Action");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Protocol");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Address");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Netmask");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Operator");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Source Port");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Address");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Netmask");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Operator");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Destn Port");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Log");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "cursor: pointer");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-plus-circle R");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("ADD SEQUENCE");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element18 = dom.childAt(fragment, [2]);
        var element19 = dom.childAt(element18, [1]);
        var element20 = dom.childAt(element19, [8, 1]);
        var element21 = dom.childAt(element19, [10]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element19, 3, 3);
        morphs[1] = dom.createMorphAt(element19, 4, 4);
        morphs[2] = dom.createMorphAt(dom.childAt(element19, [6, 3]), 1, 1);
        morphs[3] = dom.createElementMorph(element20);
        morphs[4] = dom.createMorphAt(element21, 1, 1);
        morphs[5] = dom.createMorphAt(element21, 3, 3);
        morphs[6] = dom.createMorphAt(element18, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "hostwithacl", ["loc", [null, [26, 10], [26, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [26, 4], [34, 11]]]], ["block", "if", [["get", "hostwithoutacl", ["loc", [null, [35, 10], [35, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [35, 4], [42, 11]]]], ["block", "each", [["get", "config", ["loc", [null, [63, 16], [63, 22]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [63, 8], [118, 17]]]], ["element", "action", ["addSeqRow"], [], ["loc", [null, [122, 12], [122, 34]]], 0, 0], ["block", "unless", [["get", "isSaving", ["loc", [null, [125, 16], [125, 24]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [125, 6], [125, 109]]]], ["inline", "bs-primary", [], ["action", "aextacl", "label", "Apply", "loadingTxt", "Applying..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [126, 84], [126, 92]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [126, 6], [126, 94]]], 0, 0], ["block", "if", [["get", "isShowConfig", ["loc", [null, [129, 8], [129, 20]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [129, 2], [143, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/lanconf/wanaccesslist/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 12
              },
              "end": {
                "line": 15,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "style", "text-transform: capitalize");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element11 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element11, 'value');
            morphs[1] = dom.createMorphAt(element11, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [14, 33], [14, 37]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [14, 76], [14, 84]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 8
            },
            "end": {
              "line": 16,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "types", ["loc", [null, [13, 20], [13, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [13, 12], [15, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 8
              },
              "end": {
                "line": 29,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element10 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element10, 'value');
            morphs[1] = dom.createMorphAt(element10, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "dc", ["loc", [null, [28, 27], [28, 29]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "dc", ["loc", [null, [28, 33], [28, 39]]], 0, 0, 0, 0]],
          locals: ["dc", "pods"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each-in", [["get", "content.routers", ["loc", [null, [27, 19], [27, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [27, 8], [29, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 8
                },
                "end": {
                  "line": 47,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element9, 'value');
              morphs[1] = dom.createMorphAt(element9, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [46, 27], [46, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [46, 35], [46, 43]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 6
              },
              "end": {
                "line": 48,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "content.approver", ["loc", [null, [45, 16], [45, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [45, 8], [47, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Approver");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "mandatory");
          var el4 = dom.createTextNode("*");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["name", "approver_email", "placeholder", "Select Approver Email"], 0, null, ["loc", [null, [44, 6], [48, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formAct");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["action", "getlogin", "label", "Next"], ["loc", [null, [59, 8], [59, 53]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 16
                },
                "end": {
                  "line": 73,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "checklabel");
              var el3 = dom.createTextNode("  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" [");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("]");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("input");
              dom.setAttribute(el3, "type", "checkbox");
              dom.setAttribute(el3, "name", "router");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "checkmark");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1, 0]);
              var element6 = dom.childAt(element5, [5]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element5, 1, 1);
              morphs[1] = dom.createMorphAt(element5, 3, 3);
              morphs[2] = dom.createAttrMorph(element6, 'value');
              return morphs;
            },
            statements: [["content", "ip.name", ["loc", [null, [72, 60], [72, 71]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [72, 73], [72, 84]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [72, 131], [72, 138]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [72, 143], [72, 150]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
            locals: ["ip"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 66,
                "column": 8
              },
              "end": {
                "line": 77,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "routers-pod-name");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createTextNode("        \n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "class", "checklabel");
            var el4 = dom.createElement("input");
            dom.setAttribute(el4, "type", "checkbox");
            dom.setAttribute(el4, "name", "routername");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "checkmark");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("b");
            var el5 = dom.createTextNode("Routers in Pod");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "mandatory");
            var el6 = dom.createTextNode("*");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "class", "router-pod-list");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("  \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1, 1]);
            var element8 = dom.childAt(element7, [1, 0]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element8, 'value');
            morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [69, 90], [69, 97]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [69, 102], [69, 109]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "podhosts", ["loc", [null, [71, 24], [71, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [71, 16], [73, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "routers-pod-name");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "checklabel");
              var el4 = dom.createElement("input");
              dom.setAttribute(el4, "type", "checkbox");
              dom.setAttribute(el4, "name", "routername");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "checkmark");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("         \n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "router-pod-list");
              var el4 = dom.createTextNode("\n                      \n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("li");
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "checklabel");
              var el6 = dom.createTextNode("  ");
              dom.appendChild(el5, el6);
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode(" [");
              dom.appendChild(el5, el6);
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("]");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("input");
              dom.setAttribute(el6, "type", "checkbox");
              dom.setAttribute(el6, "name", "router");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("span");
              dom.setAttribute(el6, "class", "checkmark");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                      \n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element1, [0]);
              var element3 = dom.childAt(element0, [3, 1, 0]);
              var element4 = dom.childAt(element3, [5]);
              var morphs = new Array(5);
              morphs[0] = dom.createAttrMorph(element2, 'value');
              morphs[1] = dom.createMorphAt(element1, 3, 3);
              morphs[2] = dom.createMorphAt(element3, 1, 1);
              morphs[3] = dom.createMorphAt(element3, 3, 3);
              morphs[4] = dom.createAttrMorph(element4, 'value');
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "j.0", ["loc", [null, [82, 96], [82, 101]]], 0, 0, 0, 0], ",", ["get", "j.1", ["loc", [null, [82, 106], [82, 111]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "j.1", ["loc", [null, [82, 147], [82, 156]]], 0, 0, 0, 0], ["content", "j.0", ["loc", [null, [85, 66], [85, 75]]], 0, 0, 0, 0], ["content", "j.1", ["loc", [null, [85, 77], [85, 86]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "j.0", ["loc", [null, [85, 133], [85, 138]]], 0, 0, 0, 0], ",", ["get", "j.1", ["loc", [null, [85, 143], [85, 148]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
            locals: ["j"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 8
              },
              "end": {
                "line": 91,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "style", "font-weight: bold");
            var el2 = dom.createTextNode("Routers");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "mandatory");
            var el3 = dom.createTextNode("*");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "wandata", ["loc", [null, [79, 18], [79, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [79, 10], [90, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isSspine", ["loc", [null, [66, 14], [66, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [66, 8], [91, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 121,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/wanaccesslist/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("WAN Access List");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "alconf");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Type");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Name");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "aclname");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    \n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Data Center");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "mandatory");
        var el7 = dom.createTextNode("*");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "config_comment");
        dom.setAttribute(el5, "placeholder", "Enter configuration comment");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element12 = dom.childAt(fragment, [2]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element12, [5, 1]);
        var element16 = dom.childAt(element15, [1, 1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element14, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element14, [5]), 3, 3);
        morphs[2] = dom.createMorphAt(element14, 7, 7);
        morphs[3] = dom.createMorphAt(element13, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element12, [3, 1]), 1, 1);
        morphs[5] = dom.createElementMorph(element16);
        morphs[6] = dom.createMorphAt(dom.childAt(element15, [3, 7]), 1, 1);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["style", "text-transform: capitalize", "name", "acltype", "placeholder", "Select Access list type", "class", "required"], 0, null, ["loc", [null, [11, 8], [16, 25]]]], ["block", "ember-chosen", [], ["action", "setdc", "name", "dc", "placeholder", "Select Data Center"], 1, null, ["loc", [null, [25, 6], [30, 23]]]], ["block", "unless", [["get", "content.isAdminAccount", ["loc", [null, [41, 14], [41, 36]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [41, 4], [50, 15]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [57, 10], [57, 27]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [57, 4], [61, 11]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [65, 12], [65, 29]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [65, 6], [92, 13]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [98, 28], [98, 52]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [115, 88], [115, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [115, 10], [115, 99]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/lanconf/wanaccesslist/standard", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            dom.setAttribute(el1, "style", "display:inline-block;");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "href", "javascript:void(0);");
            var el2 = dom.createTextNode("View Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element9, [4]), [], true);
            }
            var element10 = dom.childAt(element9, [4]);
            var element11 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element9, 0, 0);
            morphs[1] = dom.createMorphAt(element9, 2, 2);
            morphs[2] = dom.createAttrMorph(element10, 'value');
            morphs[3] = dom.createElementMorph(element11);
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [30, 66], [30, 75]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [30, 77], [30, 86]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [30, 119], [30, 124]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfiguration", ["get", "r", ["loc", [null, [31, 100], [31, 101]]], 0, 0, 0, 0]], [], ["loc", [null, [31, 71], [31, 103]]], 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers with this Access List ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "style", "color:red");
          var el4 = dom.createTextNode("(Please be careful with sequence number)");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithacl", ["loc", [null, [29, 16], [29, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 8], [32, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 8
              },
              "end": {
                "line": 40,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "checklabel");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" [");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("]");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "type", "checkbox");
            dom.setAttribute(el2, "checked", "");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "checkmark");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(dom.childAt(element7, [4]), [], true);
            }
            var element8 = dom.childAt(element7, [4]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element7, 0, 0);
            morphs[1] = dom.createMorphAt(element7, 2, 2);
            morphs[2] = dom.createAttrMorph(element8, 'value');
            return morphs;
          },
          statements: [["content", "r.0", ["loc", [null, [39, 37], [39, 46]]], 0, 0, 0, 0], ["content", "r.1", ["loc", [null, [39, 48], [39, 57]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "r.1", ["loc", [null, [39, 90], [39, 95]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: ["r"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Routers without this AccessList (New access list will be created)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "each", [["get", "hostwithoutacl", ["loc", [null, [38, 16], [38, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [38, 8], [40, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 61,
                  "column": 16
                },
                "end": {
                  "line": 63,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              dom.setAttribute(el1, "style", "text-transform: capitalize");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element4, 'value');
              morphs[1] = dom.createMorphAt(element4, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [62, 35], [62, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [62, 78], [62, 86]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 14
              },
              "end": {
                "line": 64,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "action", ["loc", [null, [61, 24], [61, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [61, 16], [63, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 16
                },
                "end": {
                  "line": 73,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element3, 'value');
              morphs[1] = dom.createMorphAt(element3, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [72, 35], [72, 39]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [72, 43], [72, 51]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 69,
                "column": 14
              },
              "end": {
                "line": 74,
                "column": 14
              }
            },
            "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "log", ["loc", [null, [71, 24], [71, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [71, 16], [73, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1, "class", "seqRow");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "seqno");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "text");
          dom.setAttribute(el3, "name", "addr");
          dom.setAttribute(el3, "class", "required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3, "type", "number");
          dom.setAttribute(el3, "name", "cidr");
          dom.setAttribute(el3, "min", "1");
          dom.setAttribute(el3, "oninput", "validity.valid||(value='');");
          dom.setAttribute(el3, "class", "required");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-trash R");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var element6 = dom.childAt(element5, [11, 0]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element5, [9]), 1, 1);
          morphs[2] = dom.createElementMorph(element6);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["name", "action", "style", "text-transform: capitalize", "placeholder", "Select Action", "class", "required"], 0, null, ["loc", [null, [60, 14], [64, 31]]]], ["block", "ember-chosen", [], ["name", "log", "placeholder", "Select log"], 1, null, ["loc", [null, [69, 14], [74, 31]]]], ["element", "action", ["delSeqRow", ["get", "conf", ["loc", [null, [76, 62], [76, 66]]], 0, 0, 0, 0]], [], ["loc", [null, [76, 41], [76, 68]]], 0, 0]],
        locals: ["conf"],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 98
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["isPrim", false, "type", "reset", "action", "cancel", "label", "Cancel"], ["loc", [null, [85, 26], [85, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 103,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popup-model active");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "popup-model-container");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-header");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h1");
          var el5 = dom.createTextNode("Configuration of ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "popup-model-close");
          var el5 = dom.createTextNode("×");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popup-model-content");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("pre");
          dom.setAttribute(el4, "style", "font-size:13px;");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
          return morphs;
        },
        statements: [["content", "configurationData.name", ["loc", [null, [93, 31], [93, 57]]], 0, 0, 0, 0], ["element", "action", ["closePopup"], [], ["loc", [null, [94, 39], [94, 62]]], 0, 0], ["content", "configurationData.output", ["loc", [null, [98, 16], [98, 44]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 104,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/lanconf/wanaccesslist/standard.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode(" Access List - Configuration ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "stdconf");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Type ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "acltype");
        dom.setAttribute(el5, "value", "standardACL");
        dom.setAttribute(el5, "style", "text-transform: capitalize");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Access List Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "aclname");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Approver");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "approver_email");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "config_comment");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table");
        dom.setAttribute(el3, "width", "100%");
        dom.setAttribute(el3, "cellpadding", "0");
        dom.setAttribute(el3, "cellspacing", "0");
        dom.setAttribute(el3, "border", "0");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Seq NO");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Action");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("IP Address");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Netmask");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Log");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "cursor: pointer");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-plus-circle R");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("ADD SEQUENCE");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element12 = dom.childAt(fragment, [2]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element13, [8, 1]);
        var element15 = dom.childAt(element13, [10]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element13, 3, 3);
        morphs[1] = dom.createMorphAt(element13, 4, 4);
        morphs[2] = dom.createMorphAt(dom.childAt(element13, [6, 3]), 1, 1);
        morphs[3] = dom.createElementMorph(element14);
        morphs[4] = dom.createMorphAt(element15, 1, 1);
        morphs[5] = dom.createMorphAt(element15, 3, 3);
        morphs[6] = dom.createMorphAt(element12, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "hostwithacl", ["loc", [null, [26, 10], [26, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [26, 4], [34, 11]]]], ["block", "if", [["get", "hostwithoutacl", ["loc", [null, [35, 10], [35, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [35, 4], [42, 11]]]], ["block", "each", [["get", "config", ["loc", [null, [56, 16], [56, 22]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [56, 8], [78, 17]]]], ["element", "action", ["addSeqRow"], [], ["loc", [null, [82, 12], [82, 34]]], 0, 0], ["block", "unless", [["get", "isSaving", ["loc", [null, [85, 16], [85, 24]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [85, 6], [85, 109]]]], ["inline", "bs-primary", [], ["action", "astdacl", "label", "Apply", "loadingTxt", "Applying..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [86, 84], [86, 92]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [86, 6], [86, 94]]], 0, 0], ["block", "if", [["get", "isShowConfig", ["loc", [null, [89, 8], [89, 20]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [89, 2], [103, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/lanconf/wancicd/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 8
              },
              "end": {
                "line": 14,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element18 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element18, 'value');
            morphs[1] = dom.createMorphAt(element18, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "dc", ["loc", [null, [13, 27], [13, 29]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "dc", ["loc", [null, [13, 33], [13, 39]]], 0, 0, 0, 0]],
          locals: ["dc", "pods"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 15,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each-in", [["get", "content.routers", ["loc", [null, [12, 19], [12, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 8], [14, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 8
              },
              "end": {
                "line": 24,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element17 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element17, 'value');
            morphs[1] = dom.createMorphAt(element17, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [23, 27], [23, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [23, 35], [23, 43]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.approver", ["loc", [null, [22, 16], [22, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [22, 8], [24, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 12
            },
            "end": {
              "line": 43,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "style", "line-height: 14px;font-size:15px;overflow:hidden");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element16 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element16, 'value');
          morphs[1] = dom.createMorphAt(element16, 0, 0);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["get", "features", ["loc", [null, [42, 88], [42, 96]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "features", ["loc", [null, [42, 100], [42, 112]]], 0, 0, 0, 0]],
        locals: ["features"],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 87,
                "column": 12
              },
              "end": {
                "line": 89,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element15 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element15, 'value');
            morphs[1] = dom.createMorphAt(element15, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "custom_template", ["loc", [null, [88, 31], [88, 46]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "custom_template", ["loc", [null, [88, 50], [88, 69]]], 0, 0, 0, 0]],
          locals: ["custom_template"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 10
            },
            "end": {
              "line": 90,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "None");
          var el2 = dom.createTextNode("None");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content.custom_template", ["loc", [null, [87, 20], [87, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [87, 12], [89, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 128,
                    "column": 16
                  },
                  "end": {
                    "line": 130,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "style", "display: flex;flex-direction:row;");
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "checklabel");
                dom.setAttribute(el2, "style", "padding-right: 19px;");
                var el3 = dom.createTextNode("  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("input");
                dom.setAttribute(el3, "type", "checkbox");
                dom.setAttribute(el3, "name", "router");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "checkmark");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("a");
                dom.setAttribute(el2, "style", "cursor: pointer;");
                var el3 = dom.createTextNode("[");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("]");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element9 = dom.childAt(fragment, [1]);
                var element10 = dom.childAt(element9, [0]);
                var element11 = dom.childAt(element10, [3]);
                var element12 = dom.childAt(element9, [2]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(element10, 1, 1);
                morphs[1] = dom.createAttrMorph(element11, 'value');
                morphs[2] = dom.createElementMorph(element12);
                morphs[3] = dom.createMorphAt(element12, 1, 1);
                return morphs;
              },
              statements: [["content", "ip.name", ["loc", [null, [129, 131], [129, 142]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [129, 189], [129, 196]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [129, 201], [129, 208]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfigLogin", ["get", "ip.host", ["loc", [null, [129, 283], [129, 290]]], 0, 0, 0, 0]], [], ["loc", [null, [129, 255], [129, 293]]], 0, 0], ["content", "ip.host", ["loc", [null, [129, 320], [129, 331]]], 0, 0, 0, 0]],
              locals: ["ip"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 123,
                  "column": 8
                },
                "end": {
                  "line": 134,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "routers-pod-name");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("        \n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "checklabel");
              var el4 = dom.createElement("input");
              dom.setAttribute(el4, "type", "checkbox");
              dom.setAttribute(el4, "name", "routername");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "checkmark");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("b");
              var el5 = dom.createTextNode("WAN Devices");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "mandatory");
              var el6 = dom.createTextNode("*");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "router-pod-list");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("  \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element13 = dom.childAt(fragment, [1, 1]);
              var element14 = dom.childAt(element13, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element14, 'value');
              morphs[1] = dom.createMorphAt(dom.childAt(element13, [3]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [126, 90], [126, 97]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [126, 102], [126, 109]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "podhosts", ["loc", [null, [128, 24], [128, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [128, 16], [130, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.9.1",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 141,
                      "column": 22
                    },
                    "end": {
                      "line": 143,
                      "column": 22
                    }
                  },
                  "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "style", "display: flex;flex-direction:row;");
                  var el2 = dom.createElement("label");
                  dom.setAttribute(el2, "class", "checklabel");
                  dom.setAttribute(el2, "style", "padding-right: 19px;");
                  var el3 = dom.createTextNode("  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("input");
                  dom.setAttribute(el3, "type", "checkbox");
                  dom.setAttribute(el3, "name", "router");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "checkmark");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("a");
                  dom.setAttribute(el2, "style", "cursor: pointer;");
                  var el3 = dom.createTextNode("[");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("]");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var element3 = dom.childAt(element2, [0]);
                  var element4 = dom.childAt(element3, [3]);
                  var element5 = dom.childAt(element2, [2]);
                  var morphs = new Array(5);
                  morphs[0] = dom.createMorphAt(element3, 1, 1);
                  morphs[1] = dom.createAttrMorph(element4, 'data-router');
                  morphs[2] = dom.createAttrMorph(element4, 'value');
                  morphs[3] = dom.createElementMorph(element5);
                  morphs[4] = dom.createMorphAt(element5, 1, 1);
                  return morphs;
                },
                statements: [["content", "ip.name", ["loc", [null, [142, 138], [142, 149]]], 0, 0, 0, 0], ["attribute", "data-router", ["concat", [["get", "key", ["loc", [null, [142, 188], [142, 191]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [142, 218], [142, 225]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [142, 230], [142, 237]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["showConfigLogin", ["get", "ip.host", ["loc", [null, [142, 312], [142, 319]]], 0, 0, 0, 0]], [], ["loc", [null, [142, 284], [142, 322]]], 0, 0], ["content", "ip.host", ["loc", [null, [142, 349], [142, 360]]], 0, 0, 0, 0]],
                locals: ["ip"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 136,
                    "column": 10
                  },
                  "end": {
                    "line": 147,
                    "column": 10
                  }
                },
                "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1, "class", "routers-pod-name");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("label");
                dom.setAttribute(el3, "class", "checklabel");
                var el4 = dom.createElement("input");
                dom.setAttribute(el4, "type", "checkbox");
                dom.setAttribute(el4, "name", "routername");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "checkmark");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("         \n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("ul");
                dom.setAttribute(el3, "class", "router-pod-list");
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                    ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element6 = dom.childAt(fragment, [1, 1]);
                var element7 = dom.childAt(element6, [1]);
                var element8 = dom.childAt(element7, [0]);
                var morphs = new Array(4);
                morphs[0] = dom.createAttrMorph(element8, 'data-router');
                morphs[1] = dom.createAttrMorph(element8, 'value');
                morphs[2] = dom.createMorphAt(element7, 3, 3);
                morphs[3] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
                return morphs;
              },
              statements: [["attribute", "data-router", ["concat", [["get", "key", ["loc", [null, [139, 84], [139, 87]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [139, 118], [139, 125]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [139, 130], [139, 137]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "key", ["loc", [null, [139, 173], [139, 180]]], 0, 0, 0, 0], ["block", "each", [["get", "value", ["loc", [null, [141, 30], [141, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [141, 22], [143, 31]]]]],
              locals: ["key", "value"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 134,
                  "column": 8
                },
                "end": {
                  "line": 148,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              dom.setAttribute(el1, "style", "font-weight: bold");
              var el2 = dom.createTextNode("WAN Devices");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "mandatory");
              var el3 = dom.createTextNode("*");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each-in", [["get", "podhosts", ["loc", [null, [136, 21], [136, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [136, 10], [147, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 122,
                "column": 8
              },
              "end": {
                "line": 149,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isSspine", ["loc", [null, [123, 14], [123, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [123, 8], [148, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isRouterConnected", ["loc", [null, [122, 18], [122, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [122, 8], [149, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 173,
              "column": 6
            },
            "end": {
              "line": 178,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "title");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "close");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-close");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "val");
          var el3 = dom.createTextNode("Get Configuration");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["close_popup"], [], ["loc", [null, [175, 28], [175, 52]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "title");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "close");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-close");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "val");
          var el3 = dom.createTextNode("Router Login");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["close_popup"], [], ["loc", [null, [180, 28], [180, 52]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formAct");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["action", "showConfig", "label", "Fetch", "loadingTxt", "Fetching Data...", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [199, 97], [199, 106]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [199, 10], [199, 108]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 205,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formAct");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [203, 88], [203, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [203, 10], [203, 99]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 215,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/wancicd/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("WAN CI/CD");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content-container");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "key-box");
        var el5 = dom.createTextNode("Data Center");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        dom.setAttribute(el4, "class", "key-box");
        dom.setAttribute(el4, "for", "choose");
        var el5 = dom.createTextNode("Pipeline Approver");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    \n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "key-box");
        var el5 = dom.createTextNode("Configuration Comment");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "type", "text");
        dom.setAttribute(el4, "name", "config_comment");
        dom.setAttribute(el4, "placeholder", "Enter configuration comment");
        dom.setAttribute(el4, "class", "value-box required");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n  \n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        dom.setAttribute(el3, "name", "conf_type");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        dom.setAttribute(el4, "class", "key-box");
        dom.setAttribute(el4, "for", "choose");
        var el5 = dom.createTextNode("Configuration Type");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "typeDiv");
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("select");
        dom.setAttribute(el5, "action", "onTypeChange");
        dom.setAttribute(el5, "style", "text-transform: capitalize");
        dom.setAttribute(el5, "name", "type");
        dom.setAttribute(el5, "aria-placeholder", "Type");
        dom.setAttribute(el5, "class", "newSele");
        var el6 = dom.createTextNode("\n             ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("option");
        dom.setAttribute(el6, "value", "");
        dom.setAttribute(el6, "disabled", "");
        dom.setAttribute(el6, "selected", "");
        dom.setAttribute(el6, "hidden", "");
        var el7 = dom.createTextNode("Type");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("    ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "downArrow");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "checklabel");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "lan-action");
        var el6 = dom.createTextNode("Custom Config");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "checkmark");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    \n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "customYaml");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "style", "display: flex;flex-direction:row;");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "textAreaTitle");
        var el7 = dom.createTextNode("YAML DATA");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "docTitle");
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "style", "color: black;");
        dom.setAttribute(el7, "href", "https://ab1-netops-git.zohonoc.com/netops/project_cicd/-/tree/main/build/examples");
        dom.setAttribute(el7, "target", "_blank");
        var el8 = dom.createTextNode(" Examples ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n        ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n         ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "id", "container");
        dom.setAttribute(el5, "class", "txtEditor");
        dom.setAttribute(el5, "name", "yamldata");
        dom.setAttribute(el5, "style", "height:550px;font-size:16px");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("         ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "customYaml");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "style", "display: flex;flex-direction:row;");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "textAreaTitle");
        dom.setAttribute(el6, "style", "margin-right: 10px;");
        var el7 = dom.createTextNode("JINJA TEMPLATE");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n         ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "id", "container2");
        dom.setAttribute(el5, "class", "txtEditor");
        dom.setAttribute(el5, "name", "jinjadata");
        dom.setAttribute(el5, "style", "height:550px;font-size:16px");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                  \n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        dom.setAttribute(el5, "name", "new_template_name_div");
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "key-box");
        var el7 = dom.createTextNode("Create (Enter template name)");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "template_name");
        dom.setAttribute(el6, "placeholder", "Enter template name");
        dom.setAttribute(el6, "class", "value-box required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n         ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "form-container");
        var el4 = dom.createTextNode("    \n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" \n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    	  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cicd_config");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n		");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5, "class", "conf_title_display");
        var el6 = dom.createTextNode("Configuration of ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "conf-refresh");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-refresh");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n		  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "close cicd");
        var el6 = dom.createTextNode("×");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createTextNode("\n			    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("	");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindivcicd");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element19 = dom.childAt(fragment, [2]);
        var element20 = dom.childAt(element19, [1]);
        var element21 = dom.childAt(element20, [7, 3, 1]);
        var element22 = dom.childAt(element20, [12]);
        var element23 = dom.childAt(element19, [3]);
        var element24 = dom.childAt(element23, [3]);
        var element25 = dom.childAt(element24, [1]);
        var element26 = dom.childAt(element25, [3, 1]);
        var element27 = dom.childAt(element25, [5]);
        var element28 = dom.childAt(element19, [5, 1]);
        var morphs = new Array(15);
        morphs[0] = dom.createMorphAt(dom.childAt(element20, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element20, [3]), 3, 3);
        morphs[2] = dom.createElementMorph(element21);
        morphs[3] = dom.createMorphAt(element21, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element20, [9, 1]), 1, 1);
        morphs[5] = dom.createAttrMorph(element22, 'class');
        morphs[6] = dom.createMorphAt(dom.childAt(element22, [3, 1]), 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element20, [17]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element23, [1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element25, [1]), 1, 1);
        morphs[10] = dom.createElementMorph(element26);
        morphs[11] = dom.createElementMorph(element27);
        morphs[12] = dom.createMorphAt(dom.childAt(element24, [4]), 1, 1);
        morphs[13] = dom.createMorphAt(element28, 1, 1);
        morphs[14] = dom.createMorphAt(dom.childAt(element28, [3]), 7, 7);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["action", "setdc", "class", "value-box", "name", "dc", "placeholder", "Select Data Center"], 0, null, ["loc", [null, [10, 6], [15, 23]]]], ["block", "ember-chosen", [], ["name", "approver_email", "class", "selected", "placeholder", "Select Approver Email"], 1, null, ["loc", [null, [20, 6], [25, 23]]]], ["element", "action", ["onTypeChange"], [], ["loc", [null, [39, 34], [39, 59]]], 0, 0], ["block", "each", [["get", "content.features", ["loc", [null, [41, 20], [41, 36]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [41, 12], [43, 19]]]], ["inline", "input", [], ["name", "cusTogg", "type", "checkbox", "change", ["subexpr", "action", ["customToggle"], [], ["loc", [null, [57, 58], [57, 81]]], 0, 0]], ["loc", [null, [57, 12], [57, 83]]], 0, 0], ["attribute", "class", ["concat", ["customDiv ", ["subexpr", "if", [["get", "showCustomDiv", ["loc", [null, [68, 31], [68, 44]]], 0, 0, 0, 0], "", "dnonewan"], [], ["loc", [null, [68, 26], [68, 60]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "ember-chosen", [], ["action", "onTemplateChange", "name", "template_name_list", "placeholder", "None", "class", "selected"], 3, null, ["loc", [null, [85, 10], [90, 25]]]], ["inline", "bs-primary", [], ["label", "submit", "class", "btn", "action", "convertToJson"], ["loc", [null, [114, 8], [114, 72]]], 0, 0], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [121, 12], [121, 29]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [121, 6], [150, 13]]]], ["content", "sDevice.host", ["loc", [null, [155, 51], [155, 67]]], 0, 0, 0, 0], ["element", "action", ["refresh", ["get", "sDevice.host", ["loc", [null, [157, 32], [157, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [157, 13], [157, 46]]], 0, 0], ["element", "action", ["closePopupCicd"], [], ["loc", [null, [159, 26], [159, 53]]], 0, 0], ["content", "confText", ["loc", [null, [163, 7], [163, 19]]], 0, 0, 0, 0], ["block", "if", [["get", "GetConfig", ["loc", [null, [173, 12], [173, 21]]], 0, 0, 0, 0]], [], 5, 6, ["loc", [null, [173, 6], [183, 13]]]], ["block", "if", [["get", "GetConfig", ["loc", [null, [197, 12], [197, 21]]], 0, 0, 0, 0]], [], 7, 8, ["loc", [null, [197, 6], [205, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("netconfig/templates/lanconf/wancommand/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "dcname");
          dom.setAttribute(el1, "readonly", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 10
                },
                "end": {
                  "line": 18,
                  "column": 10
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element12, 'value');
              morphs[1] = dom.createMorphAt(element12, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "dc", ["loc", [null, [17, 29], [17, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "dc", ["loc", [null, [17, 35], [17, 41]]], 0, 0, 0, 0]],
            locals: ["dc", "pods"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1, "value", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each-in", [["get", "content.routers", ["loc", [null, [16, 21], [16, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [16, 10], [18, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["action", "setdc", "name", "dc", "placeholder", "Select Data Center"], 0, null, ["loc", [null, [14, 8], [19, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 40,
                    "column": 8
                  },
                  "end": {
                    "line": 42,
                    "column": 8
                  }
                },
                "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element11 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element11, 'value');
                morphs[1] = dom.createMorphAt(element11, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "item", ["loc", [null, [41, 27], [41, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item", ["loc", [null, [41, 35], [41, 43]]], 0, 0, 0, 0]],
              locals: ["item"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 6
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "content.approver", ["loc", [null, [40, 16], [40, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [40, 8], [42, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 4
              },
              "end": {
                "line": 45,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createTextNode("Approver");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "mandatory");
            var el4 = dom.createTextNode("*");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
            return morphs;
          },
          statements: [["block", "ember-chosen", [], ["name", "approver_email", "placeholder", "Select Approver Email"], 0, null, ["loc", [null, [39, 6], [43, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formRow");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Configuration Comment");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "mandatory");
          var el4 = dom.createTextNode("*");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "type", "text");
          dom.setAttribute(el2, "name", "config_comment");
          dom.setAttribute(el2, "placeholder", "Enter configuration comment");
          dom.setAttribute(el2, "class", "required");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "unless", [["get", "content.isAdminAccount", ["loc", [null, [36, 14], [36, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [36, 4], [45, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 57,
                    "column": 14
                  },
                  "end": {
                    "line": 59,
                    "column": 14
                  }
                },
                "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "class", "checklabel");
                var el2 = dom.createTextNode("  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" [");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("]");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("input");
                dom.setAttribute(el2, "type", "checkbox");
                dom.setAttribute(el2, "name", "secondarySelect");
                dom.setAttribute(el2, "checked", "");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "checkmark");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element9 = dom.childAt(fragment, [1]);
                if (this.cachedFragment) {
                  dom.repairClonedNode(dom.childAt(element9, [5]), [], true);
                }
                var element10 = dom.childAt(element9, [5]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element9, 1, 1);
                morphs[1] = dom.createMorphAt(element9, 3, 3);
                morphs[2] = dom.createAttrMorph(element10, 'value');
                return morphs;
              },
              statements: [["content", "ua.0", ["loc", [null, [58, 54], [58, 64]]], 0, 0, 0, 0], ["content", "ua.1", ["loc", [null, [58, 66], [58, 76]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ua.1", ["loc", [null, [58, 132], [58, 138]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
              locals: ["ua"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 12
                },
                "end": {
                  "line": 60,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              var el2 = dom.createTextNode("Switches");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "userAbsent", ["loc", [null, [57, 22], [57, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [57, 14], [59, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 8
              },
              "end": {
                "line": 62,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formRow");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "userAbsent", ["loc", [null, [55, 18], [55, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [55, 12], [60, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 8
              },
              "end": {
                "line": 66,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "formAct");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "bs-primary", [], ["action", "getlogin", "label", "Next"], ["loc", [null, [64, 12], [64, 57]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "name", "auser");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "isRouterConnected", ["loc", [null, [53, 14], [53, 31]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [53, 8], [66, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 98
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "bs-primary", [], ["isPrim", false, "type", "reset", "action", "cancel", "label", "Exit"], ["loc", [null, [74, 28], [74, 98]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 8
              },
              "end": {
                "line": 79,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "bs-primary", [], ["action", "approve", "label", "Approve and Submit", "loadingTxt", "Approve..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [78, 100], [78, 108]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [78, 10], [78, 110]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 79,
                "column": 8
              },
              "end": {
                "line": 81,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "bs-primary", [], ["action", "approve", "label", "Submit for approval", "loadingTxt", "Approve..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [80, 101], [80, 109]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [80, 10], [80, 111]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 7
            },
            "end": {
              "line": 82,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "content.isAdminAccount", ["loc", [null, [77, 14], [77, 36]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [77, 8], [81, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 94,
                  "column": 16
                },
                "end": {
                  "line": 96,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "checklabel");
              var el3 = dom.createTextNode("  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" [");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("]");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("input");
              dom.setAttribute(el3, "type", "checkbox");
              dom.setAttribute(el3, "name", "router");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "checkmark");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1, 0]);
              var element6 = dom.childAt(element5, [5]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element5, 1, 1);
              morphs[1] = dom.createMorphAt(element5, 3, 3);
              morphs[2] = dom.createAttrMorph(element6, 'value');
              return morphs;
            },
            statements: [["content", "ip.name", ["loc", [null, [95, 60], [95, 71]]], 0, 0, 0, 0], ["content", "ip.host", ["loc", [null, [95, 73], [95, 84]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [95, 131], [95, 138]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [95, 143], [95, 150]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
            locals: ["ip"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 8
              },
              "end": {
                "line": 100,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "routers-pod-name");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createTextNode("        \n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "class", "checklabel");
            var el4 = dom.createElement("input");
            dom.setAttribute(el4, "type", "checkbox");
            dom.setAttribute(el4, "name", "routername");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "checkmark");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("b");
            var el5 = dom.createTextNode("Routers in Pod");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "mandatory");
            var el6 = dom.createTextNode("*");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "class", "router-pod-list");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("  \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1, 1]);
            var element8 = dom.childAt(element7, [1, 0]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element8, 'value');
            morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "ip.name", ["loc", [null, [92, 90], [92, 97]]], 0, 0, 0, 0], ",", ["get", "ip.host", ["loc", [null, [92, 102], [92, 109]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "podhosts", ["loc", [null, [94, 24], [94, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [94, 16], [96, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 113,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "routers-pod-name");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "checklabel");
              var el4 = dom.createElement("input");
              dom.setAttribute(el4, "type", "checkbox");
              dom.setAttribute(el4, "name", "routername");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "checkmark");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("         \n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "router-pod-list");
              var el4 = dom.createTextNode("\n                      \n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("li");
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "checklabel");
              var el6 = dom.createTextNode("  ");
              dom.appendChild(el5, el6);
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode(" [");
              dom.appendChild(el5, el6);
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("]");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("input");
              dom.setAttribute(el6, "type", "checkbox");
              dom.setAttribute(el6, "name", "router");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("span");
              dom.setAttribute(el6, "class", "checkmark");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                      \n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element1, [0]);
              var element3 = dom.childAt(element0, [3, 1, 0]);
              var element4 = dom.childAt(element3, [5]);
              var morphs = new Array(5);
              morphs[0] = dom.createAttrMorph(element2, 'value');
              morphs[1] = dom.createMorphAt(element1, 3, 3);
              morphs[2] = dom.createMorphAt(element3, 1, 1);
              morphs[3] = dom.createMorphAt(element3, 3, 3);
              morphs[4] = dom.createAttrMorph(element4, 'value');
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "j.0", ["loc", [null, [105, 96], [105, 101]]], 0, 0, 0, 0], ",", ["get", "j.1", ["loc", [null, [105, 106], [105, 111]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "j.1", ["loc", [null, [105, 147], [105, 156]]], 0, 0, 0, 0], ["content", "j.0", ["loc", [null, [108, 66], [108, 75]]], 0, 0, 0, 0], ["content", "j.1", ["loc", [null, [108, 77], [108, 86]]], 0, 0, 0, 0], ["attribute", "value", ["concat", [["get", "j.0", ["loc", [null, [108, 133], [108, 138]]], 0, 0, 0, 0], ",", ["get", "j.1", ["loc", [null, [108, 143], [108, 148]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
            locals: ["j"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 100,
                "column": 8
              },
              "end": {
                "line": 114,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "style", "font-weight: bold");
            var el2 = dom.createTextNode("Routers");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "mandatory");
            var el3 = dom.createTextNode("*");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "wandata", ["loc", [null, [102, 18], [102, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [102, 10], [113, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isSspine", ["loc", [null, [89, 14], [89, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [89, 8], [114, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 121,
                "column": 6
              },
              "end": {
                "line": 123,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-spinner fa-spin");
            dom.setAttribute(el1, "style", "font-size:24px");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 128,
                  "column": 8
                }
              },
              "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "text");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("pre");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
              return morphs;
            },
            statements: [["content", "cmdResult", ["loc", [null, [126, 17], [126, 30]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 123,
                "column": 6
              },
              "end": {
                "line": 129,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "cmdResult", ["loc", [null, [124, 14], [124, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [124, 8], [128, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1, "class", "title");
          var el2 = dom.createTextNode("Output");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isSaving", ["loc", [null, [121, 12], [121, 20]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [121, 6], [129, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 158,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/lanconf/wancommand/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("WAN Command");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Data Center");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mandatory");
        var el6 = dom.createTextNode("*");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cmd_form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Command");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "id", "editor");
        dom.setAttribute(el4, "style", "height: 500px; width: 100%");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cmdResult");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element13 = dom.childAt(fragment, [2]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element14, [6, 5]);
        var element16 = dom.childAt(element13, [7, 1]);
        var element17 = dom.childAt(element16, [1, 1]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element14, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(element14, 3, 3);
        morphs[2] = dom.createMorphAt(element14, 4, 4);
        morphs[3] = dom.createMorphAt(element15, 1, 1);
        morphs[4] = dom.createMorphAt(element15, 3, 3);
        morphs[5] = dom.createMorphAt(element15, 5, 5);
        morphs[6] = dom.createMorphAt(dom.childAt(element13, [3, 1]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element13, [5]), 1, 1);
        morphs[8] = dom.createElementMorph(element17);
        morphs[9] = dom.createMorphAt(dom.childAt(element16, [3, 7]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "isRouterConnected", ["loc", [null, [11, 12], [11, 29]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [11, 6], [20, 13]]]], ["block", "if", [["get", "isShowApprove", ["loc", [null, [35, 10], [35, 23]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [35, 4], [50, 11]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [51, 10], [51, 27]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [51, 4], [68, 11]]]], ["block", "unless", [["get", "isSaving", ["loc", [null, [74, 18], [74, 26]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [74, 8], [74, 109]]]], ["inline", "bs-primary", [], ["action", "submit", "label", "Execute", "loadingTxt", "Executing..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [75, 88], [75, 96]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [75, 8], [75, 98]]], 0, 0], ["block", "if", [["get", "isShowApprove", ["loc", [null, [76, 13], [76, 26]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [76, 7], [82, 15]]]], ["block", "if", [["get", "isPodTypeSelected", ["loc", [null, [88, 12], [88, 29]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [88, 6], [115, 13]]]], ["block", "if", [["get", "cmdResultShow", ["loc", [null, [119, 10], [119, 23]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [119, 4], [130, 11]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [135, 28], [135, 52]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [152, 88], [152, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [152, 10], [152, 99]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("netconfig/templates/lanconf/waninterfaces/index",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":13,"column":8},"end":{"line":17,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("           ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.setAttribute(el1,"aria-hidden","true");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","L3");var el2=dom.createTextNode("L3");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":23,"column":10},"end":{"line":25,"column":10}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("option");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element27=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element27,'value');morphs[1] = dom.createMorphAt(element27,0,0);return morphs;},statements:[["attribute","value",["concat",[["get","val",["loc",[null,[24,29],[24,32]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","val",["loc",[null,[24,36],[24,43]]],0,0,0,0]],locals:["val"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":21,"column":8},"end":{"line":26,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","inttypes",["loc",[null,[23,18],[23,26]]],0,0,0,0]],[],0,null,["loc",[null,[23,10],[25,19]]]]],locals:[],templates:[child0]};})();var child2=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":28,"column":6},"end":{"line":33,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("Vlan Id");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","text");dom.setAttribute(el2,"name","interfacenumber");dom.setAttribute(el2,"class","required");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":33,"column":6},"end":{"line":38,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("Interface Number");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","text");dom.setAttribute(el2,"name","interfacenumber");dom.setAttribute(el2,"class","required");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":43,"column":10},"end":{"line":45,"column":10}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:2,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("option");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element26,'value');morphs[1] = dom.createMorphAt(element26,0,0);return morphs;},statements:[["attribute","value",["concat",[["get","dc",["loc",[null,[44,29],[44,31]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","dc",["loc",[null,[44,35],[44,41]]],0,0,0,0]],locals:["dc","pods"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":41,"column":8},"end":{"line":46,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each-in",[["get","content.routers",["loc",[null,[43,21],[43,36]]],0,0,0,0]],[],0,null,["loc",[null,[43,10],[45,22]]]]],locals:[],templates:[child0]};})();var child5=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":61,"column":10},"end":{"line":63,"column":10}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("option");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element25=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element25,'value');morphs[1] = dom.createMorphAt(element25,0,0);return morphs;},statements:[["attribute","value",["concat",[["get","item",["loc",[null,[62,29],[62,33]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","item",["loc",[null,[62,37],[62,45]]],0,0,0,0]],locals:["item"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":60,"column":8},"end":{"line":64,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","content.approver",["loc",[null,[61,18],[61,34]]],0,0,0,0]],[],0,null,["loc",[null,[61,10],[63,19]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":57,"column":6},"end":{"line":66,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("Approver");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","ember-chosen",[],["name","approver_email","placeholder","Select Approver Email"],0,null,["loc",[null,[60,8],[64,25]]]]],locals:[],templates:[child0]};})();var child6=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":71,"column":6},"end":{"line":75,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formAct");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","bs-primary",[],["action","getlogin","label","Next"],["loc",[null,[73,10],[73,55]]],0,0]],locals:[],templates:[]};})();var child7=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":87,"column":16},"end":{"line":89,"column":16}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"class","checklabel");var el3=dom.createTextNode("  ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(" [");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("]");dom.appendChild(el2,el3);var el3=dom.createElement("input");dom.setAttribute(el3,"type","checkbox");dom.setAttribute(el3,"name","router");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","checkmark");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element21=dom.childAt(fragment,[1,0]);var element22=dom.childAt(element21,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element21,1,1);morphs[1] = dom.createMorphAt(element21,3,3);morphs[2] = dom.createAttrMorph(element22,'value');return morphs;},statements:[["content","ip.name",["loc",[null,[88,60],[88,71]]],0,0,0,0],["content","ip.host",["loc",[null,[88,73],[88,84]]],0,0,0,0],["attribute","value",["concat",[["get","ip.name",["loc",[null,[88,131],[88,138]]],0,0,0,0],",",["get","ip.host",["loc",[null,[88,143],[88,150]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":82,"column":10},"end":{"line":93,"column":10}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("ul");dom.setAttribute(el1,"class","routers-pod-name");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createTextNode("        \n              ");dom.appendChild(el2,el3);var el3=dom.createElement("label");dom.setAttribute(el3,"class","checklabel");var el4=dom.createElement("input");dom.setAttribute(el4,"type","checkbox");dom.setAttribute(el4,"name","routername");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","checkmark");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createElement("b");var el5=dom.createTextNode("Routers in Pod");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("ul");dom.setAttribute(el3,"class","router-pod-list");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("              ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("  \n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element23=dom.childAt(fragment,[1,1]);var element24=dom.childAt(element23,[1,0]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element24,'value');morphs[1] = dom.createMorphAt(dom.childAt(element23,[3]),1,1);return morphs;},statements:[["attribute","value",["concat",[["get","ip.name",["loc",[null,[85,90],[85,97]]],0,0,0,0],",",["get","ip.host",["loc",[null,[85,102],[85,109]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["block","each",[["get","podhosts",["loc",[null,[87,24],[87,32]]],0,0,0,0]],[],0,null,["loc",[null,[87,16],[89,25]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":95,"column":10},"end":{"line":106,"column":12}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("ul");dom.setAttribute(el1,"class","routers-pod-name");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("label");dom.setAttribute(el3,"class","checklabel");var el4=dom.createElement("input");dom.setAttribute(el4,"type","checkbox");dom.setAttribute(el4,"name","routername");dom.appendChild(el3,el4);var el4=dom.createElement("span");dom.setAttribute(el4,"class","checkmark");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("         \n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("ul");dom.setAttribute(el3,"class","router-pod-list");var el4=dom.createTextNode("\n                      \n                        ");dom.appendChild(el3,el4);var el4=dom.createElement("li");var el5=dom.createElement("label");dom.setAttribute(el5,"class","checklabel");var el6=dom.createTextNode("  [");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("]");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","checkbox");dom.setAttribute(el6,"name","router");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","checkmark");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n                      \n                    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element16=dom.childAt(fragment,[1,1]);var element17=dom.childAt(element16,[1]);var element18=dom.childAt(element17,[0]);var element19=dom.childAt(element16,[3,1,0]);var element20=dom.childAt(element19,[3]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element18,'value');morphs[1] = dom.createMorphAt(element17,2,2);morphs[2] = dom.createMorphAt(element19,1,1);morphs[3] = dom.createAttrMorph(element20,'value');return morphs;},statements:[["attribute","value",["concat",[["get","j.0",["loc",[null,[98,96],[98,101]]],0,0,0,0],",",["get","j.1",["loc",[null,[98,106],[98,111]]],0,0,0,0]],0,0,0,0,0],0,0,0,0],["content","j.0",["loc",[null,[98,146],[98,155]]],0,0,0,0],["content","j.1",["loc",[null,[101,67],[101,76]]],0,0,0,0],["attribute","value",["concat",[["get","j.0",["loc",[null,[101,123],[101,128]]],0,0,0,0],",",["get","j.1",["loc",[null,[101,133],[101,138]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["j"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":93,"column":10},"end":{"line":107,"column":10}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"style","font-weight: bold");var el2=dom.createTextNode("Routers");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","mandatory");var el3=dom.createTextNode("*");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","wandata",["loc",[null,[95,18],[95,25]]],0,0,0,0]],[],0,null,["loc",[null,[95,10],[106,21]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":81,"column":8},"end":{"line":108,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isSspine",["loc",[null,[82,16],[82,24]]],0,0,0,0]],[],0,1,["loc",[null,[82,10],[107,17]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":8,"column":2},"end":{"line":112,"column":2}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formContainer");dom.setAttribute(el1,"style","float:left");var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);var el2=dom.createElement("form");dom.setAttribute(el2,"name","alconf");var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Layer");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Type");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Data Center");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("label");var el5=dom.createTextNode("Configuration Comment");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","mandatory");var el6=dom.createTextNode("*");dom.appendChild(el5,el6);dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("input");dom.setAttribute(el4,"type","text");dom.setAttribute(el4,"name","config_comment");dom.setAttribute(el4,"placeholder","Enter configuration comment");dom.setAttribute(el4,"class","required");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formContainer");dom.setAttribute(el1,"style","float:right");var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);var el2=dom.createElement("form");dom.setAttribute(el2,"name","alconf");var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","formRow");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element28=dom.childAt(fragment,[1,1]);var morphs=new Array(7);morphs[0] = dom.createMorphAt(dom.childAt(element28,[1]),3,3);morphs[1] = dom.createMorphAt(dom.childAt(element28,[3]),3,3);morphs[2] = dom.createMorphAt(element28,5,5);morphs[3] = dom.createMorphAt(dom.childAt(element28,[7]),3,3);morphs[4] = dom.createMorphAt(element28,9,9);morphs[5] = dom.createMorphAt(element28,13,13);morphs[6] = dom.createMorphAt(dom.childAt(fragment,[3,1,1]),1,1);return morphs;},statements:[["block","ember-chosen",[],["action","updateType","style","text-transform: capitalize","name","type","placeholder","Select interface layer","class","required"],0,null,["loc",[null,[13,8],[17,25]]]],["block","ember-chosen",[],["action","l2VlanCheck","style","text-transform: capitalize","name","interfacetype","placeholder","Select interface type","class","required"],1,null,["loc",[null,[21,8],[26,25]]]],["block","if",[["get","l2Vlan",["loc",[null,[28,12],[28,18]]],0,0,0,0]],[],2,3,["loc",[null,[28,6],[38,13]]]],["block","ember-chosen",[],["action","setdc","name","dc","placeholder","Select Data Center"],4,null,["loc",[null,[41,8],[46,25]]]],["block","unless",[["get","content.isAdminAccount",["loc",[null,[57,16],[57,38]]],0,0,0,0]],[],5,null,["loc",[null,[57,6],[66,17]]]],["block","if",[["get","isPodTypeSelected",["loc",[null,[71,12],[71,29]]],0,0,0,0]],[],6,null,["loc",[null,[71,6],[75,13]]]],["block","if",[["get","isPodTypeSelected",["loc",[null,[81,14],[81,31]]],0,0,0,0]],[],7,null,["loc",[null,[81,8],[108,15]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":146,"column":8},"end":{"line":148,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element14=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element14,[5]),[],true);}var element15=dom.childAt(element14,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element14,1,1);morphs[1] = dom.createMorphAt(element14,3,3);morphs[2] = dom.createAttrMorph(element15,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[147,48],[147,58]]],0,0,0,0],["content","ip.1",["loc",[null,[147,60],[147,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[147,117],[147,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":143,"column":6},"end":{"line":150,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[146,16],[146,23]]],0,0,0,0]],[],0,null,["loc",[null,[146,8],[148,17]]]]],locals:[],templates:[child0]};})();var child2=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":154,"column":8},"end":{"line":156,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element12=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element12,[5]),[],true);}var element13=dom.childAt(element12,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element12,1,1);morphs[1] = dom.createMorphAt(element12,3,3);morphs[2] = dom.createAttrMorph(element13,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[155,48],[155,58]]],0,0,0,0],["content","ip.1",["loc",[null,[155,60],[155,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[155,117],[155,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":151,"column":6},"end":{"line":158,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[154,16],[154,22]]],0,0,0,0]],[],0,null,["loc",[null,[154,8],[156,17]]]]],locals:[],templates:[child0]};})();var child3=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":165,"column":8},"end":{"line":170,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","access");var el2=dom.createTextNode("access");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","trunk");var el2=dom.createTextNode("trunk");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value"," ");var el2=dom.createTextNode("None");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":172,"column":6},"end":{"line":177,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("VLAN");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("textarea");dom.setAttribute(el2,"name","vlan");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child5=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":179,"column":6},"end":{"line":184,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("CHANNEL GROUP");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","number");dom.setAttribute(el2,"min","1");dom.setAttribute(el2,"name","channel_group");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":178,"column":6},"end":{"line":185,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","portChannel",["loc",[null,[179,16],[179,27]]],0,0,0,0]],[],0,null,["loc",[null,[179,6],[184,17]]]]],locals:[],templates:[child0]};})();var child6=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":186,"column":6},"end":{"line":191,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("MLAG ID");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","number");dom.setAttribute(el2,"min","1");dom.setAttribute(el2,"name","mlag");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child7=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":193,"column":8},"end":{"line":193,"column":91}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelConf","label","cancel","isPrim",false],["loc",[null,[193,29],[193,91]]],0,0]],locals:[],templates:[]};})();var child8=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":205,"column":8},"end":{"line":207,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element10=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element10,[5]),[],true);}var element11=dom.childAt(element10,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element10,1,1);morphs[1] = dom.createMorphAt(element10,3,3);morphs[2] = dom.createAttrMorph(element11,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[206,48],[206,58]]],0,0,0,0],["content","ip.1",["loc",[null,[206,60],[206,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[206,117],[206,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":202,"column":6},"end":{"line":209,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[205,16],[205,23]]],0,0,0,0]],[],0,null,["loc",[null,[205,8],[207,17]]]]],locals:[],templates:[child0]};})();var child9=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":213,"column":8},"end":{"line":215,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element8=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element8,[5]),[],true);}var element9=dom.childAt(element8,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element8,1,1);morphs[1] = dom.createMorphAt(element8,3,3);morphs[2] = dom.createAttrMorph(element9,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[214,48],[214,58]]],0,0,0,0],["content","ip.1",["loc",[null,[214,60],[214,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[214,117],[214,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":210,"column":6},"end":{"line":217,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[213,16],[213,22]]],0,0,0,0]],[],0,null,["loc",[null,[213,8],[215,17]]]]],locals:[],templates:[child0]};})();var child10=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":223,"column":8},"end":{"line":223,"column":92}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelForm2","label","cancel","isPrim",false],["loc",[null,[223,29],[223,92]]],0,0]],locals:[],templates:[]};})();var child11=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":235,"column":8},"end":{"line":237,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element6=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element6,[5]),[],true);}var element7=dom.childAt(element6,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element6,1,1);morphs[1] = dom.createMorphAt(element6,3,3);morphs[2] = dom.createAttrMorph(element7,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[236,48],[236,58]]],0,0,0,0],["content","ip.1",["loc",[null,[236,60],[236,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[236,117],[236,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":232,"column":6},"end":{"line":239,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[235,16],[235,23]]],0,0,0,0]],[],0,null,["loc",[null,[235,8],[237,17]]]]],locals:[],templates:[child0]};})();var child12=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":243,"column":8},"end":{"line":245,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element4=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element4,[5]),[],true);}var element5=dom.childAt(element4,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element4,1,1);morphs[1] = dom.createMorphAt(element4,3,3);morphs[2] = dom.createAttrMorph(element5,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[244,48],[244,58]]],0,0,0,0],["content","ip.1",["loc",[null,[244,60],[244,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[244,117],[244,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":240,"column":6},"end":{"line":247,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[243,16],[243,22]]],0,0,0,0]],[],0,null,["loc",[null,[243,8],[245,17]]]]],locals:[],templates:[child0]};})();var child13=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":257,"column":7},"end":{"line":257,"column":92}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode(" ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelForm3","label","cancel","isPrim",false],["loc",[null,[257,29],[257,92]]],0,0]],locals:[],templates:[]};})();var child14=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":269,"column":8},"end":{"line":271,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element2=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element2,[5]),[],true);}var element3=dom.childAt(element2,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element2,1,1);morphs[1] = dom.createMorphAt(element2,3,3);morphs[2] = dom.createAttrMorph(element3,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[270,48],[270,58]]],0,0,0,0],["content","ip.1",["loc",[null,[270,60],[270,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[270,117],[270,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":266,"column":6},"end":{"line":273,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("PRESENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","present",["loc",[null,[269,16],[269,23]]],0,0,0,0]],[],0,null,["loc",[null,[269,8],[271,17]]]]],locals:[],templates:[child0]};})();var child15=(function(){var child0=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":277,"column":8},"end":{"line":279,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("label");dom.setAttribute(el1,"class","checklabel");var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode(" [");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","checkbox");dom.setAttribute(el2,"name","router");dom.setAttribute(el2,"checked","");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","checkmark");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);if(this.cachedFragment){dom.repairClonedNode(dom.childAt(element0,[5]),[],true);}var element1=dom.childAt(element0,[5]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element0,1,1);morphs[1] = dom.createMorphAt(element0,3,3);morphs[2] = dom.createAttrMorph(element1,'value');return morphs;},statements:[["content","ip.0",["loc",[null,[278,48],[278,58]]],0,0,0,0],["content","ip.1",["loc",[null,[278,60],[278,70]]],0,0,0,0],["attribute","value",["concat",[["get","ip.1",["loc",[null,[278,117],[278,123]]],0,0,0,0]],0,0,0,0,0],0,0,0,0]],locals:["ip"],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":274,"column":6},"end":{"line":281,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("ABSENT");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","mandatory");var el4=dom.createTextNode("*");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["block","each",[["get","absent",["loc",[null,[277,16],[277,22]]],0,0,0,0]],[],0,null,["loc",[null,[277,8],[279,17]]]]],locals:[],templates:[child0]};})();var child16=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":300,"column":8},"end":{"line":305,"column":8}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","in");var el2=dom.createTextNode("In");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value","out");var el2=dom.createTextNode("Out");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n          ");dom.appendChild(el0,el1);var el1=dom.createElement("option");dom.setAttribute(el1,"value"," ");var el2=dom.createTextNode("None");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child17=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":307,"column":6},"end":{"line":312,"column":6}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","formRow");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("label");var el3=dom.createTextNode("DHCP Address");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("input");dom.setAttribute(el2,"type","text");dom.setAttribute(el2,"name","dhcp_address");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child18=(function(){return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":314,"column":8},"end":{"line":314,"column":92}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","bs-primary",[],["action","cancelForm4","label","cancel","isPrim",false],["loc",[null,[314,29],[314,92]]],0,0]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@2.9.1","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":320,"column":0}},"moduleName":"netconfig/templates/lanconf/waninterfaces/index.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("header");dom.setAttribute(el1,"class","shdr");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("ul");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("li");var el4=dom.createTextNode("WAN Interfaces");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","innerContainer");var el2=dom.createTextNode("\n\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","logindiv");dom.setAttribute(el2,"class","modal");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","login-popup");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","title");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","close");var el6=dom.createElement("i");dom.setAttribute(el6,"class","fa fa-close");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("span");dom.setAttribute(el5,"class","val");var el6=dom.createTextNode("Router Login");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("form");dom.setAttribute(el4,"name","loginform");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("label");var el7=dom.createTextNode("Username");dom.appendChild(el6,el7);var el7=dom.createElement("span");dom.setAttribute(el7,"class","mandatory");var el8=dom.createTextNode("*");dom.appendChild(el7,el8);dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","text");dom.setAttribute(el6,"name","username");dom.setAttribute(el6,"class","required");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("label");var el7=dom.createTextNode("Password");dom.appendChild(el6,el7);var el7=dom.createElement("span");dom.setAttribute(el7,"class","mandatory");var el8=dom.createTextNode("*");dom.appendChild(el7,el8);dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","password");dom.setAttribute(el6,"name","password");dom.setAttribute(el6,"class","required");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formRow");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("label");var el7=dom.createTextNode("Enable Password");dom.appendChild(el6,el7);var el7=dom.createElement("span");dom.setAttribute(el7,"class","mandatory");var el8=dom.createTextNode("*");dom.appendChild(el7,el8);dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("input");dom.setAttribute(el6,"type","password");dom.setAttribute(el6,"name","enpwd");dom.setAttribute(el6,"class","required");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","formAct");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanIntConf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","ConfForm");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("DESCRIPTION");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","description");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("SWITCHPORT TYPE");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanVlanConf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","Form2");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("NAME");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","name");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanVxlanConf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","Form3");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("VLAN");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","mandatory");var el7=dom.createTextNode("*");dom.appendChild(el6,el7);dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"name","vlan");dom.setAttribute(el5,"type","number");dom.setAttribute(el5,"min","1");dom.setAttribute(el5,"class","required");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("VNI");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","mandatory");var el7=dom.createTextNode("*");dom.appendChild(el6,el7);dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"name","vni");dom.setAttribute(el5,"type","number");dom.setAttribute(el5,"min","1");dom.setAttribute(el5,"class","required");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n       ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","LanL3Conf formContainer");dom.setAttribute(el2,"style","position:absolute");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("form");dom.setAttribute(el3,"name","Form4");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("DESCRIPTION");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","description");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("MTU");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","number");dom.setAttribute(el5,"min","0");dom.setAttribute(el5,"name","mtu");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("IP ADDRESS/MASK");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","ipaddr");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("ACCESS LIST NAME");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("input");dom.setAttribute(el5,"type","text");dom.setAttribute(el5,"name","acl");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formRow");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("label");var el6=dom.createTextNode("ACCESS LIST DIRECTION");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","formAct");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element29=dom.childAt(fragment,[2]);var element30=dom.childAt(element29,[3,1]);var element31=dom.childAt(element30,[1,1]);var element32=dom.childAt(element29,[5]);var element33=dom.childAt(element32,[3]);var element34=dom.childAt(element33,[12]);var element35=dom.childAt(element29,[7]);var element36=dom.childAt(element35,[3]);var element37=dom.childAt(element36,[6]);var element38=dom.childAt(element29,[9]);var element39=dom.childAt(element38,[3]);var element40=dom.childAt(element39,[8]);var element41=dom.childAt(element29,[11]);var element42=dom.childAt(element41,[3]);var element43=dom.childAt(element42,[16]);var morphs=new Array(29);morphs[0] = dom.createMorphAt(element29,1,1);morphs[1] = dom.createElementMorph(element31);morphs[2] = dom.createMorphAt(dom.childAt(element30,[3,7]),1,1);morphs[3] = dom.createMorphAt(element32,1,1);morphs[4] = dom.createMorphAt(element33,1,1);morphs[5] = dom.createMorphAt(element33,2,2);morphs[6] = dom.createMorphAt(dom.childAt(element33,[6]),3,3);morphs[7] = dom.createMorphAt(element33,8,8);morphs[8] = dom.createMorphAt(element33,9,9);morphs[9] = dom.createMorphAt(element33,10,10);morphs[10] = dom.createMorphAt(element34,1,1);morphs[11] = dom.createMorphAt(element34,3,3);morphs[12] = dom.createMorphAt(element35,1,1);morphs[13] = dom.createMorphAt(element36,1,1);morphs[14] = dom.createMorphAt(element36,2,2);morphs[15] = dom.createMorphAt(element37,1,1);morphs[16] = dom.createMorphAt(element37,3,3);morphs[17] = dom.createMorphAt(element38,1,1);morphs[18] = dom.createMorphAt(element39,1,1);morphs[19] = dom.createMorphAt(element39,2,2);morphs[20] = dom.createMorphAt(element40,1,1);morphs[21] = dom.createMorphAt(element40,3,3);morphs[22] = dom.createMorphAt(element41,1,1);morphs[23] = dom.createMorphAt(element42,1,1);morphs[24] = dom.createMorphAt(element42,2,2);morphs[25] = dom.createMorphAt(dom.childAt(element42,[12]),3,3);morphs[26] = dom.createMorphAt(element42,14,14);morphs[27] = dom.createMorphAt(element43,1,1);morphs[28] = dom.createMorphAt(element43,3,3);return morphs;},statements:[["block","if",[["get","showForm0",["loc",[null,[8,8],[8,17]]],0,0,0,0]],[],0,null,["loc",[null,[8,2],[112,9]]]],["element","action",["close_popup"],[],["loc",[null,[117,28],[117,52]]],0,0],["inline","bs-primary",[],["action","login","label","Login","loadingTxt","Logging In..","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[134,88],[134,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[134,10],[134,99]]],0,0],["inline","int-details",[],["label","INTERFACE","cate",["subexpr","@mut",[["get","type",["loc",[null,[141,41],[141,45]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[141,51],[141,64]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[141,72],[141,87]]],0,0,0,0]],[],[],0,0]],["loc",[null,[141,4],[141,89]]],0,0],["block","if",[["get","present",["loc",[null,[143,12],[143,19]]],0,0,0,0]],[],1,null,["loc",[null,[143,6],[150,13]]]],["block","if",[["get","absent",["loc",[null,[151,12],[151,18]]],0,0,0,0]],[],2,null,["loc",[null,[151,6],[158,13]]]],["block","ember-chosen",[],["style","text-transform: capitalize","action","hideChannelGroup","name","switchport_type","placeholder","Select type"],3,null,["loc",[null,[165,8],[170,25]]]],["block","if",[["get","showVlan",["loc",[null,[172,12],[172,20]]],0,0,0,0]],[],4,null,["loc",[null,[172,6],[177,13]]]],["block","if",[["get","channelGroup",["loc",[null,[178,12],[178,24]]],0,0,0,0]],[],5,null,["loc",[null,[178,6],[185,13]]]],["block","if",[["get","portChannel",["loc",[null,[186,12],[186,23]]],0,0,0,0]],[],6,null,["loc",[null,[186,6],[191,13]]]],["block","unless",[["get","isLoading",["loc",[null,[193,18],[193,27]]],0,0,0,0]],[],7,null,["loc",[null,[193,8],[193,102]]]],["inline","bs-primary",[],["action","confFormSubmit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[194,91],[194,100]]],0,0,0,0]],[],[],0,0]],["loc",[null,[194,8],[194,102]]],0,0],["inline","int-details",[],["label","VLAN","cate",["subexpr","@mut",[["get","type",["loc",[null,[200,36],[200,40]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[200,46],[200,59]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[200,67],[200,82]]],0,0,0,0]],[],[],0,0]],["loc",[null,[200,4],[200,84]]],0,0],["block","if",[["get","present",["loc",[null,[202,12],[202,19]]],0,0,0,0]],[],8,null,["loc",[null,[202,6],[209,13]]]],["block","if",[["get","absent",["loc",[null,[210,12],[210,18]]],0,0,0,0]],[],9,null,["loc",[null,[210,6],[217,13]]]],["block","unless",[["get","isLoading",["loc",[null,[223,18],[223,27]]],0,0,0,0]],[],10,null,["loc",[null,[223,8],[223,103]]]],["inline","bs-primary",[],["action","form2Submit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[224,88],[224,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[224,8],[224,99]]],0,0],["inline","int-details",[],["label","INTERFACE","cate",["subexpr","@mut",[["get","type",["loc",[null,[230,41],[230,45]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[230,51],[230,64]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[230,72],[230,87]]],0,0,0,0]],[],[],0,0]],["loc",[null,[230,4],[230,89]]],0,0],["block","if",[["get","present",["loc",[null,[232,12],[232,19]]],0,0,0,0]],[],11,null,["loc",[null,[232,6],[239,13]]]],["block","if",[["get","absent",["loc",[null,[240,12],[240,18]]],0,0,0,0]],[],12,null,["loc",[null,[240,6],[247,13]]]],["block","unless",[["get","isLoading",["loc",[null,[257,17],[257,26]]],0,0,0,0]],[],13,null,["loc",[null,[257,7],[257,103]]]],["inline","bs-primary",[],["action","form3Submit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[258,88],[258,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[258,8],[258,99]]],0,0],["inline","int-details",[],["label","INTERFACE","cate",["subexpr","@mut",[["get","type",["loc",[null,[264,41],[264,45]]],0,0,0,0]],[],[],0,0],"type",["subexpr","@mut",[["get","interfaceType",["loc",[null,[264,51],[264,64]]],0,0,0,0]],[],[],0,0],"number",["subexpr","@mut",[["get","interfaceNumber",["loc",[null,[264,72],[264,87]]],0,0,0,0]],[],[],0,0]],["loc",[null,[264,4],[264,89]]],0,0],["block","if",[["get","present",["loc",[null,[266,12],[266,19]]],0,0,0,0]],[],14,null,["loc",[null,[266,6],[273,13]]]],["block","if",[["get","absent",["loc",[null,[274,12],[274,18]]],0,0,0,0]],[],15,null,["loc",[null,[274,6],[281,13]]]],["block","ember-chosen",[],["style","text-transform: capitalize","name","acl_direction","placeholder","Select ACL Direction"],16,null,["loc",[null,[300,8],[305,25]]]],["block","if",[["get","vlan",["loc",[null,[307,12],[307,16]]],0,0,0,0]],[],17,null,["loc",[null,[307,6],[312,13]]]],["block","unless",[["get","isLoading",["loc",[null,[314,18],[314,27]]],0,0,0,0]],[],18,null,["loc",[null,[314,8],[314,103]]]],["inline","bs-primary",[],["action","form4Submit","label","apply","loadingTxt","applying","isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[315,88],[315,97]]],0,0,0,0]],[],[],0,0]],["loc",[null,[315,8],[315,99]]],0,0]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11,child12,child13,child14,child15,child16,child17,child18]};})());});
define("netconfig/templates/left", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 19
              },
              "end": {
                "line": 5,
                "column": 138
              }
            },
            "moduleName": "netconfig/templates/left.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "nicon-ldashboard");
            dom.setAttribute(el1, "id", "DashB");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "lftnavtxt");
            var el2 = dom.createTextNode("Monitoring");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/left.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("		");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "moni");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["monitoring.inventory"], [], 0, null, ["loc", [null, [5, 19], [5, 150]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 21
              },
              "end": {
                "line": 7,
                "column": 140
              }
            },
            "moduleName": "netconfig/templates/left.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "nicon-ldashboard");
            dom.setAttribute(el1, "id", "DashB");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "lftnavtxt");
            var el2 = dom.createTextNode("Monitoring");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/left.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "moni");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" <li class=\"newmenu\">\n        <a><i class=\"nicon-ldashboard\"></i><span class=\"lftnavtxt\">Dashboard</span></a>\n        <ul>\n            <li>{{#link-to 'dashboard'}}<span class=\"ext-menu\">WAN</span>{{/link-to}}</li>\n            <li>{{#link-to 'dashboard_lan'}}<span class=\"ext-menu\">LAN</span>{{/link-to}}</li>\n        </ul>\n    </li> ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["monitoring.inventory"], [], 0, null, ["loc", [null, [7, 21], [7, 152]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 12
                },
                "end": {
                  "line": 21,
                  "column": 103
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-lbgp");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "lftnavtxt");
              var el2 = dom.createTextNode("Security Groups");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/left.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["block", "link-to", ["bgp"], [], 0, null, ["loc", [null, [21, 12], [21, 115]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 8
                },
                "end": {
                  "line": 26,
                  "column": 87
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-lbgp");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "lftnavtxt");
              var el2 = dom.createTextNode("WAN");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 21
                },
                "end": {
                  "line": 35,
                  "column": 46
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Topology");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 21
                },
                "end": {
                  "line": 36,
                  "column": 42
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("CVX");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 96
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-lbgp");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "lftnavtxt");
              var el2 = dom.createTextNode("BGP-LAN");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 42,
                    "column": 30
                  },
                  "end": {
                    "line": 42,
                    "column": 122
                  }
                },
                "moduleName": "netconfig/templates/left.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "oldnicon-config");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "lftnavtxt");
                var el2 = dom.createTextNode("WAN Config");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 6
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "data-title", "conf");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["block", "link-to", ["conf"], [], 0, null, ["loc", [null, [42, 30], [42, 134]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 28
                },
                "end": {
                  "line": 44,
                  "column": 129
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "oldnicon-config");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "lftnavtxt");
              var el2 = dom.createTextNode("LAN / WAN Config");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 104
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-alarms");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "lftnavtxt");
              var el2 = dom.createTextNode("BGP Alarms");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child7 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 104
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-lsettings");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "lftnavtxt");
              var el2 = dom.createTextNode("Settings");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child8 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 12
                },
                "end": {
                  "line": 62,
                  "column": 104
                }
              },
              "moduleName": "netconfig/templates/left.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-workflow");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "lftnavtxt");
              var el2 = dom.createTextNode("WorkFlow");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 4
              },
              "end": {
                "line": 64,
                "column": 9
              }
            },
            "moduleName": "netconfig/templates/left.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "sub-menu-cont");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "href", "javascript:void(0);");
            dom.setAttribute(el2, "data-name", "lan");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "nicon-ldc");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "lftnavtxt");
            var el4 = dom.createTextNode("LAN");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "sub-menu");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            var el4 = dom.createTextNode("\n                 ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                 ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "data-title", "conf");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment(" {{#unless LAN}}\n    <li class=\"newmenu\">\n        <a><i class=\"nicon-networktools\"></i><span class=\"lftnavtxt\">N/W Tools</span></a>\n        <ul>\n            <li>{{#link-to 'mtrprofileview'}}<span class=\"ext-menu\">MTR Profile</span>{{/link-to}}</li>\n            <li>{{#link-to 'zohoservices'}}<span class=\"ext-menu\">Zoho Services</span>{{/link-to}}</li>\n        </ul>\n    </li>\n    {{/unless}} ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("<li data-title=\"conf\">{{#link-to 'bandwidth/clients'}}<i class=\"nicon-ldashboard\"></i> <span class=\"lftnavtxt\">Bandwidth</span>{{/link-to}}</li>");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3, 3, 1]);
            var morphs = new Array(9);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
            morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[5] = dom.createMorphAt(dom.childAt(fragment, [9]), 0, 0);
            morphs[6] = dom.createMorphAt(dom.childAt(fragment, [11]), 0, 0);
            morphs[7] = dom.createMorphAt(dom.childAt(fragment, [13]), 0, 0);
            morphs[8] = dom.createMorphAt(dom.childAt(fragment, [20]), 1, 1);
            return morphs;
          },
          statements: [["block", "link-to", ["bgp"], [], 0, null, ["loc", [null, [26, 8], [26, 99]]]], ["block", "link-to", ["dc"], [], 1, null, ["loc", [null, [35, 21], [35, 58]]]], ["block", "link-to", ["cvx"], [], 2, null, ["loc", [null, [36, 21], [36, 54]]]], ["block", "link-to", ["lanbgp"], [], 3, null, ["loc", [null, [40, 10], [40, 108]]]], ["block", "unless", [["get", "LAN", ["loc", [null, [41, 16], [41, 19]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [41, 6], [43, 17]]]], ["block", "link-to", ["lanconf"], [], 5, null, ["loc", [null, [44, 28], [44, 141]]]], ["block", "link-to", ["bgpalarms"], [], 6, null, ["loc", [null, [45, 10], [45, 116]]]], ["block", "link-to", ["settings"], [], 7, null, ["loc", [null, [46, 10], [46, 116]]]], ["block", "link-to", ["testflow"], [], 8, null, ["loc", [null, [62, 12], [62, 116]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 65,
                "column": 13
              },
              "end": {
                "line": 65,
                "column": 112
              }
            },
            "moduleName": "netconfig/templates/left.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "oldnicon-config");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "lftnavtxt");
            var el2 = dom.createTextNode("My Services");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/left.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("         ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "approvers.data.attributes.approver", ["loc", [null, [19, 14], [19, 48]]], 0, 0, 0, 0], 3], [], ["loc", [null, [19, 10], [19, 51]]], 0, 0]], [], 0, 1, ["loc", [null, [19, 4], [64, 16]]]], ["block", "link-to", ["myservices"], [], 2, null, ["loc", [null, [65, 13], [65, 124]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/left.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("nav");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("	");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "logout");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "data-title", "Logout");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "nicon-logout");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [2]);
        var element3 = dom.childAt(element1, [4, 1, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        morphs[2] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [["block", "if", [["get", "LAN", ["loc", [null, [4, 10], [4, 13]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 4], [15, 11]]]], ["block", "if", [["get", "user.is_staff", ["loc", [null, [17, 10], [17, 23]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [17, 4], [66, 11]]]], ["element", "action", ["logout"], [], ["loc", [null, [70, 36], [70, 55]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/loading-page-scroll", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 78
          }
        },
        "moduleName": "netconfig/templates/loading-page-scroll.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading_page_scroll");
        var el2 = dom.createTextNode("Loading ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("img");
        dom.setAttribute(el2, "src", "img/ellipsis.svg");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/login", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/login.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loginBg");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loginoverlay");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loginContainer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "logo");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "src", "/static/netconf/app/images/zoho_nocops.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formAct");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3, 4]), 1, 1);
        return morphs;
      },
      statements: [["inline", "bs-primary", [], ["btn_name", "Login with zohocorp", "class", "loginzoho", "action", "iamRedirect", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [20, 100], [20, 108]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [20, 6], [20, 110]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/modal_header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/modal_header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "modal-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "button");
        dom.setAttribute(el2, "class", "close");
        dom.setAttribute(el2, "data-dismiss", "modal");
        var el3 = dom.createTextNode("×");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2, "class", "modal-title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        return morphs;
      },
      statements: [["element", "action", ["closeModal"], [], ["loc", [null, [2, 59], [2, 82]]], 0, 0], ["content", "title", ["loc", [null, [3, 26], [3, 35]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/monitoring", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 21
          }
        },
        "moduleName": "netconfig/templates/monitoring.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" <li>{{#link-to \"settings.uncommits\" class=\"uncommit\"}}UnCommits{{/link-to}}</li> ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("<li>{{#link-to \"settings.apikey\"}}API Key{{/link-to}}</li>");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [11, 4], [11, 14]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/monitoring/inventory", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 10
              },
              "end": {
                "line": 7,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "style", "font-size: 20px !important;");
            var el2 = dom.createTextNode("Inventory");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "style", "font-size: 20px !important;");
            var el2 = dom.createTextNode("Dashboard");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "data-centre");
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode(" Data Center:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("  ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 2, 2);
            return morphs;
          },
          statements: [["content", "dcInfo.0.attributes.name", ["loc", [null, [9, 64], [9, 94]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/monitoring/inventory.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "canShow.toShow", ["loc", [null, [5, 16], [5, 30]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [5, 10], [10, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 16
                  },
                  "end": {
                    "line": 23,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/monitoring/inventory.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element8 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element8, 'value');
                morphs[1] = dom.createMorphAt(element8, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "t", ["loc", [null, [22, 37], [22, 38]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "t", ["loc", [null, [22, 42], [22, 47]]], 0, 0, 0, 0]],
              locals: ["t"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 12
                },
                "end": {
                  "line": 24,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/monitoring/inventory.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "type", ["loc", [null, [21, 24], [21, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [21, 16], [23, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 29,
                    "column": 16
                  },
                  "end": {
                    "line": 31,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/monitoring/inventory.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element7, 'value');
                morphs[1] = dom.createMorphAt(element7, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "c", ["loc", [null, [30, 37], [30, 38]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "c", ["loc", [null, [30, 42], [30, 47]]], 0, 0, 0, 0]],
              locals: ["c"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 12
                },
                "end": {
                  "line": 32,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/monitoring/inventory.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "category", ["loc", [null, [29, 24], [29, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 16], [31, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 16
                  },
                  "end": {
                    "line": 39,
                    "column": 16
                  }
                },
                "moduleName": "netconfig/templates/monitoring/inventory.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element6 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element6, 'value');
                morphs[1] = dom.createMorphAt(element6, 0, 0);
                return morphs;
              },
              statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [38, 37], [38, 40]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [38, 44], [38, 51]]], 0, 0, 0, 0]],
              locals: ["pod"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 12
                },
                "end": {
                  "line": 40,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/monitoring/inventory.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "pod", ["loc", [null, [37, 24], [37, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [37, 16], [39, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 10
              },
              "end": {
                "line": 45,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "style", "font-size: 15px !important;");
            dom.setAttribute(el1, "class", "router-type-title");
            var el2 = dom.createTextNode("N/W type:");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "router-dc-title");
            var el2 = dom.createTextNode("Category:");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        \n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "router-pod-title");
            var el2 = dom.createTextNode("Pod type:");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "banner-msg");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("text");
            var el3 = dom.createElement("b");
            var el4 = dom.createTextNode("Click on host name to view telemetry");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [11]), 1, 1);
            return morphs;
          },
          statements: [["block", "ember-chosen", [], ["name", "type", "action", "changeContents", "placeholder", "Select Devietype", "class", "router-type"], 0, null, ["loc", [null, [20, 12], [24, 29]]]], ["block", "ember-chosen", [], ["name", "cat", "action", "changeContents", "placeholder", "Select Category", "class", "router-dc"], 1, null, ["loc", [null, [28, 12], [32, 29]]]], ["block", "ember-chosen", [], ["name", "podtype", "action", "changeContents", "placeholder", "Select Pod type", "class", "router-pod"], 2, null, ["loc", [null, [36, 12], [40, 29]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 8
            },
            "end": {
              "line": 46,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/monitoring/inventory.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "canShow.toShow", ["loc", [null, [16, 16], [16, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [16, 10], [45, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 84,
                    "column": 20
                  },
                  "end": {
                    "line": 90,
                    "column": 20
                  }
                },
                "moduleName": "netconfig/templates/monitoring/inventory.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                var el2 = dom.createTextNode("\n                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("\n                                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element3, 'style');
                morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
                return morphs;
              },
              statements: [["attribute", "style", ["subexpr", "if", [["subexpr", "eq", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [85, 39], [85, 71]]], 0, 0, 0, 0], "OK"], [], ["loc", [null, [85, 35], [85, 78]]], 0, 0], "color:green;cursor:pointer", "color:red;cursor:pointer"], [], ["loc", [null, [null, null], [85, 136]]], 0, 0], 0, 0, 0, 0], ["content", "row.bgp_dc_status_set.0.status", ["loc", [null, [87, 32], [87, 68]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 90,
                    "column": 20
                  },
                  "end": {
                    "line": 96,
                    "column": 20
                  }
                },
                "moduleName": "netconfig/templates/monitoring/inventory.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                dom.setAttribute(el1, "style", "color:red;cursor:pointer");
                var el2 = dom.createTextNode("\n                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("\n                                NOT OK\n                        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(1);
                morphs[0] = dom.createElementMorph(element2);
                return morphs;
              },
              statements: [["element", "action", ["showInfo", "Check router cretentials.", ["get", "row.host", ["loc", [null, [92, 78], [92, 86]]], 0, 0, 0, 0]], [], ["loc", [null, [92, 30], [92, 88]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 80,
                  "column": 12
                },
                "end": {
                  "line": 104,
                  "column": 12
                }
              },
              "moduleName": "netconfig/templates/monitoring/inventory.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "style", "cursor: pointer;color: #3875CC");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    \n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var element5 = dom.childAt(element4, [1]);
              var morphs = new Array(10);
              morphs[0] = dom.createAttrMorph(element4, 'ids');
              morphs[1] = dom.createElementMorph(element5);
              morphs[2] = dom.createMorphAt(element5, 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
              morphs[4] = dom.createMorphAt(element4, 5, 5);
              morphs[5] = dom.createMorphAt(dom.childAt(element4, [7]), 0, 0);
              morphs[6] = dom.createMorphAt(dom.childAt(element4, [9]), 0, 0);
              morphs[7] = dom.createMorphAt(dom.childAt(element4, [11]), 0, 0);
              morphs[8] = dom.createMorphAt(dom.childAt(element4, [13]), 0, 0);
              morphs[9] = dom.createMorphAt(dom.childAt(element4, [15]), 0, 0);
              return morphs;
            },
            statements: [["attribute", "ids", ["get", "row.host", ["loc", [null, [81, 26], [81, 34]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["divertTo", ["get", "row.host", ["loc", [null, [82, 44], [82, 52]]], 0, 0, 0, 0]], [], ["loc", [null, [82, 24], [82, 54]]], 0, 0], ["content", "row.name", ["loc", [null, [82, 94], [82, 106]]], 0, 0, 0, 0], ["content", "row.host", ["loc", [null, [83, 24], [83, 36]]], 0, 0, 0, 0], ["block", "if", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [84, 26], [84, 58]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [84, 20], [96, 27]]]], ["content", "row.podtype", ["loc", [null, [97, 24], [97, 39]]], 0, 0, 0, 0], ["content", "row.routerdetails_set.0.model", ["loc", [null, [98, 24], [98, 59]]], 0, 0, 0, 0], ["content", "row.routerdetails_set.0.version", ["loc", [null, [99, 24], [99, 61]]], 0, 0, 0, 0], ["content", "row.routerdetails_set.0.serial_number", ["loc", [null, [100, 24], [100, 67]]], 0, 0, 0, 0], ["content", "row.routerdetails_set.0.uptime", ["loc", [null, [101, 24], [101, 60]]], 0, 0, 0, 0]],
            locals: ["row"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 4
              },
              "end": {
                "line": 107,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n   \n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "width", "100%");
            dom.setAttribute(el1, "cellpadding", "0");
            dom.setAttribute(el1, "cellspacing", "0");
            dom.setAttribute(el1, "border", "0");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            dom.setAttribute(el4, "width", "10%");
            var el5 = dom.createTextNode("name");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("host");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            dom.setAttribute(el4, "width", "10%");
            var el5 = dom.createTextNode("status");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("pod type");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("model");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("software");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("device ID");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Up Time");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        \n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "content", ["loc", [null, [80, 20], [80, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [80, 12], [104, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/monitoring/inventory.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n\n\n    \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "canShow.toShow", ["loc", [null, [58, 10], [58, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [58, 4], [107, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/monitoring/inventory.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "advlst");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "advlstHdr");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          var el4 = dom.createTextNode("Message");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "advCls");
          var el4 = dom.createTextNode("×");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 3]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["hideInfo"], [], ["loc", [null, [114, 33], [114, 54]]], 0, 0], ["content", "rstatus", ["loc", [null, [117, 16], [117, 27]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 130,
                "column": 4
              },
              "end": {
                "line": 141,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "alarm-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [139, 26], [139, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [138, 8], [140, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 142,
                "column": 6
              },
              "end": {
                "line": 154,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "device-status-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [152, 24], [152, 28]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [151, 6], [153, 8]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 155,
                "column": 4
              },
              "end": {
                "line": 167,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "device-category-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [165, 26], [165, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [164, 8], [166, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 168,
                "column": 4
              },
              "end": {
                "line": 180,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/inventory.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "commit-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [178, 26], [178, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [177, 8], [179, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 125,
              "column": 0
            },
            "end": {
              "line": 181,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/monitoring/inventory.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 6, "y", 0], ["loc", [null, [131, 14], [136, 7]]], 0, 0]], 0, null, ["loc", [null, [130, 4], [141, 24]]]], ["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 0, "y", 0, "no-resize", true], ["loc", [null, [143, 14], [149, 7]]], 0, 0]], 1, null, ["loc", [null, [142, 6], [154, 24]]]], ["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [156, 14], [162, 7]]], 0, 0]], 2, null, ["loc", [null, [155, 4], [167, 24]]]], ["block", "grid-stack-item", [], ["options", ["subexpr", "hash", [], ["width", 6, "height", 5, "x", 6, "y", 6, "no-resize", true], ["loc", [null, [169, 14], [175, 7]]], 0, 0]], 3, null, ["loc", [null, [168, 4], [180, 24]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 185,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/monitoring/inventory.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n         ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        \n        \n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "style", "background-color: #ebedef;padding:30px;");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element9 = dom.childAt(fragment, [0, 1]);
        var element10 = dom.childAt(element9, [1, 0]);
        var element11 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createElementMorph(element10);
        morphs[1] = dom.createMorphAt(element9, 3, 3);
        morphs[2] = dom.createMorphAt(element9, 5, 5);
        morphs[3] = dom.createMorphAt(element11, 1, 1);
        morphs[4] = dom.createMorphAt(element11, 3, 3);
        morphs[5] = dom.createMorphAt(dom.childAt(element11, [5]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["showLeft"], [], ["loc", [null, [3, 40], [3, 61]]], 0, 0], ["block", "if", [["get", "user.is_staff", ["loc", [null, [4, 14], [4, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 8], [11, 15]]]], ["block", "if", [["get", "user.is_staff", ["loc", [null, [15, 14], [15, 27]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [15, 8], [46, 15]]]], ["block", "if", [["get", "user.is_staff", ["loc", [null, [53, 10], [53, 23]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [53, 4], [108, 11]]]], ["block", "if", [["get", "showInfo", ["loc", [null, [110, 10], [110, 18]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [110, 4], [120, 11]]]], ["block", "grid-stack", [], ["options", ["subexpr", "hash", [], ["animate", true], ["loc", [null, [126, 14], [126, 33]]], 0, 0], "onChange", ["subexpr", "action", ["change"], [], ["loc", [null, [127, 15], [127, 32]]], 0, 0]], 4, null, ["loc", [null, [125, 0], [181, 17]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("netconfig/templates/monitoring/telemetry", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 12
            },
            "end": {
              "line": 39,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "stat");
          dom.setAttribute(el1, "selected", "");
          var el2 = dom.createTextNode("Stats View");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "time");
          var el2 = dom.createTextNode("Time View");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 84,
                "column": 4
              },
              "end": {
                "line": 100,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "con-mon-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Con_mon", ["loc", [null, [96, 14], [96, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [97, 26], [97, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [95, 8], [99, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 102,
                "column": 6
              },
              "end": {
                "line": 116,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "temp-fourth-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Temp_four", ["loc", [null, [113, 14], [113, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [114, 26], [114, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [112, 8], [115, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 118,
                "column": 6
              },
              "end": {
                "line": 132,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "temp-third-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Temp_three", ["loc", [null, [129, 14], [129, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [130, 26], [130, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [128, 8], [131, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 135,
                "column": 6
              },
              "end": {
                "line": 149,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "temp-second-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Temp_two", ["loc", [null, [146, 14], [146, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [147, 26], [147, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [145, 8], [148, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 151,
                "column": 4
              },
              "end": {
                "line": 165,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "cur-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Cur", ["loc", [null, [162, 14], [162, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [163, 26], [163, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [161, 8], [164, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 168,
                "column": 8
              },
              "end": {
                "line": 181,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "arp-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [179, 26], [179, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [178, 8], [180, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child6 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 183,
                "column": 4
              },
              "end": {
                "line": 196,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ndp-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [194, 26], [194, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [193, 8], [195, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child7 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 200,
                "column": 4
              },
              "end": {
                "line": 213,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "lldp-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [211, 26], [211, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [210, 8], [212, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child8 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 215,
                "column": 4
              },
              "end": {
                "line": 229,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "packet-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Packet", ["loc", [null, [226, 14], [226, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [227, 26], [227, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [225, 8], [228, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child9 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 231,
                "column": 8
              },
              "end": {
                "line": 245,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "fan-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Fan", ["loc", [null, [242, 14], [242, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [243, 26], [243, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [241, 8], [244, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child10 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 248,
                "column": 4
              },
              "end": {
                "line": 261,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "port-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [259, 26], [259, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [258, 8], [260, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child11 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 265,
                "column": 8
              },
              "end": {
                "line": 278,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "routed-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [276, 26], [276, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [275, 8], [277, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child12 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 281,
                "column": 7
              },
              "end": {
                "line": 295,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "mem-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Mem", ["loc", [null, [292, 14], [292, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [293, 26], [293, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [291, 8], [294, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child13 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 298,
                "column": 12
              },
              "end": {
                "line": 312,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "sys-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Sys", ["loc", [null, [309, 12], [309, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [310, 26], [310, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [308, 8], [311, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child14 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 315,
                "column": 6
              },
              "end": {
                "line": 328,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "traffic-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [326, 26], [326, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [325, 8], [327, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child15 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 331,
                "column": 6
              },
              "end": {
                "line": 344,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "interface-widget", [], ["parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [342, 26], [342, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [341, 8], [343, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child16 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 348,
                "column": 6
              },
              "end": {
                "line": 362,
                "column": 4
              }
            },
            "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "temp-widget", [], ["tes", ["subexpr", "@mut", [["get", "fieldTypes.Temp", ["loc", [null, [359, 12], [359, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "parentContainer", ["subexpr", "@mut", [["get", "item", ["loc", [null, [360, 26], [360, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [358, 8], [361, 10]]], 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 2
            }
          },
          "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(17);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
          morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
          morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
          morphs[10] = dom.createMorphAt(fragment, 21, 21, contextualElement);
          morphs[11] = dom.createMorphAt(fragment, 23, 23, contextualElement);
          morphs[12] = dom.createMorphAt(fragment, 25, 25, contextualElement);
          morphs[13] = dom.createMorphAt(fragment, 27, 27, contextualElement);
          morphs[14] = dom.createMorphAt(fragment, 29, 29, contextualElement);
          morphs[15] = dom.createMorphAt(fragment, 31, 31, contextualElement);
          morphs[16] = dom.createMorphAt(fragment, 33, 33, contextualElement);
          return morphs;
        },
        statements: [["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [86, 14], [92, 7]]], 0, 0]], 0, null, ["loc", [null, [84, 4], [100, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [104, 14], [110, 7]]], 0, 0]], 1, null, ["loc", [null, [102, 6], [116, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [120, 14], [126, 7]]], 0, 0]], 2, null, ["loc", [null, [118, 6], [132, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [137, 14], [143, 7]]], 0, 0]], 3, null, ["loc", [null, [135, 6], [149, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [153, 14], [159, 7]]], 0, 0]], 4, null, ["loc", [null, [151, 4], [165, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [170, 14], [176, 7]]], 0, 0]], 5, null, ["loc", [null, [168, 8], [181, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [185, 14], [191, 7]]], 0, 0]], 6, null, ["loc", [null, [183, 4], [196, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [202, 14], [208, 7]]], 0, 0]], 7, null, ["loc", [null, [200, 4], [213, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [217, 14], [223, 7]]], 0, 0]], 8, null, ["loc", [null, [215, 4], [229, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [233, 14], [239, 7]]], 0, 0]], 9, null, ["loc", [null, [231, 8], [245, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [250, 14], [256, 7]]], 0, 0]], 10, null, ["loc", [null, [248, 4], [261, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [267, 14], [273, 7]]], 0, 0]], 11, null, ["loc", [null, [265, 8], [278, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [283, 14], [289, 7]]], 0, 0]], 12, null, ["loc", [null, [281, 7], [295, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [300, 14], [306, 7]]], 0, 0]], 13, null, ["loc", [null, [298, 12], [312, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 0, "y", 6, "no-resize", true], ["loc", [null, [317, 14], [323, 7]]], 0, 0]], 14, null, ["loc", [null, [315, 6], [328, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [333, 14], [339, 7]]], 0, 0]], 15, null, ["loc", [null, [331, 6], [344, 24]]]], ["block", "grid-stack-item", [], ["class", "tele", "options", ["subexpr", "hash", [], ["width", 6, "height", 6, "x", 6, "y", 0, "no-resize", true], ["loc", [null, [350, 14], [356, 7]]], 0, 0]], 16, null, ["loc", [null, [348, 6], [362, 24]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 369,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/monitoring/telemetry.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "teleNav");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        \n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "style", "font-size: 20px !important;cursor:pointer");
        var el4 = dom.createTextNode("Telemetry");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  \n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("          ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "data-centre-dev");
        var el4 = dom.createElement("b");
        var el5 = dom.createTextNode("Device:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("text");
        dom.setAttribute(el4, "name", "Ip_Addr");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      \n\n\n        \n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "data-centre-next");
        var el4 = dom.createElement("b");
        var el5 = dom.createTextNode(" Graph Views :");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "date-glob");
        var el4 = dom.createTextNode("\n\n          \n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n          \n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "style", "margin: 0");
        var el6 = dom.createTextNode("From :");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "datetime-local");
        dom.setAttribute(el5, "name", "fromTime");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "style", "margin: 0");
        var el6 = dom.createTextNode("To :");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "datetime-local");
        dom.setAttribute(el5, "name", "toTime");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "id", "tempthirdbtn");
        dom.setAttribute(el4, "class", "btn run");
        dom.setAttribute(el4, "style", "position:unset;");
        var el5 = dom.createTextNode("Run");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n\n\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "close");
        dom.setAttribute(el4, "class", "btn ref");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer lan-dashboard");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" \n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 0]);
        var element2 = dom.childAt(element0, [14, 6]);
        var element3 = dom.childAt(element0, [16, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [7, 2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [12]), 1, 1);
        morphs[3] = dom.createElementMorph(element2);
        morphs[4] = dom.createElementMorph(element3);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["showLeft"], [], ["loc", [null, [3, 39], [3, 60]]], 0, 0], ["content", "IP", ["loc", [null, [21, 85], [21, 91]]], 0, 0, 0, 0], ["block", "ember-chosen", [], ["name", "dcGraphView", "action", "toggleGraph", "placeholder", "Select View", "class", "bgp-drop-dash-graph"], 0, null, ["loc", [null, [36, 12], [39, 29]]]], ["element", "action", ["dcSelect"], [], ["loc", [null, [55, 74], [55, 95]]], 0, 0], ["element", "action", ["getBack"], [], ["loc", [null, [62, 30], [62, 50]]], 0, 0], ["block", "grid-stack", [], ["options", ["subexpr", "hash", [], ["animate", true], ["loc", [null, [77, 14], [77, 33]]], 0, 0], "onChange", ["subexpr", "action", ["change"], [], ["loc", [null, [78, 15], [78, 32]]], 0, 0], "class", "teleStack"], 1, null, ["loc", [null, [76, 4], [365, 17]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/mtrprofileview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 12
            },
            "end": {
              "line": 35,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/mtrprofileview.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "runbtn");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "nicon-play");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Run");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var element6 = dom.childAt(element5, [15, 1]);
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element5, [7]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element5, [9]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element5, [11]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element5, [13]), 0, 0);
          morphs[7] = dom.createElementMorph(element6);
          return morphs;
        },
        statements: [["content", "item.attributes.destination_host", ["loc", [null, [24, 24], [24, 60]]], 0, 0, 0, 0], ["content", "item.attributes.protocol", ["loc", [null, [25, 24], [25, 52]]], 0, 0, 0, 0], ["content", "item.attributes.network", ["loc", [null, [26, 24], [26, 51]]], 0, 0, 0, 0], ["content", "item.attributes.dns", ["loc", [null, [27, 24], [27, 47]]], 0, 0, 0, 0], ["content", "item.attributes.peer", ["loc", [null, [28, 24], [28, 48]]], 0, 0, 0, 0], ["content", "item.attributes.ttl", ["loc", [null, [29, 24], [29, 47]]], 0, 0, 0, 0], ["content", "item.attributes.router", ["loc", [null, [30, 24], [30, 50]]], 0, 0, 0, 0], ["element", "action", ["showtrce", ["get", "item", ["loc", [null, [32, 65], [32, 69]]], 0, 0, 0, 0]], [], ["loc", [null, [32, 45], [32, 71]]], 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 65,
                  "column": 28
                },
                "end": {
                  "line": 79,
                  "column": 28
                }
              },
              "moduleName": "netconfig/templates/mtrprofileview.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(10);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
              morphs[6] = dom.createMorphAt(dom.childAt(element0, [13]), 0, 0);
              morphs[7] = dom.createMorphAt(dom.childAt(element0, [15]), 0, 0);
              morphs[8] = dom.createMorphAt(dom.childAt(element0, [17]), 0, 0);
              morphs[9] = dom.createMorphAt(dom.childAt(element0, [19]), 0, 0);
              return morphs;
            },
            statements: [["content", "trace.hop", ["loc", [null, [67, 40], [67, 53]]], 0, 0, 0, 0], ["content", "trace.asn", ["loc", [null, [68, 40], [68, 53]]], 0, 0, 0, 0], ["content", "trace.hostname", ["loc", [null, [69, 40], [69, 58]]], 0, 0, 0, 0], ["content", "trace.loss_percent", ["loc", [null, [70, 40], [70, 62]]], 0, 0, 0, 0], ["content", "trace.sent_pkts", ["loc", [null, [71, 40], [71, 59]]], 0, 0, 0, 0], ["content", "trace.latency_last", ["loc", [null, [72, 40], [72, 62]]], 0, 0, 0, 0], ["content", "trace.latency_avg", ["loc", [null, [73, 40], [73, 61]]], 0, 0, 0, 0], ["content", "trace.latency_best", ["loc", [null, [74, 40], [74, 62]]], 0, 0, 0, 0], ["content", "trace.latency_worst", ["loc", [null, [75, 40], [75, 63]]], 0, 0, 0, 0], ["content", "trace.std_dev", ["loc", [null, [76, 40], [76, 57]]], 0, 0, 0, 0]],
            locals: ["trace"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 20
              },
              "end": {
                "line": 82,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/mtrprofileview.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "cellpadding", "0");
            dom.setAttribute(el1, "class", "tablesub");
            dom.setAttribute(el1, "cellspacing", "0");
            dom.setAttribute(el1, "border", "0");
            dom.setAttribute(el1, "width", "100%");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("HOP");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("ASN");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Host Name");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Loss %");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Sent Pkts");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Latency Last");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Latency AVG");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Latency Best");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Latency Worst");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("td");
            var el5 = dom.createTextNode("Std Deviation");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n\n                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "traceRouteData.trace", ["loc", [null, [65, 36], [65, 56]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [65, 28], [79, 37]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 20
              },
              "end": {
                "line": 86,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/mtrprofileview.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "tblloading");
            var el2 = dom.createTextNode("\n                           Loading ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "render", ["common/loading"], [], ["loc", [null, [84, 35], [84, 62]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/mtrprofileview.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "popSlideDiv animated fadeIn");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "popdataInner animated fadeInRight");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popDHdr");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h2");
          var el5 = dom.createTextNode("Trace Route for ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" (from ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(")");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "popcls");
          var el5 = dom.createTextNode("×");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "popDCont");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element3, 1, 1);
          morphs[1] = dom.createMorphAt(element3, 3, 3);
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "traceRouteData.host", ["loc", [null, [42, 40], [42, 63]]], 0, 0, 0, 0], ["content", "apiGeo", ["loc", [null, [42, 70], [42, 80]]], 0, 0, 0, 0], ["element", "action", ["hideTraceRoute"], [], ["loc", [null, [43, 41], [43, 68]]], 0, 0], ["block", "if", [["get", "traceRouteData.trace", ["loc", [null, [46, 26], [46, 46]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [46, 20], [86, 27]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 92,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/mtrprofileview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("MTR Profile View");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "class", "table");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "width", "100%");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Destination Host");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Protocol");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Network");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("DNS");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Peer");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("TTL");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Router");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0, 1, 1, 0]);
        var element8 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element7);
        morphs[1] = dom.createMorphAt(dom.childAt(element8, [1, 3]), 1, 1);
        morphs[2] = dom.createMorphAt(element8, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["block", "each", [["get", "content", ["loc", [null, [22, 20], [22, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [22, 12], [35, 21]]]], ["block", "if", [["get", "isShowTrace", ["loc", [null, [38, 10], [38, 21]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [38, 4], [90, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/myservices", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 39
              },
              "end": {
                "line": 6,
                "column": 105
              }
            },
            "moduleName": "netconfig/templates/myservices.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "row.service_name", ["loc", [null, [6, 85], [6, 105]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/myservices.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "row.service_id", ["loc", [null, [6, 21], [6, 35]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "link-to", ["myservices.index", ["get", "row.service_id", ["loc", [null, [6, 69], [6, 83]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [6, 39], [6, 117]]]]],
        locals: ["row"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/myservices.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("aside");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("My Services");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "container settings");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "servicecontent", ["loc", [null, [5, 12], [5, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 4], [7, 13]]]], ["content", "outlet", ["loc", [null, [12, 4], [12, 14]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/myservices/add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 70
            }
          },
          "moduleName": "netconfig/templates/myservices/add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Service Instances");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 32
              },
              "end": {
                "line": 44,
                "column": 132
              }
            },
            "moduleName": "netconfig/templates/myservices/add.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "reset");
            dom.setAttribute(el1, "class", "btn btn-cancel");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 12
            },
            "end": {
              "line": 44,
              "column": 144
            }
          },
          "moduleName": "netconfig/templates/myservices/add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["myservices.index", ["get", "serviceid", ["loc", [null, [44, 62], [44, 71]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [44, 32], [44, 144]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/myservices/add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createTextNode("Add");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "addinstance");
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("IP Address");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_ip");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_username");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "password");
        dom.setAttribute(el5, "name", "instance_password");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        \n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "name");
        dom.setAttribute(el5, "class", "optional");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("DC");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_dc");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Platform OS");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_os");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3, 1, 1, 13]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["myservices.index", ["get", "serviceid", ["loc", [null, [4, 42], [4, 51]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 12], [4, 82]]]], ["block", "unless", [["get", "isSaving", ["loc", [null, [44, 22], [44, 30]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [44, 12], [44, 155]]]], ["inline", "bs-primary", [], ["action", "addInstance", "loadingTxt", "Saving..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [45, 78], [45, 86]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [45, 12], [45, 88]]], 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/myservices/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 70
            }
          },
          "moduleName": "netconfig/templates/myservices/edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Service Instances");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 46,
              "column": 11
            },
            "end": {
              "line": 46,
              "column": 174
            }
          },
          "moduleName": "netconfig/templates/myservices/edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "wf-routerdetail");
          dom.setAttribute(el1, "title", "Edit IPtable rules");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "ncicon-wifi-router");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Edit");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 24
              },
              "end": {
                "line": 52,
                "column": 124
              }
            },
            "moduleName": "netconfig/templates/myservices/edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "reset");
            dom.setAttribute(el1, "class", "btn btn-cancel");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 136
            }
          },
          "moduleName": "netconfig/templates/myservices/edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["myservices.index", ["get", "serviceid", ["loc", [null, [52, 54], [52, 63]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [52, 24], [52, 136]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/myservices/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createTextNode("Edit");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "editinstance");
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("IP Address");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_ip");
        dom.setAttribute(el5, "class", "required");
        dom.setAttribute(el5, "readonly", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_username");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "password");
        dom.setAttribute(el5, "name", "instance_password");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "name");
        dom.setAttribute(el5, "class", "optional");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("DC");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_dc");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        \n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Platform OS");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "instance_os");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("IP Table Rules");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n           ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formAct");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [1, 3]);
        var element3 = dom.childAt(element1, [7, 3]);
        var element4 = dom.childAt(element1, [9, 3]);
        var element5 = dom.childAt(element1, [11, 3]);
        var element6 = dom.childAt(element0, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
        morphs[1] = dom.createAttrMorph(element2, 'value');
        morphs[2] = dom.createAttrMorph(element3, 'value');
        morphs[3] = dom.createAttrMorph(element4, 'value');
        morphs[4] = dom.createAttrMorph(element5, 'value');
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [13]), 3, 3);
        morphs[6] = dom.createMorphAt(element6, 1, 1);
        morphs[7] = dom.createMorphAt(element6, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["myservices.index", ["get", "serviceid", ["loc", [null, [4, 42], [4, 51]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 12], [4, 82]]]], ["attribute", "value", ["get", "instancecontent.instance_ip", ["loc", [null, [15, 58], [15, 85]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["get", "instancecontent.name", ["loc", [null, [31, 51], [31, 71]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["get", "instancecontent.instance_dc", ["loc", [null, [36, 58], [36, 85]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "value", ["get", "instancecontent.instance_os", ["loc", [null, [41, 58], [41, 85]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "link-to", ["myservices.iptables.index", ["get", "serviceid", ["loc", [null, [46, 50], [46, 59]]], 0, 0, 0, 0], ["get", "instanceid", ["loc", [null, [46, 60], [46, 70]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [46, 11], [46, 186]]]], ["block", "unless", [["get", "isSaving", ["loc", [null, [52, 14], [52, 22]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [52, 4], [52, 147]]]], ["inline", "bs-primary", [], ["action", "editInstance", "loadingTxt", "Saving..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [53, 71], [53, 79]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [53, 4], [53, 81]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/myservices/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 75
            }
          },
          "moduleName": "netconfig/templates/myservices/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Create Instance");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/myservices/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "innerContainer");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h3");
          dom.setAttribute(el2, "style", "text-align: center;color: red;padding-top: 1%;");
          var el3 = dom.createTextNode("No Instance found for the service. You can create one using \"Create Instance\" button above");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 16
                },
                "end": {
                  "line": 40,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/myservices/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "timestampdate", [["get", "row.ip_table_updated", ["loc", [null, [39, 36], [39, 56]]], 0, 0, 0, 0], "Asia/Kolkata"], [], ["loc", [null, [39, 20], [39, 73]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 16
                },
                "end": {
                  "line": 42,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/myservices/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 20
                },
                "end": {
                  "line": 44,
                  "column": 212
                }
              },
              "moduleName": "netconfig/templates/myservices/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "wf-routerdetail");
              dom.setAttribute(el1, "title", "View IPtable rules");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "ncicon-wifi-router");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Info");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 24
                },
                "end": {
                  "line": 46,
                  "column": 146
                }
              },
              "moduleName": "netconfig/templates/myservices/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "nicon-edit");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 12
              },
              "end": {
                "line": 52,
                "column": 12
              }
            },
            "moduleName": "netconfig/templates/myservices/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          \n\n                     ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "nicon-delete");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [15]);
            var element2 = dom.childAt(element1, [3]);
            var morphs = new Array(10);
            morphs[0] = dom.createAttrMorph(element0, 'ids');
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
            morphs[6] = dom.createMorphAt(element0, 11, 11);
            morphs[7] = dom.createMorphAt(dom.childAt(element0, [13]), 0, 0);
            morphs[8] = dom.createMorphAt(element1, 1, 1);
            morphs[9] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["attribute", "ids", ["get", "row.instance_id", ["loc", [null, [31, 22], [31, 37]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "row.instance_ip", ["loc", [null, [32, 20], [32, 39]]], 0, 0, 0, 0], ["inline", "timestampdate", [["get", "row.created", ["loc", [null, [33, 36], [33, 47]]], 0, 0, 0, 0], "Asia/Kolkata"], [], ["loc", [null, [33, 20], [33, 64]]], 0, 0], ["content", "row.name", ["loc", [null, [34, 20], [34, 32]]], 0, 0, 0, 0], ["content", "row.instance_os", ["loc", [null, [35, 20], [35, 39]]], 0, 0, 0, 0], ["content", "row.device_status", ["loc", [null, [36, 20], [36, 41]]], 0, 0, 0, 0], ["block", "if", [["get", "row.ip_table_updated", ["loc", [null, [38, 22], [38, 42]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [38, 16], [42, 23]]]], ["block", "link-to", ["myservices.iptables.index", ["get", "serviceid", ["loc", [null, [44, 59], [44, 68]]], 0, 0, 0, 0], ["get", "row.instance_id", ["loc", [null, [44, 69], [44, 84]]], 0, 0, 0, 0], ["subexpr", "query-params", [], ["test", 0], ["loc", [null, [44, 85], [44, 106]]], 0, 0]], [], 2, null, ["loc", [null, [44, 20], [44, 224]]]], ["block", "link-to", ["myservices.edit", ["get", "serviceid", ["loc", [null, [46, 53], [46, 62]]], 0, 0, 0, 0], ["subexpr", "query-params", [], ["instancerow", ["subexpr", "serialize-instance-row", [["get", "row", ["loc", [null, [46, 113], [46, 116]]], 0, 0, 0, 0]], [], ["loc", [null, [46, 89], [46, 117]]], 0, 0]], ["loc", [null, [46, 63], [46, 118]]], 0, 0]], [], 3, null, ["loc", [null, [46, 24], [46, 158]]]], ["element", "action", ["getlogin", ["get", "row", ["loc", [null, [49, 65], [49, 68]]], 0, 0, 0, 0]], [], ["loc", [null, [49, 45], [49, 70]]], 0, 0]],
          locals: ["row"],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 79,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/myservices/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "innerContainer");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("table");
          dom.setAttribute(el2, "cellpadding", "0");
          dom.setAttribute(el2, "class", "table");
          dom.setAttribute(el2, "cellspacing", "0");
          dom.setAttribute(el2, "border", "0");
          dom.setAttribute(el2, "width", "100%");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("thead");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Instance IP");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Created");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Name");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Platform OS");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Device Status");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Iptables Last updated");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Iptable rules");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tbody");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "id", "logindiv");
          dom.setAttribute(el2, "class", "modal");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "login-popup");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "title");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "close");
          var el6 = dom.createElement("i");
          dom.setAttribute(el6, "class", "fa fa-close");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "val");
          var el6 = dom.createTextNode("User Verification");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("form");
          dom.setAttribute(el4, "name", "loginform");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "formRow");
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          var el7 = dom.createTextNode("Username");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          dom.setAttribute(el7, "class", "mandatory");
          var el8 = dom.createTextNode("*");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("input");
          dom.setAttribute(el6, "type", "text");
          dom.setAttribute(el6, "name", "instance_username");
          dom.setAttribute(el6, "class", "required");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "formRow");
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          var el7 = dom.createTextNode("Password");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          dom.setAttribute(el7, "class", "mandatory");
          var el8 = dom.createTextNode("*");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("input");
          dom.setAttribute(el6, "type", "password");
          dom.setAttribute(el6, "name", "instance_password");
          dom.setAttribute(el6, "class", "required");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "formAct");
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0]);
          var element4 = dom.childAt(element3, [3, 1]);
          var element5 = dom.childAt(element4, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1, 3]), 1, 1);
          morphs[1] = dom.createElementMorph(element5);
          morphs[2] = dom.createMorphAt(dom.childAt(element4, [3, 5]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "instancecontent", ["loc", [null, [30, 20], [30, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [30, 12], [52, 21]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [60, 32], [60, 56]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Validate", "loadingTxt", "Validating..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [73, 95], [73, 104]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [73, 14], [73, 106]]], 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 79,
            "column": 7
          }
        },
        "moduleName": "netconfig/templates/myservices/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Instances ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "link-to", ["myservices.add", ["get", "serviceid", ["loc", [null, [6, 32], [6, 41]]], 0, 0, 0, 0]], ["class", "addbtn"], 0, null, ["loc", [null, [6, 4], [6, 87]]]], ["block", "if", [["get", "nocontent", ["loc", [null, [8, 6], [8, 15]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [8, 0], [79, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/myservices/instance-notfound", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 6,
              "column": 79
            }
          },
          "moduleName": "netconfig/templates/myservices/instance-notfound.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Create Instance");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/myservices/instance-notfound.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Service Instances");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    \n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        dom.setAttribute(el2, "style", "text-align: center;color: red;padding-top: 1%;");
        var el3 = dom.createTextNode("No Instance found for the service. You can create one using \"Create Instance\" button above");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["myservices.add", ["get", "serviceid", ["loc", [null, [6, 36], [6, 45]]], 0, 0, 0, 0]], ["class", "addbtn"], 0, null, ["loc", [null, [6, 8], [6, 91]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/myservices/iptables/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 12
            },
            "end": {
              "line": 3,
              "column": 70
            }
          },
          "moduleName": "netconfig/templates/myservices/iptables/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Service Instances");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/myservices/iptables/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "split");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-arrow-rgt");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "cpage");
        var el4 = dom.createTextNode("IPtable Rules");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content-container");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "checklabel");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "lan-action");
        var el7 = dom.createTextNode("IPV4 Rules ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "checkmark");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h1");
        dom.setAttribute(el5, "style", "padding-right: 10px;");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "checklabel");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "lan-action");
        var el7 = dom.createTextNode("IPV6 Rules ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "checkmark");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "form-container");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "formRow");
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("User Verification");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginformIP");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "instance_username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "instance_password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(element1, [1, 1, 1]);
        var element3 = dom.childAt(element1, [5, 1]);
        var element4 = dom.childAt(element3, [1, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [3, 5]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["myservices.index", ["get", "serviceid", ["loc", [null, [3, 42], [3, 51]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 12], [3, 82]]]], ["inline", "bs-primary", [], ["class", "addbtn", "action", "callConvert", "label", "Save", "loadingTxt", "Saving..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [7, 98], [7, 106]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [7, 4], [7, 108]]], 0, 0], ["inline", "input", [], ["name", "cusToggipv4", "type", "checkbox", "change", ["subexpr", "action", ["customToggleipv4"], [], ["loc", [null, [15, 63], [15, 90]]], 0, 0]], ["loc", [null, [15, 12], [15, 92]]], 0, 0], ["inline", "input", [], ["name", "cusToggipv6", "type", "checkbox", "change", ["subexpr", "action", ["customToggleipv6"], [], ["loc", [null, [21, 62], [21, 89]]], 0, 0]], ["loc", [null, [21, 12], [21, 91]]], 0, 0], ["element", "action", ["close_popup"], [], ["loc", [null, [38, 32], [38, 56]]], 0, 0], ["inline", "bs-primary", [], ["action", "convertToJson", "label", "Validate", "loadingTxt", "Validating..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [51, 103], [51, 112]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [51, 14], [51, 114]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/myservices/iptables/instanceiptables-notfound", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 13
            },
            "end": {
              "line": 3,
              "column": 71
            }
          },
          "moduleName": "netconfig/templates/myservices/iptables/instanceiptables-notfound.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Service Instances");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 120
            }
          },
          "moduleName": "netconfig/templates/myservices/iptables/instanceiptables-notfound.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Add IPtable Rule");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/myservices/iptables/instanceiptables-notfound.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n         ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        dom.setAttribute(el2, "style", "text-align: center;color: red;padding-top: 1%;");
        var el3 = dom.createTextNode("No iptable rule found for the instance. You can create one using \"Add IPtable Rule\" button above");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["myservices.index", ["get", "serviceid", ["loc", [null, [3, 43], [3, 52]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 13], [3, 83]]]], ["block", "link-to", ["myservices.iptables.index", ["get", "serviceid", ["loc", [null, [5, 43], [5, 52]]], 0, 0, 0, 0], ["get", "instanceid", ["loc", [null, [5, 53], [5, 63]]], 0, 0, 0, 0], ["subexpr", "query-params", [], ["test", 1], ["loc", [null, [5, 64], [5, 85]]], 0, 0]], ["class", "addbtn"], 1, null, ["loc", [null, [5, 4], [5, 132]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/myservices/service-notfound", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/myservices/service-notfound.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "style", "text-align: center;color: red;padding-top: 1%;");
        var el2 = dom.createTextNode("No service found for the user. Please contact NetOps administrator .");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/notfound", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/notfound.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "style", "text-align: center;color: red;padding-top: 1%;");
        var el2 = dom.createTextNode("No service found for the user. Please contact NetOps administrator .");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/oauth2callback", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/oauth2callback.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 8,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/settings.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("li>{{#link-to \"settings/inlinefilters\"}}Inline Filters{{/link-to}}</li");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 12
            },
            "end": {
              "line": 9,
              "column": 50
            }
          },
          "moduleName": "netconfig/templates/settings.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Routers");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 12
              },
              "end": {
                "line": 11,
                "column": 52
              }
            },
            "moduleName": "netconfig/templates/settings.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Connections");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 8
            },
            "end": {
              "line": 12,
              "column": 8
            }
          },
          "moduleName": "netconfig/templates/settings.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["settings/admin"], [], 0, null, ["loc", [null, [11, 12], [11, 64]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 12
            },
            "end": {
              "line": 13,
              "column": 61
            }
          },
          "moduleName": "netconfig/templates/settings.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Configuration Logs");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 12
            },
            "end": {
              "line": 14,
              "column": 53
            }
          },
          "moduleName": "netconfig/templates/settings.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("SMTP Settings");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 12
            },
            "end": {
              "line": 15,
              "column": 60
            }
          },
          "moduleName": "netconfig/templates/settings.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Change BGP Adv");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("aside");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("Settings");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment(" <li>{{#link-to \"settings.uncommits\" class=\"uncommit\"}}UnCommits{{/link-to}}</li> ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("<li>{{#link-to \"settings.apikey\"}}API Key{{/link-to}}</li>");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "container settings");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "unless", [["get", "appCtrl.LAN", ["loc", [null, [4, 16], [4, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 6], [8, 17]]]], ["block", "link-to", ["settings/routers"], [], 1, null, ["loc", [null, [9, 12], [9, 62]]]], ["block", "if", [["get", "user.is_staff", ["loc", [null, [10, 14], [10, 27]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [10, 8], [12, 15]]]], ["block", "link-to", ["settings.commits"], [], 3, null, ["loc", [null, [13, 12], [13, 73]]]], ["block", "link-to", ["settings.smtp"], [], 4, null, ["loc", [null, [14, 12], [14, 65]]]], ["block", "link-to", ["settings.stopbgpadv"], [], 5, null, ["loc", [null, [15, 12], [15, 72]]]], ["content", "outlet", ["loc", [null, [21, 4], [21, 14]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("netconfig/templates/settings/admin/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 12
            },
            "end": {
              "line": 29,
              "column": 13
            }
          },
          "moduleName": "netconfig/templates/settings/admin/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "delete");
          var el4 = dom.createTextNode("remove");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [5, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
          morphs[2] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["content", "item.router", ["loc", [null, [20, 20], [20, 35]]], 0, 0, 0, 0], ["content", "item.user", ["loc", [null, [23, 20], [23, 33]]], 0, 0, 0, 0], ["element", "action", ["delete", ["get", "item", ["loc", [null, [26, 61], [26, 65]]], 0, 0, 0, 0]], [], ["loc", [null, [26, 43], [26, 67]]], 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/admin/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Connections");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "width", "100%");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "class", "table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Router");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("User");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "content", ["loc", [null, [17, 20], [17, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [17, 12], [29, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/settings/apikey", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/apikey.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("API Key");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "apikeyMain");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Your Agent API key:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "apiKeyDiv");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "apiKeyTxt");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "apiCaution");
        var el4 = dom.createTextNode("CAUTION-Don't share this key with anyone.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3, 1]), 0, 0);
        return morphs;
      },
      statements: [["content", "content.api", ["loc", [null, [10, 32], [10, 47]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/commits", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 10
            },
            "end": {
              "line": 7,
              "column": 10
            }
          },
          "moduleName": "netconfig/templates/settings/commits.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "commits");
          var el2 = dom.createTextNode("Commits");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "uncommits");
          var el2 = dom.createTextNode("Failed Commits");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 14
            },
            "end": {
              "line": 14,
              "column": 14
            }
          },
          "moduleName": "netconfig/templates/settings/commits.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-close");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["c_search"], [], ["loc", [null, [13, 21], [13, 42]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 16
            },
            "end": {
              "line": 43,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/settings/commits.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
          morphs[4] = dom.createUnsafeMorphAt(dom.childAt(element0, [9]), 0, 0);
          return morphs;
        },
        statements: [["content", "row.attributes.router", ["loc", [null, [37, 28], [37, 53]]], 0, 0, 0, 0], ["content", "row.attributes.a_username", ["loc", [null, [38, 28], [38, 57]]], 0, 0, 0, 0], ["content", "row.attributes.r_username", ["loc", [null, [39, 35], [39, 64]]], 0, 0, 0, 0], ["content", "row.attributes.ctext", ["loc", [null, [40, 28], [40, 52]]], 0, 0, 0, 0], ["inline", "timestampdate", [["get", "row.attributes.c_timestamp", ["loc", [null, [41, 52], [41, 78]]], 0, 0, 0, 0], "Asia/Kolkata"], [], ["loc", [null, [41, 35], [41, 96]]], 0, 0]],
        locals: ["row"],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/settings/commits.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "loading-page-scroll", ["loc", [null, [48, 3], [48, 26]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/commits.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "cmmt_s");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "class", "s_bar");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "id", "cmmt_s");
        dom.setAttribute(el5, "placeholder", "search");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-search");
        dom.setAttribute(el5, "aria-hidden", "true");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n     ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "addbtn");
        dom.setAttribute(el2, "style", "position:unset;");
        var el3 = dom.createTextNode("Export Logs");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cmmt_s_r");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "width", "100%");
        dom.setAttribute(el3, "cellpadding", "0");
        dom.setAttribute(el3, "cellspacing", "0");
        dom.setAttribute(el3, "border", "0");
        dom.setAttribute(el3, "class", "table");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("router");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("app user");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.setAttribute(el6, "nowrap", "");
        var el7 = dom.createTextNode("router user");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.setAttribute(el6, "width", "40%");
        var el7 = dom.createTextNode("Configuration text");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Time");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [5]);
        var element7 = dom.childAt(element2, [3]);
        var element8 = dom.childAt(fragment, [2]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[1] = dom.createAttrMorph(element5, 'oninput');
        morphs[2] = dom.createMorphAt(element4, 3, 3);
        morphs[3] = dom.createElementMorph(element6);
        morphs[4] = dom.createElementMorph(element7);
        morphs[5] = dom.createMorphAt(dom.childAt(element8, [1, 1, 3]), 1, 1);
        morphs[6] = dom.createMorphAt(element8, 3, 3);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["name", "commit", "action", "changeCommit", "placeholder", "Select DC", "class", "commit-drop"], 0, null, ["loc", [null, [4, 10], [7, 27]]]], ["attribute", "oninput", ["subexpr", "action", ["search"], [], ["loc", [null, [null, null], [11, 62]]], 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "c_search", ["loc", [null, [12, 20], [12, 28]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [12, 14], [14, 21]]]], ["element", "action", ["search"], [], ["loc", [null, [15, 17], [15, 36]]], 0, 0], ["element", "action", ["csvdownld", ["get", "item", ["loc", [null, [19, 35], [19, 39]]], 0, 0, 0, 0]], [], ["loc", [null, [19, 14], [19, 41]]], 0, 0], ["block", "each", [["get", "content", ["loc", [null, [35, 24], [35, 31]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [35, 16], [43, 25]]]], ["block", "infinite-scroll", [], ["content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [47, 27], [47, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "hasMore", ["subexpr", "@mut", [["get", "hasMore", ["loc", [null, [47, 43], [47, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollable", ".innerContainer"], 3, null, ["loc", [null, [47, 0], [49, 20]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("netconfig/templates/settings/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 16
            },
            "end": {
              "line": 12,
              "column": 58
            }
          },
          "moduleName": "netconfig/templates/settings/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 16
            },
            "end": {
              "line": 14,
              "column": 55
            }
          },
          "moduleName": "netconfig/templates/settings/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("View");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 16
            },
            "end": {
              "line": 16,
              "column": 58
            }
          },
          "moduleName": "netconfig/templates/settings/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Geo");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 16
            },
            "end": {
              "line": 32,
              "column": 54
            }
          },
          "moduleName": "netconfig/templates/settings/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 16
            },
            "end": {
              "line": 34,
              "column": 51
            }
          },
          "moduleName": "netconfig/templates/settings/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("View");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 16
            },
            "end": {
              "line": 41,
              "column": 62
            }
          },
          "moduleName": "netconfig/templates/settings/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 16
            },
            "end": {
              "line": 43,
              "column": 59
            }
          },
          "moduleName": "netconfig/templates/settings/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("View");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Settings");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "settingslst");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-smtrprof");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("MTR Profiles");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "settingslink");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "settingsplit");
        var el6 = dom.createTextNode("|");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "settingsplit");
        var el6 = dom.createTextNode("|");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("li>\n            <span class=\"nicon-sinlinef\"></span>\n            <h2>Inline Filters</h2>\n            <span class=\"settingslink\">\n                {{#link-to \"settings/inlinefilters.add\"}}Add{{/link-to}}\n                <span class=\"settingsplit\">|</span>\n                {{#link-to \"settings/inlinefilters\"}}View{{/link-to}}\n            </span>\n        </li");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-srouter");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Routers");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "settingslink");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "settingsplit");
        var el6 = dom.createTextNode("|");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-szohoservice");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Zoho Service");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "settingslink");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "settingsplit");
        var el6 = dom.createTextNode("|");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("<li>\n            <span class=\"nicon-apikey\"></span>\n            <h2>API Key</h2>\n            <span class=\"settingslink\">\n                {{#link-to \"settings.apikey\"}}View{{/link-to}}\n            </span>\n        </li>");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [1, 5]);
        var element2 = dom.childAt(element0, [5, 5]);
        var element3 = dom.childAt(element0, [7, 5]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 5, 5);
        morphs[2] = dom.createMorphAt(element1, 9, 9);
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createMorphAt(element2, 5, 5);
        morphs[5] = dom.createMorphAt(element3, 1, 1);
        morphs[6] = dom.createMorphAt(element3, 5, 5);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/mtrprofiles.add"], [], 0, null, ["loc", [null, [12, 16], [12, 70]]]], ["block", "link-to", ["settings/mtrprofiles"], [], 1, null, ["loc", [null, [14, 16], [14, 67]]]], ["block", "link-to", ["settings/mtrprofiles/geo"], [], 2, null, ["loc", [null, [16, 16], [16, 70]]]], ["block", "link-to", ["settings/routers.add"], [], 3, null, ["loc", [null, [32, 16], [32, 66]]]], ["block", "link-to", ["settings/routers"], [], 4, null, ["loc", [null, [34, 16], [34, 63]]]], ["block", "link-to", ["settings/zohoserviceview.add"], [], 5, null, ["loc", [null, [41, 16], [41, 74]]]], ["block", "link-to", ["settings/zohoserviceview"], [], 6, null, ["loc", [null, [43, 16], [43, 71]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("netconfig/templates/settings/inlinefilters/add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 50
          }
        },
        "moduleName": "netconfig/templates/settings/inlinefilters/add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "inline-filters", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 22], [1, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 41], [1, 48]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 50]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/inlinefilters/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 62
          }
        },
        "moduleName": "netconfig/templates/settings/inlinefilters/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "inline-filters", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 22], [1, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 41], [1, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "isEdit", true], ["loc", [null, [1, 0], [1, 62]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/inlinefilters/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 80
            }
          },
          "moduleName": "netconfig/templates/settings/inlinefilters/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Add Inline Filters");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 28
              },
              "end": {
                "line": 28,
                "column": 104
              }
            },
            "moduleName": "netconfig/templates/settings/inlinefilters/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "nicon-edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 12
            },
            "end": {
              "line": 34,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/settings/inlinefilters/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "tableAct");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                              \n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "nicon-delete");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [9, 1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element0, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
          morphs[5] = dom.createMorphAt(element1, 1, 1);
          morphs[6] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [["attribute", "ids", ["get", "row.id", ["loc", [null, [21, 26], [21, 32]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "row.attributes.name", ["loc", [null, [22, 24], [22, 47]]], 0, 0, 0, 0], ["content", "row.attributes.iplist", ["loc", [null, [23, 24], [23, 49]]], 0, 0, 0, 0], ["content", "row.attributes.portlist", ["loc", [null, [24, 24], [24, 51]]], 0, 0, 0, 0], ["content", "row.attributes.protocol", ["loc", [null, [25, 24], [25, 51]]], 0, 0, 0, 0], ["block", "link-to", ["settings/inlinefilters.edit", ["get", "row.id", ["loc", [null, [28, 69], [28, 75]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [28, 28], [28, 116]]]], ["element", "action", ["deleteInlineFltr", ["get", "row", ["loc", [null, [30, 80], [30, 83]]], 0, 0, 0, 0]], [], ["loc", [null, [30, 52], [30, 85]]], 0, 0]],
        locals: ["row"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/settings/inlinefilters/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Inline Filters");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "width", "100%");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "class", "table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("IP list");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Portlist");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Protocol");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "width", "9%");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/inlinefilters.add"], ["class", "addbtn"], 0, null, ["loc", [null, [5, 4], [5, 92]]]], ["block", "each", [["get", "content", ["loc", [null, [20, 20], [20, 27]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [20, 12], [34, 21]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/settings/mtrprofiles/add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 48
          }
        },
        "moduleName": "netconfig/templates/settings/mtrprofiles/add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "mtr-profiles", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 20], [1, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 39], [1, 46]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 48]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/mtrprofiles/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 60
          }
        },
        "moduleName": "netconfig/templates/settings/mtrprofiles/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "mtr-profiles", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 20], [1, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 39], [1, 46]]], 0, 0, 0, 0]], [], [], 0, 0], "isEdit", true], ["loc", [null, [1, 0], [1, 60]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/mtrprofiles/geo/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 24
              },
              "end": {
                "line": 14,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/settings/mtrprofiles/geo/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'value');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "item.id", ["loc", [null, [13, 45], [13, 52]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.attributes.name", ["loc", [null, [13, 56], [13, 80]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 20
            },
            "end": {
              "line": 15,
              "column": 20
            }
          },
          "moduleName": "netconfig/templates/settings/mtrprofiles/geo/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content", ["loc", [null, [12, 32], [12, 39]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 24], [14, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/settings/mtrprofiles/geo/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "mrt-geo-info");
        var el2 = dom.createTextNode("\n                        Select API Server Location\n        (MTR and NMAP results will be generated from the selected location)\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "mrt-geo-form");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        dom.setAttribute(el4, "class", "mtr-geo-row-data");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [3, 1, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["action", "geoChange", "name", "apigeo", "class", "required", "placeholder", "Select a router..."], 0, null, ["loc", [null, [11, 20], [15, 37]]]], ["inline", "bs-primary", [], ["action", "changeGeo", "label", "Change", "loadingTxt", "channing", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [19, 99], [19, 107]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [19, 20], [19, 109]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("netconfig/templates/settings/mtrprofiles/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 75
            }
          },
          "moduleName": "netconfig/templates/settings/mtrprofiles/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Add MTR Profile");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 28
              },
              "end": {
                "line": 33,
                "column": 102
              }
            },
            "moduleName": "netconfig/templates/settings/mtrprofiles/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "nicon-edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 12
            },
            "end": {
              "line": 39,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/settings/mtrprofiles/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "tableAct");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                              \n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "nicon-delete");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [7]);
          var element2 = dom.childAt(element0, [15, 1]);
          var element3 = dom.childAt(element2, [3]);
          var morphs = new Array(11);
          morphs[0] = dom.createAttrMorph(element0, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[4] = dom.createAttrMorph(element1, 'class');
          morphs[5] = dom.createMorphAt(element1, 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element0, [13]), 0, 0);
          morphs[9] = dom.createMorphAt(element2, 1, 1);
          morphs[10] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "ids", ["get", "row.id", ["loc", [null, [23, 26], [23, 32]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "row.attributes.destination_host", ["loc", [null, [24, 24], [24, 59]]], 0, 0, 0, 0], ["content", "row.attributes.protocol", ["loc", [null, [25, 24], [25, 51]]], 0, 0, 0, 0], ["content", "row.attributes.network", ["loc", [null, [26, 24], [26, 50]]], 0, 0, 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "row.attributes.dns", ["loc", [null, [27, 36], [27, 54]]], 0, 0, 0, 0], "color-enable", "color-disable"], [], ["loc", [null, [27, 31], [27, 87]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "enable-disable", [["get", "row.attributes.dns", ["loc", [null, [27, 106], [27, 124]]], 0, 0, 0, 0]], [], ["loc", [null, [27, 89], [27, 126]]], 0, 0], ["content", "row.attributes.peer", ["loc", [null, [28, 24], [28, 47]]], 0, 0, 0, 0], ["content", "row.attributes.router", ["loc", [null, [29, 24], [29, 49]]], 0, 0, 0, 0], ["content", "row.attributes.ttl", ["loc", [null, [30, 24], [30, 46]]], 0, 0, 0, 0], ["block", "link-to", ["settings/mtrprofiles.edit", ["get", "row.id", ["loc", [null, [33, 67], [33, 73]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [33, 28], [33, 114]]]], ["element", "action", ["deleteMtrProf", ["get", "row", ["loc", [null, [35, 77], [35, 80]]], 0, 0, 0, 0]], [], ["loc", [null, [35, 52], [35, 82]]], 0, 0]],
        locals: ["row"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/settings/mtrprofiles/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("MTR Profiles");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "width", "100%");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "class", "table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Destination Host");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Protocol");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Network");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("DNS");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Peer");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Router");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("TTL");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/mtrprofiles.add"], ["class", "addbtn"], 0, null, ["loc", [null, [5, 4], [5, 87]]]], ["block", "each", [["get", "content", ["loc", [null, [22, 20], [22, 27]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [22, 12], [39, 21]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/settings/routers/add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/routers/add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "router-page", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 19], [1, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 38], [1, 45]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 47]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/routers/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/routers/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "router-page", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 19], [1, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 38], [1, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "isEdit", true], ["loc", [null, [1, 0], [1, 59]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/routers/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 16
              },
              "end": {
                "line": 9,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element18 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element18, 'value');
            morphs[1] = dom.createMorphAt(element18, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "t", ["loc", [null, [8, 37], [8, 38]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "t", ["loc", [null, [8, 42], [8, 47]]], 0, 0, 0, 0]],
          locals: ["t"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 12
            },
            "end": {
              "line": 10,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "type", ["loc", [null, [7, 24], [7, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 16], [9, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 16
              },
              "end": {
                "line": 17,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element17 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element17, 'value');
            morphs[1] = dom.createMorphAt(element17, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "c", ["loc", [null, [16, 37], [16, 38]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "c", ["loc", [null, [16, 42], [16, 47]]], 0, 0, 0, 0]],
          locals: ["c"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 12
            },
            "end": {
              "line": 18,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "category", ["loc", [null, [15, 24], [15, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [15, 16], [17, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 16
              },
              "end": {
                "line": 25,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element16 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element16, 'value');
            morphs[1] = dom.createMorphAt(element16, 0, 0);
            return morphs;
          },
          statements: [["attribute", "value", ["concat", [["get", "pod", ["loc", [null, [24, 37], [24, 40]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "pod", ["loc", [null, [24, 44], [24, 51]]], 0, 0, 0, 0]],
          locals: ["pod"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 12
            },
            "end": {
              "line": 26,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "pod", ["loc", [null, [23, 24], [23, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 16], [25, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 66
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Add Router");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 20
            },
            "end": {
              "line": 47,
              "column": 20
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "data-toggle", "tooltip");
          dom.setAttribute(el1, "class", "fa fa-spinner fa-spin R");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 20
            },
            "end": {
              "line": 50,
              "column": 20
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "data-toggle", "tooltip");
          dom.setAttribute(el1, "title", "Start BGP polling");
          dom.setAttribute(el1, "class", "fa fa-play-circle R");
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "data-toggle", "tooltip");
          dom.setAttribute(el1, "title", "Stop BGP polling");
          dom.setAttribute(el1, "class", "fa fa-stop-circle R");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element14 = dom.childAt(fragment, [1]);
          var element15 = dom.childAt(fragment, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element14, 'style');
          morphs[1] = dom.createElementMorph(element14);
          morphs[2] = dom.createAttrMorph(element15, 'style');
          morphs[3] = dom.createElementMorph(element15);
          return morphs;
        },
        statements: [["attribute", "style", ["subexpr", "if", [["get", "pollingAllOn", ["loc", [null, [48, 114], [48, 126]]], 0, 0, 0, 0], "display:none"], [], ["loc", [null, [null, null], [48, 143]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["allPolling", "start"], [], ["loc", [null, [48, 144], [48, 175]]], 0, 0], ["attribute", "style", ["subexpr", "if", [["get", "pollingAllOff", ["loc", [null, [49, 113], [49, 126]]], 0, 0, 0, 0], "display:none"], [], ["loc", [null, [null, null], [49, 143]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["allPolling", "stop"], [], ["loc", [null, [49, 144], [49, 174]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 20
              },
              "end": {
                "line": 68,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element6, 'style');
            morphs[1] = dom.createElementMorph(element7);
            morphs[2] = dom.createMorphAt(element7, 1, 1);
            return morphs;
          },
          statements: [["attribute", "style", ["subexpr", "if", [["subexpr", "eq", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [63, 39], [63, 71]]], 0, 0, 0, 0], "OK"], [], ["loc", [null, [63, 35], [63, 78]]], 0, 0], "color:green;cursor:pointer", "color:red;cursor:pointer"], [], ["loc", [null, [null, null], [63, 136]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["showInfo", ["get", "row.bgp_dc_status_set.0", ["loc", [null, [64, 50], [64, 75]]], 0, 0, 0, 0], ["get", "row.host", ["loc", [null, [64, 76], [64, 84]]], 0, 0, 0, 0]], [], ["loc", [null, [64, 30], [64, 86]]], 0, 0], ["content", "row.bgp_dc_status_set.0.status", ["loc", [null, [65, 32], [65, 68]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 68,
                "column": 20
              },
              "end": {
                "line": 74,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "style", "color:red;cursor:pointer");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("\n                                NOT OK\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["element", "action", ["showInfo", "Check router cretentials.", ["get", "row.host", ["loc", [null, [70, 78], [70, 86]]], 0, 0, 0, 0]], [], ["loc", [null, [70, 30], [70, 88]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 85,
                "column": 28
              },
              "end": {
                "line": 85,
                "column": 100
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "nicon-edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 55,
              "column": 12
            },
            "end": {
              "line": 91,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "data-toggle", "tooltip");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "tableAct");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-info-circle R");
          dom.setAttribute(el4, "aria-hidden", "true");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                              \n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                              \n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "nicon-delete");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [15]);
          var element10 = dom.childAt(element8, [17, 1]);
          var element11 = dom.childAt(element8, [19, 1]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element11, [5]);
          var morphs = new Array(16);
          morphs[0] = dom.createAttrMorph(element8, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element8, [5]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element8, [7]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element8, [9]), 0, 0);
          morphs[6] = dom.createMorphAt(element8, 11, 11);
          morphs[7] = dom.createMorphAt(dom.childAt(element8, [13]), 0, 0);
          morphs[8] = dom.createMorphAt(element9, 0, 0);
          morphs[9] = dom.createMorphAt(element9, 2, 2);
          morphs[10] = dom.createAttrMorph(element10, 'class');
          morphs[11] = dom.createAttrMorph(element10, 'title');
          morphs[12] = dom.createElementMorph(element10);
          morphs[13] = dom.createElementMorph(element12);
          morphs[14] = dom.createMorphAt(element11, 3, 3);
          morphs[15] = dom.createElementMorph(element13);
          return morphs;
        },
        statements: [["attribute", "ids", ["get", "row.host", ["loc", [null, [56, 26], [56, 34]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "row.name", ["loc", [null, [57, 24], [57, 36]]], 0, 0, 0, 0], ["content", "row.host", ["loc", [null, [58, 24], [58, 36]]], 0, 0, 0, 0], ["content", "row.port", ["loc", [null, [59, 24], [59, 36]]], 0, 0, 0, 0], ["content", "row.dc", ["loc", [null, [60, 24], [60, 34]]], 0, 0, 0, 0], ["content", "row.podtype", ["loc", [null, [61, 24], [61, 39]]], 0, 0, 0, 0], ["block", "if", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [62, 26], [62, 58]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [62, 20], [74, 27]]]], ["content", "row.bgp_dc_status_set.0.updated", ["loc", [null, [75, 24], [75, 61]]], 0, 0, 0, 0], ["content", "row.deviceinfo.vendor", ["loc", [null, [76, 24], [76, 49]]], 0, 0, 0, 0], ["content", "row.deviceinfo.modelname", ["loc", [null, [76, 50], [76, 78]]], 0, 0, 0, 0], ["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["subexpr", "eq", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [78, 49], [78, 81]]], 0, 0, 0, 0], "STOPPED"], [], ["loc", [null, [78, 45], [78, 92]]], 0, 0], "fa-toggle-off R", "fa-toggle-on R"], [], ["loc", [null, [78, 40], [78, 129]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "title", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [78, 169], [78, 201]]], 0, 0, 0, 0], "STOPPED"], [], ["loc", [null, [78, 165], [78, 212]]], 0, 0], "Start polling", "Stop polling"], [], ["loc", [null, [78, 160], [78, 245]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["alterPolling", ["get", "row", ["loc", [null, [78, 271], [78, 274]]], 0, 0, 0, 0], ["get", "row.bgp_dc_status_set.0.status", ["loc", [null, [78, 275], [78, 307]]], 0, 0, 0, 0]], [], ["loc", [null, [78, 247], [78, 309]]], 0, 0], ["element", "action", ["showDetails", ["get", "row.routerdetails_set.0", ["loc", [null, [83, 101], [83, 126]]], 0, 0, 0, 0]], [], ["loc", [null, [83, 78], [83, 129]]], 0, 0], ["block", "link-to", ["settings/routers.edit", ["get", "row.host", ["loc", [null, [85, 63], [85, 71]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [85, 28], [85, 112]]]], ["element", "action", ["deleteRouter", ["get", "row", ["loc", [null, [87, 76], [87, 79]]], 0, 0, 0, 0]], [], ["loc", [null, [87, 52], [87, 81]]], 0, 0]],
        locals: ["row"],
        templates: [child0, child1, child2]
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 94,
              "column": 0
            },
            "end": {
              "line": 104,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "advlst");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "advlstHdr");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          var el4 = dom.createTextNode("Message");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "advCls");
          var el4 = dom.createTextNode("×");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1, 3]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element4);
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [3, 1]), 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["hideInfo"], [], ["loc", [null, [98, 33], [98, 54]]], 0, 0], ["content", "rstatus", ["loc", [null, [101, 16], [101, 27]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 115,
                "column": 20
              },
              "end": {
                "line": 115,
                "column": 86
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "deviceinfo.info.device_name", ["loc", [null, [115, 55], [115, 86]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 115,
                "column": 86
              },
              "end": {
                "line": 115,
                "column": 95
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("-");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 127,
                "column": 20
              },
              "end": {
                "line": 127,
                "column": 90
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "deviceinfo.info.serial_number", ["loc", [null, [127, 57], [127, 90]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 127,
                "column": 90
              },
              "end": {
                "line": 127,
                "column": 99
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("-");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 131,
                "column": 20
              },
              "end": {
                "line": 131,
                "column": 76
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "deviceinfo.info.uptime", ["loc", [null, [131, 50], [131, 76]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 131,
                "column": 76
              },
              "end": {
                "line": 131,
                "column": 85
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("-");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child6 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 137,
                  "column": 24
                },
                "end": {
                  "line": 139,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/settings/routers/index.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("text");
              dom.setAttribute(el1, "class", "ip_addr");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("br");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "row", ["loc", [null, [138, 50], [138, 57]]], 0, 0, 0, 0]],
            locals: ["row"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 133,
                "column": 16
              },
              "end": {
                "line": 142,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("IP Addresses:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "scrollable_ip_div");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "temp_set.value", ["loc", [null, [137, 32], [137, 46]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [137, 24], [139, 33]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child7 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 143,
                  "column": 20
                },
                "end": {
                  "line": 148,
                  "column": 20
                }
              },
              "moduleName": "netconfig/templates/settings/routers/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createTextNode("IP Addresses:");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("text");
              dom.setAttribute(el2, "class", "ip_addr");
              var el3 = dom.createTextNode("Loading...");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("br");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 142,
                "column": 16
              },
              "end": {
                "line": 149,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/settings/routers/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isLoading", ["loc", [null, [143, 26], [143, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [143, 20], [148, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 0
            },
            "end": {
              "line": 152,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/settings/routers/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "deviceInfo");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "deviceInfoHeader");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          var el4 = dom.createTextNode("Device Information");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "deviceInfoCls");
          var el4 = dom.createTextNode("×");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("table");
          dom.setAttribute(el2, "width", "100%");
          dom.setAttribute(el2, "cellpadding", "0");
          dom.setAttribute(el2, "cellspacing", "0");
          dom.setAttribute(el2, "border", "0");
          dom.setAttribute(el2, "class", "table");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          dom.setAttribute(el4, "width", "100px");
          var el5 = dom.createTextNode("Host Name:");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode("Model:");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode("Version:");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode("Serial Number:");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode("Up time:");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 3]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1, 3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [5, 3]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element2, [7, 3]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element2, [9, 3]), 0, 0);
          morphs[6] = dom.createMorphAt(element2, 11, 11);
          return morphs;
        },
        statements: [["element", "action", ["hideDetails"], [], ["loc", [null, [110, 40], [110, 64]]], 0, 0], ["block", "if", [["get", "deviceinfo.info.device_name", ["loc", [null, [115, 26], [115, 53]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [115, 20], [115, 102]]]], ["content", "deviceinfo.info.model", ["loc", [null, [119, 20], [119, 45]]], 0, 0, 0, 0], ["content", "deviceinfo.info.version", ["loc", [null, [123, 20], [123, 47]]], 0, 0, 0, 0], ["block", "if", [["get", "deviceinfo.info.serial_number", ["loc", [null, [127, 26], [127, 55]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [127, 20], [127, 106]]]], ["block", "if", [["get", "deviceinfo.info.uptime", ["loc", [null, [131, 26], [131, 48]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [131, 20], [131, 92]]]], ["block", "if", [["get", "temp_set.value", ["loc", [null, [133, 22], [133, 36]]], 0, 0, 0, 0]], [], 6, 7, ["loc", [null, [133, 16], [149, 23]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 154,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/routers/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Router Profile");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "router-type-title");
        var el4 = dom.createTextNode("N/W type:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "router-dc-title");
        var el4 = dom.createTextNode("Category:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        \n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "router-pod-title");
        var el4 = dom.createTextNode("Pod type:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "width", "100%");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "class", "table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("host");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("port");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("dc");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("pod type");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "width", "10%");
        var el6 = dom.createTextNode("status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "width", "10%");
        var el6 = dom.createTextNode("Last Updated");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("type");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "ids", "pollcol");
        var el6 = dom.createTextNode("Polling");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element19 = dom.childAt(fragment, [0]);
        var element20 = dom.childAt(element19, [1]);
        var element21 = dom.childAt(fragment, [2]);
        var element22 = dom.childAt(element21, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element20, [5]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element20, [9]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element20, [13]), 1, 1);
        morphs[3] = dom.createMorphAt(element19, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element22, [1, 1, 19]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element22, [3]), 1, 1);
        morphs[6] = dom.createMorphAt(element21, 3, 3);
        morphs[7] = dom.createMorphAt(element21, 5, 5);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["name", "type", "action", "changeContents", "placeholder", "Select Devietype", "class", "router-type"], 0, null, ["loc", [null, [6, 12], [10, 29]]]], ["block", "ember-chosen", [], ["name", "cat", "action", "changeContents", "placeholder", "Select Category", "class", "router-dc"], 1, null, ["loc", [null, [14, 12], [18, 29]]]], ["block", "ember-chosen", [], ["name", "podtype", "action", "changeContents", "placeholder", "Select Pod type", "class", "router-pod"], 2, null, ["loc", [null, [22, 12], [26, 29]]]], ["block", "link-to", ["settings/routers.add"], ["class", "addbtn"], 3, null, ["loc", [null, [29, 4], [29, 78]]]], ["block", "if", [["get", "changingPoll", ["loc", [null, [45, 26], [45, 38]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [45, 20], [50, 27]]]], ["block", "each", [["get", "content", ["loc", [null, [55, 20], [55, 27]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [55, 12], [91, 21]]]], ["block", "if", [["get", "showInfo", ["loc", [null, [94, 6], [94, 14]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [94, 0], [104, 7]]]], ["block", "if", [["get", "showDetails", ["loc", [null, [106, 6], [106, 17]]], 0, 0, 0, 0]], [], 8, null, ["loc", [null, [106, 0], [152, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("netconfig/templates/settings/smtp", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/smtp.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("SMTP Settings");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "name", "smtp");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Server Host");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "host");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Port");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "port");
        dom.setAttribute(el5, "class", "required");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "user");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "password");
        dom.setAttribute(el5, "name", "passwd");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Email From");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "from_addr");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Email To");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "to_addr");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "hidden");
        dom.setAttribute(el5, "name", "id");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formRow");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Email Type");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                HTML ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "radio");
        dom.setAttribute(el5, "name", "email_type");
        dom.setAttribute(el5, "value", "html");
        dom.setAttribute(el5, "checked", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("  \n                Text ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "type", "radio");
        dom.setAttribute(el5, "name", "email_type");
        dom.setAttribute(el5, "value", "text");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n             ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "formAct");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        if (this.cachedFragment) {
          dom.repairClonedNode(dom.childAt(fragment, [2, 1, 1, 13, 3]), [], true);
        }
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1, 15]), 1, 1);
        return morphs;
      },
      statements: [["inline", "bs-primary", [], ["action", "updateSMTP", "loadingTxt", "Saving..", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [40, 81], [40, 89]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [40, 16], [40, 91]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/stopbgpadv", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 44
                },
                "end": {
                  "line": 33,
                  "column": 44
                }
              },
              "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                Processing...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 44
                },
                "end": {
                  "line": 35,
                  "column": 44
                }
              },
              "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                Update ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-chevron-down");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 24
              },
              "end": {
                "line": 44,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "prefix-dropdown");
            var el4 = dom.createTextNode("\n                                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "prefix-dropdown-btn");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("                                        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            var el5 = dom.createTextNode("\n                                            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("li");
            dom.setAttribute(el5, "class", "permit");
            var el6 = dom.createElement("i");
            dom.setAttribute(el6, "class", "fa fa-check");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" Permit");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("li");
            dom.setAttribute(el5, "class", "deny");
            var el6 = dom.createElement("i");
            dom.setAttribute(el6, "class", "fa fa-ban");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" Deny");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [7, 1]);
            var element4 = dom.childAt(element3, [1]);
            var element5 = dom.childAt(element3, [3]);
            var element6 = dom.childAt(element5, [1]);
            var element7 = dom.childAt(element5, [3]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
            morphs[3] = dom.createElementMorph(element4);
            morphs[4] = dom.createMorphAt(element4, 1, 1);
            morphs[5] = dom.createAttrMorph(element5, 'class');
            morphs[6] = dom.createElementMorph(element6);
            morphs[7] = dom.createElementMorph(element7);
            return morphs;
          },
          statements: [["content", "item.seq", ["loc", [null, [25, 36], [25, 48]]], 0, 0, 0, 0], ["content", "item.action", ["loc", [null, [26, 36], [26, 51]]], 0, 0, 0, 0], ["content", "item.prefix", ["loc", [null, [27, 36], [27, 51]]], 0, 0, 0, 0], ["element", "action", ["showDropDown", ["get", "item", ["loc", [null, [30, 98], [30, 102]]], 0, 0, 0, 0]], [], ["loc", [null, [30, 74], [30, 104]]], 0, 0], ["block", "if", [["get", "item.isProcessing", ["loc", [null, [31, 50], [31, 67]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [31, 44], [35, 51]]]], ["attribute", "class", ["concat", [["subexpr", "unless", [["get", "item.isShow", ["loc", [null, [37, 60], [37, 71]]], 0, 0, 0, 0], "dnone"], [], ["loc", [null, [37, 51], [37, 81]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["updateStatus", ["get", "item", ["loc", [null, [38, 87], [38, 91]]], 0, 0, 0, 0], "permit"], [], ["loc", [null, [38, 63], [38, 102]]], 0, 0], ["element", "action", ["updateStatus", ["get", "item", ["loc", [null, [39, 85], [39, 89]]], 0, 0, 0, 0], "deny"], [], ["loc", [null, [39, 61], [39, 98]]], 0, 0]],
          locals: ["item"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "zohoprefixlist");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "zohoprefix-hdr");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h1");
          var el4 = dom.createTextNode("Prefix name: ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-defaultR fr");
          var el4 = dom.createTextNode("Cancel");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("table");
          dom.setAttribute(el2, "class", "table");
          dom.setAttribute(el2, "width", "100%");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("thead");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Seq");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Action");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Prefix");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "width", "350");
          var el6 = dom.createTextNode("Change Action");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tbody");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element9, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element10);
          morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 3]), 1, 1);
          return morphs;
        },
        statements: [["content", "prefixList.0.name", ["loc", [null, [10, 37], [10, 60]]], 0, 0, 0, 0], ["element", "action", ["cancel"], [], ["loc", [null, [11, 28], [11, 47]]], 0, 0], ["block", "each", [["get", "prefixList.0.value", ["loc", [null, [23, 32], [23, 52]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 24], [44, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 54,
                  "column": 28
                },
                "end": {
                  "line": 56,
                  "column": 28
                }
              },
              "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'value');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["get", "item.host", ["loc", [null, [55, 48], [55, 57]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.name", ["loc", [null, [55, 60], [55, 73]]], 0, 0, 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 20
              },
              "end": {
                "line": 57,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "content", ["loc", [null, [54, 36], [54, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [54, 28], [56, 37]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "formContainer");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2, "name", "stopbgp");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "formRow");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          var el5 = dom.createTextNode("Switch");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "formRow");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          var el5 = dom.createTextNode("Username");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "type", "text");
          dom.setAttribute(el4, "name", "username");
          dom.setAttribute(el4, "class", "required");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "formRow");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          var el5 = dom.createTextNode("Password");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "type", "password");
          dom.setAttribute(el4, "name", "password");
          dom.setAttribute(el4, "class", "required");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "formRow");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          var el5 = dom.createTextNode("Enable Password");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "type", "password");
          dom.setAttribute(el4, "name", "enpwd");
          dom.setAttribute(el4, "class", "required");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "formAct");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [9]), 1, 1);
          return morphs;
        },
        statements: [["block", "ember-chosen", [], ["name", "router", "multiple", "true", "class", "required", "placeholder", "Select a router..."], 0, null, ["loc", [null, [53, 20], [57, 41]]]], ["inline", "bs-primary", [], ["action", "getArConf", "label", "Login", "loadingTxt", "Preparing", "style", "font-size: 14px;", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [72, 128], [72, 136]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [72, 24], [72, 138]]], 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/stopbgpadv.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Stop BGP Adv");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "isShowPrefixData", ["loc", [null, [7, 10], [7, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [7, 4], [76, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/settings/uncommits", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/settings/uncommits.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-close");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["c_search"], [], ["loc", [null, [9, 11], [9, 32]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 16
            },
            "end": {
              "line": 34,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/settings/uncommits.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
          return morphs;
        },
        statements: [["content", "row.attributes.router", ["loc", [null, [28, 28], [28, 53]]], 0, 0, 0, 0], ["content", "row.attributes.a_username", ["loc", [null, [29, 28], [29, 57]]], 0, 0, 0, 0], ["content", "row.attributes.r_username", ["loc", [null, [30, 35], [30, 64]]], 0, 0, 0, 0], ["content", "row.attributes.ctext", ["loc", [null, [31, 28], [31, 52]]], 0, 0, 0, 0], ["content", "row.attributes.c_timestamp", ["loc", [null, [32, 35], [32, 65]]], 0, 0, 0, 0]],
        locals: ["row"],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 40,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/settings/uncommits.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "loading-page-scroll", ["loc", [null, [39, 3], [39, 26]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/uncommits.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Commits");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cmmt_s");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "class", "s_bar");
        dom.setAttribute(el2, "type", "text");
        dom.setAttribute(el2, "id", "cmmt_s");
        dom.setAttribute(el2, "placeholder", "search");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "fa fa-search");
        dom.setAttribute(el2, "aria-hidden", "true");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cmmt_s_r");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "width", "100%");
        dom.setAttribute(el3, "cellpadding", "0");
        dom.setAttribute(el3, "cellspacing", "0");
        dom.setAttribute(el3, "border", "0");
        dom.setAttribute(el3, "class", "table");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("router");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("user");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        dom.setAttribute(el6, "nowrap", "");
        var el7 = dom.createTextNode("router user");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("text");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("Time");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [5]);
        var element5 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element3, 'onkeypress');
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        morphs[2] = dom.createElementMorph(element4);
        morphs[3] = dom.createMorphAt(dom.childAt(element5, [1, 1, 3]), 1, 1);
        morphs[4] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["attribute", "onkeypress", ["subexpr", "action", ["search"], [], ["loc", [null, [null, null], [7, 55]]], 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "c_search", ["loc", [null, [8, 10], [8, 18]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 4], [10, 11]]]], ["element", "action", ["search"], [], ["loc", [null, [11, 7], [11, 26]]], 0, 0], ["block", "each", [["get", "content", ["loc", [null, [26, 24], [26, 31]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [26, 16], [34, 25]]]], ["block", "infinite-scroll", [], ["content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [38, 27], [38, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "hasMore", ["subexpr", "@mut", [["get", "hasMore", ["loc", [null, [38, 43], [38, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollable", ".innerContainer"], 2, null, ["loc", [null, [38, 0], [40, 20]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/settings/zohoserviceview/add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/zohoserviceview/add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "zohoservice-page", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 24], [1, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 43], [1, 50]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 52]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/zohoserviceview/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/zohoserviceview/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "zohoservice-page", [], ["ctrl", ["subexpr", "@mut", [["get", "controller", ["loc", [null, [1, 24], [1, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [1, 43], [1, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "isEdit", true], ["loc", [null, [1, 0], [1, 64]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/settings/zohoserviceview/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 80
            }
          },
          "moduleName": "netconfig/templates/settings/zohoserviceview/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("+ Add Zoho Service");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 28
              },
              "end": {
                "line": 23,
                "column": 106
              }
            },
            "moduleName": "netconfig/templates/settings/zohoserviceview/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "nicon-edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 12
            },
            "end": {
              "line": 29,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/settings/zohoserviceview/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "tableAct");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                              \n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "nicon-delete");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [5, 1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [["attribute", "ids", ["get", "row.id", ["loc", [null, [18, 26], [18, 32]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "row.attributes.name", ["loc", [null, [19, 24], [19, 47]]], 0, 0, 0, 0], ["content", "row.attributes.url", ["loc", [null, [20, 24], [20, 46]]], 0, 0, 0, 0], ["block", "link-to", ["settings/zohoserviceview.edit", ["get", "row.id", ["loc", [null, [23, 71], [23, 77]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 28], [23, 118]]]], ["element", "action", ["deleteService", ["get", "row", ["loc", [null, [25, 77], [25, 80]]], 0, 0, 0, 0]], [], ["loc", [null, [25, 52], [25, 82]]], 0, 0]],
        locals: ["row"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/settings/zohoserviceview/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Zoho Services");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "width", "100%");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "class", "table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("NAME");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("DNS");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["settings/zohoserviceview.add"], ["class", "addbtn"], 0, null, ["loc", [null, [5, 4], [5, 92]]]], ["block", "each", [["get", "content", ["loc", [null, [17, 20], [17, 27]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [17, 12], [29, 21]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/statusmsg", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 8
              },
              "end": {
                "line": 11,
                "column": 8
              }
            },
            "moduleName": "netconfig/templates/statusmsg.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t-lang", [["get", "messageObj.message", ["loc", [null, [10, 23], [10, 41]]], 0, 0, 0, 0], ["get", "messageObj.msgArgs", ["loc", [null, [10, 42], [10, 60]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 14], [10, 62]]], 0, 0]],
          locals: ["messageObj"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/statusmsg.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ol");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "view.message.m_txt", ["loc", [null, [9, 16], [9, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [9, 8], [11, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "netconfig/templates/statusmsg.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["inline", "t-lang", [["get", "view.message.m_txt.message", ["loc", [null, [14, 21], [14, 47]]], 0, 0, 0, 0], ["get", "view.message.m_txt.msgArgs", ["loc", [null, [14, 48], [14, 74]]], 0, 0, 0, 0]], [], ["loc", [null, [14, 12], [14, 76]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 6
            }
          },
          "moduleName": "netconfig/templates/statusmsg.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-remove");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["close"], ["target", "view"], ["loc", [null, [19, 31], [19, 63]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/statusmsg.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "statusMsg");
        dom.setAttribute(el1, "align", "center");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-left");
        var el4 = dom.createElement("i");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-left msg");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-left");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1, 1]);
        var element2 = dom.childAt(element1, [1, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["get", "view.message.type", ["loc", [null, [4, 15], [4, 32]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["get", "view.message.icon", ["loc", [null, [5, 38], [5, 55]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "view.arrMsgs", ["loc", [null, [7, 10], [7, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [7, 4], [15, 11]]]], ["block", "if", [["get", "view.showclose", ["loc", [null, [18, 12], [18, 26]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [18, 6], [20, 13]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("netconfig/templates/testflow", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 67
            }
          },
          "moduleName": "netconfig/templates/testflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Configuration Approvals");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 5,
              "column": 67
            }
          },
          "moduleName": "netconfig/templates/testflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Configuration Pipelines");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 10
          }
        },
        "moduleName": "netconfig/templates/testflow.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("aside");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("WorkFlow");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment(" <li>{{#link-to \"settings.uncommits\" class=\"uncommit\"}}UnCommits{{/link-to}}</li> ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("<li>{{#link-to \"settings.apikey\"}}API Key{{/link-to}}</li>");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "container settings");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["testflow.workflow"], [], 0, null, ["loc", [null, [4, 12], [4, 79]]]], ["block", "link-to", ["testflow.pipeline"], [], 1, null, ["loc", [null, [5, 12], [5, 79]]]], ["content", "outlet", ["loc", [null, [11, 4], [11, 14]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("netconfig/templates/testflow/pipeline", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/testflow/pipeline.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Pipelines");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "formContainer");
        dom.setAttribute(el2, "style", "float:left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("iframe");
        dom.setAttribute(el3, "src", "http://172.21.174.105:8080/job/projectcicdpipeline/");
        dom.setAttribute(el3, "id", "jenkinstab");
        dom.setAttribute(el3, "frameborder", "0");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("netconfig/templates/testflow/workflow", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 12
            },
            "end": {
              "line": 12,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "today");
          var el2 = dom.createTextNode("Today");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "week");
          var el2 = dom.createTextNode("Last 7 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "month");
          var el2 = dom.createTextNode("Last 30 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "year");
          var el2 = dom.createTextNode("Year");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 12
            },
            "end": {
              "line": 21,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "all");
          var el2 = dom.createTextNode("All");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "0");
          var el2 = dom.createTextNode("Pending");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "1");
          var el2 = dom.createTextNode("Approved");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "2");
          var el2 = dom.createTextNode("Denied");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 24
              },
              "end": {
                "line": 55,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/testflow/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "workflow-status pending");
            var el2 = dom.createTextNode("Pending");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 24
                },
                "end": {
                  "line": 57,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/testflow/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-status approved");
              var el2 = dom.createTextNode("Approved");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 57,
                    "column": 24
                  },
                  "end": {
                    "line": 59,
                    "column": 24
                  }
                },
                "moduleName": "netconfig/templates/testflow/workflow.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "workflow-status denied");
                var el2 = dom.createTextNode("Denied");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 57,
                  "column": 24
                },
                "end": {
                  "line": 59,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/testflow/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "item.approve_status", ["loc", [null, [57, 38], [57, 57]]], 0, 0, 0, 0], 2], [], ["loc", [null, [57, 34], [57, 60]]], 0, 0]], [], 0, null, ["loc", [null, [57, 24], [59, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 24
              },
              "end": {
                "line": 59,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/testflow/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "item.approve_status", ["loc", [null, [55, 38], [55, 57]]], 0, 0, 0, 0], 1], [], ["loc", [null, [55, 34], [55, 60]]], 0, 0]], [], 0, 1, ["loc", [null, [55, 24], [59, 24]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 12
            },
            "end": {
              "line": 65,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                           ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "wf-routerdetail");
          dom.setAttribute(el3, "title", "View Router Detail");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "ncicon-wifi-router");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Details");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                          \n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-comment wf-comment");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [17]);
          var element8 = dom.childAt(element7, [3]);
          var element9 = dom.childAt(element7, [5]);
          var morphs = new Array(11);
          morphs[0] = dom.createAttrMorph(element6, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element6, [6]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element6, [9]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element6, [11]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element6, [13]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element6, [15]), 0, 0);
          morphs[8] = dom.createMorphAt(element7, 1, 1);
          morphs[9] = dom.createElementMorph(element8);
          morphs[10] = dom.createElementMorph(element9);
          return morphs;
        },
        statements: [["attribute", "ids", ["concat", [["get", "item.request_id", ["loc", [null, [42, 27], [42, 42]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.request_id", ["loc", [null, [43, 24], [43, 43]]], 0, 0, 0, 0], ["content", "item.requester_username", ["loc", [null, [44, 31], [44, 58]]], 0, 0, 0, 0], ["inline", "commitlogmap", [["get", "item.command_category", ["loc", [null, [46, 39], [46, 60]]], 0, 0, 0, 0]], [], ["loc", [null, [46, 24], [46, 63]]], 0, 0], ["content", "item.entity_name", ["loc", [null, [48, 24], [48, 44]]], 0, 0, 0, 0], ["content", "item.config_comment", ["loc", [null, [49, 24], [49, 47]]], 0, 0, 0, 0], ["content", "item.approver", ["loc", [null, [50, 31], [50, 48]]], 0, 0, 0, 0], ["inline", "formate-date", [["get", "item.created", ["loc", [null, [51, 46], [51, 58]]], 0, 0, 0, 0], "YYYY-MM-DD HH:mm:ss"], [], ["loc", [null, [51, 31], [51, 82]]], 0, 0], ["block", "if", [["subexpr", "eq", [["get", "item.approve_status", ["loc", [null, [53, 34], [53, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [53, 30], [53, 56]]], 0, 0]], [], 0, 1, ["loc", [null, [53, 24], [59, 31]]]], ["element", "action", ["viewRouterDetail", ["get", "item", ["loc", [null, [60, 95], [60, 99]]], 0, 0, 0, 0]], [], ["loc", [null, [60, 67], [60, 101]]], 0, 0], ["element", "action", ["showComments", ["get", "item", ["loc", [null, [62, 84], [62, 88]]], 0, 0, 0, 0]], [], ["loc", [null, [62, 60], [62, 90]]], 0, 0]],
        locals: ["item"],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 78,
                  "column": 24
                },
                "end": {
                  "line": 80,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/testflow/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-act execute");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "ncicon-play");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Execute");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element5);
              return morphs;
            },
            statements: [["element", "action", ["executeWorkflow"], [], ["loc", [null, [79, 59], [79, 87]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 20
              },
              "end": {
                "line": 81,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/testflow/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [78, 38], [78, 63]]], 0, 0, 0, 0], 2], [], ["loc", [null, [78, 34], [78, 66]]], 0, 0]], [], 0, null, ["loc", [null, [78, 24], [80, 35]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 16
            },
            "end": {
              "line": 82,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [77, 30], [77, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [77, 26], [77, 56]]], 0, 0]], [], 0, null, ["loc", [null, [77, 20], [81, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 83,
                  "column": 20
                },
                "end": {
                  "line": 86,
                  "column": 20
                }
              },
              "moduleName": "netconfig/templates/testflow/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-act approve");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "ncicon-check_circle");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Approve");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-act deny");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "ncicon-cancel");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Deny");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var element4 = dom.childAt(fragment, [3]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element3);
              morphs[1] = dom.createElementMorph(element4);
              return morphs;
            },
            statements: [["element", "action", ["updateWorkStat", "1"], [], ["loc", [null, [84, 55], [84, 86]]], 0, 0], ["element", "action", ["updateWorkStat", "2"], [], ["loc", [null, [85, 52], [85, 83]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 16
              },
              "end": {
                "line": 87,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/testflow/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [83, 30], [83, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [83, 26], [83, 56]]], 0, 0]], [], 0, null, ["loc", [null, [83, 20], [86, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 88,
                    "column": 20
                  },
                  "end": {
                    "line": 90,
                    "column": 20
                  }
                },
                "moduleName": "netconfig/templates/testflow/workflow.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "workflow-act execute");
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "ncicon-play");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" Execute");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(1);
                morphs[0] = dom.createElementMorph(element2);
                return morphs;
              },
              statements: [["element", "action", ["executeWorkflow"], [], ["loc", [null, [89, 59], [89, 87]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 87,
                  "column": 16
                },
                "end": {
                  "line": 91,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/testflow/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [88, 30], [88, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [88, 26], [88, 56]]], 0, 0]], [], 0, null, ["loc", [null, [88, 20], [90, 27]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 87,
                "column": 16
              },
              "end": {
                "line": 91,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/testflow/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [87, 30], [87, 55]]], 0, 0, 0, 0], 1], [], ["loc", [null, [87, 26], [87, 58]]], 0, 0]], [], 0, null, ["loc", [null, [87, 16], [91, 16]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 16
            },
            "end": {
              "line": 91,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [82, 30], [82, 55]]], 0, 0, 0, 0], 0], [], ["loc", [null, [82, 26], [82, 58]]], 0, 0]], [], 0, 1, ["loc", [null, [82, 16], [91, 16]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 97,
                  "column": 20
                },
                "end": {
                  "line": 102,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/testflow/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-row");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createTextNode("Approver Comment");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "mandatory");
              var el4 = dom.createTextNode("*");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("textarea");
              dom.setAttribute(el2, "name", "approver_comment");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 96,
                "column": 17
              },
              "end": {
                "line": 103,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/testflow/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "isAdmin", ["loc", [null, [97, 30], [97, 37]]], 0, 0, 0, 0], false], [], ["loc", [null, [97, 26], [97, 44]]], 0, 0]], [], 0, null, ["loc", [null, [97, 20], [102, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 95,
              "column": 12
            },
            "end": {
              "line": 104,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [96, 27], [96, 50]]], 0, 0, 0, 0], 0], [], ["loc", [null, [96, 23], [96, 53]]], 0, 0]], [], 0, null, ["loc", [null, [96, 17], [103, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 107,
              "column": 16
            },
            "end": {
              "line": 110,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "workflow-rtxt");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "style", "cursor: pointer;");
          var el3 = dom.createTextNode("[");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("]");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [2]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 0, 0);
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["content", "item.hostname", ["loc", [null, [109, 49], [109, 66]]], 0, 0, 0, 0], ["element", "action", ["getConfig", ["get", "item.host", ["loc", [null, [109, 97], [109, 106]]], 0, 0, 0, 0]], [], ["loc", [null, [109, 75], [109, 109]]], 0, 0], ["content", "item.host", ["loc", [null, [109, 136], [109, 149]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 116,
              "column": 24
            },
            "end": {
              "line": 118,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "item", ["loc", [null, [117, 32], [117, 40]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 124,
                "column": 28
              },
              "end": {
                "line": 126,
                "column": 28
              }
            },
            "moduleName": "netconfig/templates/testflow/workflow.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "col", ["loc", [null, [125, 36], [125, 43]]], 0, 0, 0, 0]],
          locals: ["col"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 122,
              "column": 20
            },
            "end": {
              "line": 128,
              "column": 20
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "item", ["loc", [null, [124, 36], [124, 40]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [124, 28], [126, 37]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 160,
              "column": 0
            },
            "end": {
              "line": 162,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/testflow/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "loading-page-scroll", ["loc", [null, [161, 4], [161, 27]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 180,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/testflow/workflow.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "workflow-hdr");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("WorkFlow");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Date");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Status");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "class", "table");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "width", "100%");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Request Id");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Requester Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Command Category");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Entity Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Config Comment");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Approver");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Created");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "width", "260");
        var el6 = dom.createTextNode("Status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "workflow-comments dnone");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Approver Comments");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "approver-comments");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "workflow-rd dnone");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "workflowd-hdr");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "workflow-title");
        var el5 = dom.createTextNode("WorkFlow Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "workflow-act-cont");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "workflow-content");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Router");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "workflow-router");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Actual Command");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "workflow-tbl");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "hidden");
        dom.setAttribute(el6, "name", "request_id");
        dom.setAttribute(el6, "value", "");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "popup1");
        dom.setAttribute(el1, "class", "overlay2");
        var el2 = dom.createTextNode("\n	");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "popup");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "title2");
        var el4 = dom.createTextNode("\n		");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Configuration of ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "conf-refresh");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-refresh");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n		  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "close");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n	");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "content2");
        dom.setAttribute(el3, "pre-line", "");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createTextNode("\n			");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n		");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n	");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [0, 1]);
        var element11 = dom.childAt(fragment, [2]);
        var element12 = dom.childAt(element11, [5]);
        var element13 = dom.childAt(element12, [3]);
        var element14 = dom.childAt(element13, [9]);
        var element15 = dom.childAt(element11, [7, 1]);
        var element16 = dom.childAt(element15, [1, 1]);
        var element17 = dom.childAt(fragment, [6, 1]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(element18, [3, 1]);
        var element20 = dom.childAt(element18, [5]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(dom.childAt(element10, [4]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element10, [6]), 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element11, [1, 3]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element11, [3, 3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element12, [1, 3]), 1, 1);
        morphs[5] = dom.createMorphAt(element13, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element13, [5]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element14, [1, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element14, [3]), 1, 1);
        morphs[9] = dom.createElementMorph(element16);
        morphs[10] = dom.createMorphAt(dom.childAt(element15, [3, 7]), 1, 1);
        morphs[11] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[12] = dom.createMorphAt(dom.childAt(element18, [1]), 1, 1);
        morphs[13] = dom.createElementMorph(element19);
        morphs[14] = dom.createElementMorph(element20);
        morphs[15] = dom.createMorphAt(dom.childAt(element17, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["name", "date", "action", "updateFilter", "placeholder", "Select Date"], 0, null, ["loc", [null, [7, 12], [12, 29]]]], ["block", "ember-chosen", [], ["name", "status", "action", "updateFilter", "placeholder", "Select Date"], 1, null, ["loc", [null, [16, 12], [21, 29]]]], ["block", "each", [["get", "content", ["loc", [null, [41, 20], [41, 27]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [41, 12], [65, 21]]]], ["content", "approver_comment", ["loc", [null, [70, 39], [70, 59]]], 0, 0, 0, 0], ["block", "if", [["get", "isAdmin", ["loc", [null, [76, 22], [76, 29]]], 0, 0, 0, 0]], [], 3, 4, ["loc", [null, [76, 16], [91, 23]]]], ["block", "if", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [95, 22], [95, 47]]], 0, 0, 0, 0], 0], [], ["loc", [null, [95, 18], [95, 50]]], 0, 0]], [], 5, null, ["loc", [null, [95, 12], [104, 19]]]], ["block", "each", [["get", "parseData", ["loc", [null, [107, 24], [107, 33]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [107, 16], [110, 25]]]], ["block", "each", [["get", "routerData.acttbl.hdr", ["loc", [null, [116, 32], [116, 53]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [116, 24], [118, 33]]]], ["block", "each", [["get", "routerData.acttbl.body", ["loc", [null, [122, 28], [122, 50]]], 0, 0, 0, 0]], [], 8, null, ["loc", [null, [122, 20], [128, 29]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [136, 32], [136, 56]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [154, 94], [154, 103]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [154, 16], [154, 105]]], 0, 0], ["block", "infinite-scroll", [], ["content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [160, 27], [160, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "hasMore", ["subexpr", "@mut", [["get", "hasMore", ["loc", [null, [160, 43], [160, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollable", ".innerContainer"], 9, null, ["loc", [null, [160, 0], [162, 20]]]], ["content", "hostip", ["loc", [null, [168, 23], [168, 33]]], 0, 0, 0, 0], ["element", "action", ["refresh", ["get", "hostip", ["loc", [null, [170, 32], [170, 38]]], 0, 0, 0, 0]], [], ["loc", [null, [170, 13], [170, 40]]], 0, 0], ["element", "action", ["closePopup"], [], ["loc", [null, [172, 21], [172, 44]]], 0, 0], ["content", "configdetail", ["loc", [null, [176, 3], [176, 19]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
    };
  })());
});
define("netconfig/templates/workflow", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 12
            },
            "end": {
              "line": 12,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "today");
          var el2 = dom.createTextNode("Today");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "week");
          var el2 = dom.createTextNode("Last 7 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "month");
          var el2 = dom.createTextNode("Last 30 Days");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "year");
          var el2 = dom.createTextNode("Year");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 12
            },
            "end": {
              "line": 21,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "all");
          var el2 = dom.createTextNode("All");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "0");
          var el2 = dom.createTextNode("Pending");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "1");
          var el2 = dom.createTextNode("Approved");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "2");
          var el2 = dom.createTextNode("Denied");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 24
              },
              "end": {
                "line": 55,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "workflow-status pending");
            var el2 = dom.createTextNode("Pending");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 24
                },
                "end": {
                  "line": 57,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-status approved");
              var el2 = dom.createTextNode("Approved");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 57,
                    "column": 24
                  },
                  "end": {
                    "line": 59,
                    "column": 24
                  }
                },
                "moduleName": "netconfig/templates/workflow.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "workflow-status denied");
                var el2 = dom.createTextNode("Denied");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 57,
                  "column": 24
                },
                "end": {
                  "line": 59,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "item.approve_status", ["loc", [null, [57, 38], [57, 57]]], 0, 0, 0, 0], 2], [], ["loc", [null, [57, 34], [57, 60]]], 0, 0]], [], 0, null, ["loc", [null, [57, 24], [59, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 24
              },
              "end": {
                "line": 59,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "item.approve_status", ["loc", [null, [55, 38], [55, 57]]], 0, 0, 0, 0], 1], [], ["loc", [null, [55, 34], [55, 60]]], 0, 0]], [], 0, 1, ["loc", [null, [55, 24], [59, 24]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 12
            },
            "end": {
              "line": 65,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "nowrap", "");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                           ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "wf-routerdetail");
          dom.setAttribute(el3, "title", "View Router Detail");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "ncicon-wifi-router");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Details");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                          \n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-comment wf-comment");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [17]);
          var element8 = dom.childAt(element7, [3]);
          var element9 = dom.childAt(element7, [5]);
          var morphs = new Array(11);
          morphs[0] = dom.createAttrMorph(element6, 'ids');
          morphs[1] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element6, [6]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element6, [9]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element6, [11]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element6, [13]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element6, [15]), 0, 0);
          morphs[8] = dom.createMorphAt(element7, 1, 1);
          morphs[9] = dom.createElementMorph(element8);
          morphs[10] = dom.createElementMorph(element9);
          return morphs;
        },
        statements: [["attribute", "ids", ["concat", [["get", "item.request_id", ["loc", [null, [42, 27], [42, 42]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.request_id", ["loc", [null, [43, 24], [43, 43]]], 0, 0, 0, 0], ["content", "item.requester_username", ["loc", [null, [44, 31], [44, 58]]], 0, 0, 0, 0], ["inline", "commitlogmap", [["get", "item.command_category", ["loc", [null, [46, 39], [46, 60]]], 0, 0, 0, 0]], [], ["loc", [null, [46, 24], [46, 63]]], 0, 0], ["content", "item.entity_name", ["loc", [null, [48, 24], [48, 44]]], 0, 0, 0, 0], ["content", "item.config_comment", ["loc", [null, [49, 24], [49, 47]]], 0, 0, 0, 0], ["content", "item.approver", ["loc", [null, [50, 31], [50, 48]]], 0, 0, 0, 0], ["inline", "formate-date", [["get", "item.created", ["loc", [null, [51, 46], [51, 58]]], 0, 0, 0, 0], "YYYY-MM-DD HH:mm:ss"], [], ["loc", [null, [51, 31], [51, 82]]], 0, 0], ["block", "if", [["subexpr", "eq", [["get", "item.approve_status", ["loc", [null, [53, 34], [53, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [53, 30], [53, 56]]], 0, 0]], [], 0, 1, ["loc", [null, [53, 24], [59, 31]]]], ["element", "action", ["viewRouterDetail", ["get", "item", ["loc", [null, [60, 95], [60, 99]]], 0, 0, 0, 0]], [], ["loc", [null, [60, 67], [60, 101]]], 0, 0], ["element", "action", ["showComments", ["get", "item", ["loc", [null, [62, 84], [62, 88]]], 0, 0, 0, 0]], [], ["loc", [null, [62, 60], [62, 90]]], 0, 0]],
        locals: ["item"],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 78,
                  "column": 24
                },
                "end": {
                  "line": 80,
                  "column": 24
                }
              },
              "moduleName": "netconfig/templates/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-act execute");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "ncicon-play");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Execute");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element5);
              return morphs;
            },
            statements: [["element", "action", ["executeWorkflow"], [], ["loc", [null, [79, 59], [79, 87]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 20
              },
              "end": {
                "line": 81,
                "column": 20
              }
            },
            "moduleName": "netconfig/templates/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [78, 38], [78, 63]]], 0, 0, 0, 0], 2], [], ["loc", [null, [78, 34], [78, 66]]], 0, 0]], [], 0, null, ["loc", [null, [78, 24], [80, 35]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 16
            },
            "end": {
              "line": 82,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [77, 30], [77, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [77, 26], [77, 56]]], 0, 0]], [], 0, null, ["loc", [null, [77, 20], [81, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 83,
                  "column": 20
                },
                "end": {
                  "line": 86,
                  "column": 20
                }
              },
              "moduleName": "netconfig/templates/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-act approve");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "ncicon-check_circle");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Approve");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "workflow-act deny");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "ncicon-cancel");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Deny");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var element4 = dom.childAt(fragment, [3]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element3);
              morphs[1] = dom.createElementMorph(element4);
              return morphs;
            },
            statements: [["element", "action", ["updateWorkStat", "1"], [], ["loc", [null, [84, 55], [84, 86]]], 0, 0], ["element", "action", ["updateWorkStat", "2"], [], ["loc", [null, [85, 52], [85, 83]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 16
              },
              "end": {
                "line": 87,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [83, 30], [83, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [83, 26], [83, 56]]], 0, 0]], [], 0, null, ["loc", [null, [83, 20], [86, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.9.1",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 88,
                    "column": 20
                  },
                  "end": {
                    "line": 90,
                    "column": 20
                  }
                },
                "moduleName": "netconfig/templates/workflow.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "workflow-act execute");
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "ncicon-play");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" Execute");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(1);
                morphs[0] = dom.createElementMorph(element2);
                return morphs;
              },
              statements: [["element", "action", ["executeWorkflow"], [], ["loc", [null, [89, 59], [89, 87]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 87,
                  "column": 16
                },
                "end": {
                  "line": 91,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [88, 30], [88, 53]]], 0, 0, 0, 0], 0], [], ["loc", [null, [88, 26], [88, 56]]], 0, 0]], [], 0, null, ["loc", [null, [88, 20], [90, 27]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 87,
                "column": 16
              },
              "end": {
                "line": 91,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [87, 30], [87, 55]]], 0, 0, 0, 0], 1], [], ["loc", [null, [87, 26], [87, 58]]], 0, 0]], [], 0, null, ["loc", [null, [87, 16], [91, 16]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 16
            },
            "end": {
              "line": 91,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [82, 30], [82, 55]]], 0, 0, 0, 0], 0], [], ["loc", [null, [82, 26], [82, 58]]], 0, 0]], [], 0, 1, ["loc", [null, [82, 16], [91, 16]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.9.1",
              "loc": {
                "source": null,
                "start": {
                  "line": 97,
                  "column": 20
                },
                "end": {
                  "line": 102,
                  "column": 16
                }
              },
              "moduleName": "netconfig/templates/workflow.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-row");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createTextNode("Approver Comment");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "mandatory");
              var el4 = dom.createTextNode("*");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("textarea");
              dom.setAttribute(el2, "name", "approver_comment");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 96,
                "column": 17
              },
              "end": {
                "line": 103,
                "column": 16
              }
            },
            "moduleName": "netconfig/templates/workflow.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "isAdmin", ["loc", [null, [97, 30], [97, 37]]], 0, 0, 0, 0], false], [], ["loc", [null, [97, 26], [97, 44]]], 0, 0]], [], 0, null, ["loc", [null, [97, 20], [102, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 95,
              "column": 12
            },
            "end": {
              "line": 104,
              "column": 12
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "routerData.exec_stautus", ["loc", [null, [96, 27], [96, 50]]], 0, 0, 0, 0], 0], [], ["loc", [null, [96, 23], [96, 53]]], 0, 0]], [], 0, null, ["loc", [null, [96, 17], [103, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 107,
              "column": 16
            },
            "end": {
              "line": 110,
              "column": 16
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "workflow-rtxt");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "style", "cursor: pointer;");
          var el3 = dom.createTextNode("[");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("]");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [2]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 0, 0);
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["content", "item.hostname", ["loc", [null, [109, 49], [109, 66]]], 0, 0, 0, 0], ["element", "action", ["getConfig", ["get", "item.host", ["loc", [null, [109, 97], [109, 106]]], 0, 0, 0, 0]], [], ["loc", [null, [109, 75], [109, 109]]], 0, 0], ["content", "item.host", ["loc", [null, [109, 136], [109, 149]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 116,
              "column": 24
            },
            "end": {
              "line": 118,
              "column": 24
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "item", ["loc", [null, [117, 32], [117, 40]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 124,
                "column": 28
              },
              "end": {
                "line": 126,
                "column": 28
              }
            },
            "moduleName": "netconfig/templates/workflow.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "col", ["loc", [null, [125, 36], [125, 43]]], 0, 0, 0, 0]],
          locals: ["col"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 122,
              "column": 20
            },
            "end": {
              "line": 128,
              "column": 20
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "item", ["loc", [null, [124, 36], [124, 40]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [124, 28], [126, 37]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 160,
              "column": 0
            },
            "end": {
              "line": 162,
              "column": 0
            }
          },
          "moduleName": "netconfig/templates/workflow.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "loading-page-scroll", ["loc", [null, [161, 4], [161, 27]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 180,
            "column": 6
          }
        },
        "moduleName": "netconfig/templates/workflow.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "workflow-hdr");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("WorkFlow");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Date");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Status");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "class", "table");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "width", "100%");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Request Id");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Requester Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Command Category");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Entity Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Config Comment");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Approver");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Created");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5, "width", "260");
        var el6 = dom.createTextNode("Status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "workflow-comments dnone");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Approver Comments");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "approver-comments");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "workflow-rd dnone");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "workflowd-hdr");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "workflow-title");
        var el5 = dom.createTextNode("WorkFlow Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "workflow-act-cont");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "workflow-content");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Router");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "workflow-router");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("Actual Command");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "workflow-tbl");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("thead");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tbody");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "logindiv");
        dom.setAttribute(el2, "class", "modal");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-popup");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "title");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "val");
        var el6 = dom.createTextNode("Router Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "name", "loginform");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "name", "username");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "password");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formRow");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Enable Password");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "mandatory");
        var el8 = dom.createTextNode("*");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "name", "enpwd");
        dom.setAttribute(el6, "class", "required");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "hidden");
        dom.setAttribute(el6, "name", "request_id");
        dom.setAttribute(el6, "value", "");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "formAct");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "popup1");
        dom.setAttribute(el1, "class", "overlay2");
        var el2 = dom.createTextNode("\n	");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "popup");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "title2");
        var el4 = dom.createTextNode("\n		");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Configuration of ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "conf-refresh");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-refresh");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n		  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "close");
        var el5 = dom.createTextNode("×");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n	");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "content2");
        dom.setAttribute(el3, "pre-line", "");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createTextNode("\n			");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n		");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n	");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [0, 1]);
        var element11 = dom.childAt(fragment, [2]);
        var element12 = dom.childAt(element11, [5]);
        var element13 = dom.childAt(element12, [3]);
        var element14 = dom.childAt(element13, [9]);
        var element15 = dom.childAt(element11, [7, 1]);
        var element16 = dom.childAt(element15, [1, 1]);
        var element17 = dom.childAt(fragment, [6, 1]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(element18, [3, 1]);
        var element20 = dom.childAt(element18, [5]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(dom.childAt(element10, [4]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element10, [6]), 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element11, [1, 3]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element11, [3, 3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element12, [1, 3]), 1, 1);
        morphs[5] = dom.createMorphAt(element13, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element13, [5]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element14, [1, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element14, [3]), 1, 1);
        morphs[9] = dom.createElementMorph(element16);
        morphs[10] = dom.createMorphAt(dom.childAt(element15, [3, 7]), 1, 1);
        morphs[11] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[12] = dom.createMorphAt(dom.childAt(element18, [1]), 1, 1);
        morphs[13] = dom.createElementMorph(element19);
        morphs[14] = dom.createElementMorph(element20);
        morphs[15] = dom.createMorphAt(dom.childAt(element17, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "ember-chosen", [], ["name", "date", "action", "updateFilter", "placeholder", "Select Date"], 0, null, ["loc", [null, [7, 12], [12, 29]]]], ["block", "ember-chosen", [], ["name", "status", "action", "updateFilter", "placeholder", "Select Date"], 1, null, ["loc", [null, [16, 12], [21, 29]]]], ["block", "each", [["get", "content", ["loc", [null, [41, 20], [41, 27]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [41, 12], [65, 21]]]], ["content", "approver_comment", ["loc", [null, [70, 39], [70, 59]]], 0, 0, 0, 0], ["block", "if", [["get", "isAdmin", ["loc", [null, [76, 22], [76, 29]]], 0, 0, 0, 0]], [], 3, 4, ["loc", [null, [76, 16], [91, 23]]]], ["block", "if", [["subexpr", "eq", [["get", "routerData.approve_status", ["loc", [null, [95, 22], [95, 47]]], 0, 0, 0, 0], 0], [], ["loc", [null, [95, 18], [95, 50]]], 0, 0]], [], 5, null, ["loc", [null, [95, 12], [104, 19]]]], ["block", "each", [["get", "parseData", ["loc", [null, [107, 24], [107, 33]]], 0, 0, 0, 0]], [], 6, null, ["loc", [null, [107, 16], [110, 25]]]], ["block", "each", [["get", "routerData.acttbl.hdr", ["loc", [null, [116, 32], [116, 53]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [116, 24], [118, 33]]]], ["block", "each", [["get", "routerData.acttbl.body", ["loc", [null, [122, 28], [122, 50]]], 0, 0, 0, 0]], [], 8, null, ["loc", [null, [122, 20], [128, 29]]]], ["element", "action", ["close_popup"], [], ["loc", [null, [136, 32], [136, 56]]], 0, 0], ["inline", "bs-primary", [], ["action", "login", "label", "Login", "loadingTxt", "Logging In..", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [154, 94], [154, 103]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [154, 16], [154, 105]]], 0, 0], ["block", "infinite-scroll", [], ["content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [160, 27], [160, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "hasMore", ["subexpr", "@mut", [["get", "hasMore", ["loc", [null, [160, 43], [160, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollable", ".innerContainer"], 9, null, ["loc", [null, [160, 0], [162, 20]]]], ["content", "hostip", ["loc", [null, [168, 23], [168, 33]]], 0, 0, 0, 0], ["element", "action", ["refresh", ["get", "hostip", ["loc", [null, [170, 32], [170, 38]]], 0, 0, 0, 0]], [], ["loc", [null, [170, 13], [170, 40]]], 0, 0], ["element", "action", ["closePopup"], [], ["loc", [null, [172, 21], [172, 44]]], 0, 0], ["content", "configdetail", ["loc", [null, [176, 3], [176, 19]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
    };
  })());
});
define("netconfig/templates/zohoservices", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 6
              }
            },
            "moduleName": "netconfig/templates/zohoservices.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("							");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "tdata.owner", ["loc", [null, [26, 7], [26, 22]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 21
              }
            },
            "moduleName": "netconfig/templates/zohoservices.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("	                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "tblloading");
            var el2 = dom.createTextNode("\n	                           ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n	                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "partial", ["common/loading"], [], ["loc", [null, [29, 28], [29, 56]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 24
              },
              "end": {
                "line": 36,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/zohoservices.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "tdata.ip", ["loc", [null, [35, 28], [35, 40]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.9.1",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 24
              },
              "end": {
                "line": 40,
                "column": 24
              }
            },
            "moduleName": "netconfig/templates/zohoservices.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "tblloading");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "partial", ["common/loading"], [], ["loc", [null, [38, 32], [38, 60]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.9.1",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 11
            },
            "end": {
              "line": 43,
              "column": 3
            }
          },
          "moduleName": "netconfig/templates/zohoservices.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("				");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n					");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n					");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "txtUpper");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n				");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
          return morphs;
        },
        statements: [["content", "tdata.attributes.url", ["loc", [null, [23, 9], [23, 33]]], 0, 0, 0, 0], ["block", "if", [["get", "tdata.owner", ["loc", [null, [25, 12], [25, 23]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [25, 6], [31, 28]]]], ["block", "if", [["get", "tdata.ip", ["loc", [null, [34, 30], [34, 38]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [34, 24], [40, 31]]]]],
        locals: ["tdata"],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.9.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 0
          }
        },
        "moduleName": "netconfig/templates/zohoservices.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "shdr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "nicon-navbar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Zoho Services");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "services-refresh");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "fa fa-refresh");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "innerContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "class", "table");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "border", "0");
        dom.setAttribute(el2, "width", "100%");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Service Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("RouteOwner");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Service IP");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1, 1, 0]);
        var element3 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element2);
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggleNav"], [], ["loc", [null, [3, 39], [3, 61]]], 0, 0], ["element", "action", ["rePoll"], [], ["loc", [null, [7, 11], [7, 30]]], 0, 0], ["block", "each", [["get", "model.data", ["loc", [null, [21, 19], [21, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [21, 11], [43, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('netconfig/utils/ajax', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  exports['default'] = ajax;

  _jquery['default'].xhrPool = [];
  _jquery['default'].xhrPool.abortAll = function () {
    (0, _jquery['default'])(this).each(function (i, jqXHR) {
      //  cycle through list of recorded connection
      jqXHR.abort(); //  aborts connection
      _jquery['default'].xhrPool.splice(i, 1); //  removes from list by index
    });
  };

  _jquery['default'].ajaxSetup({
    beforeSend: function beforeSend(jqXHR) {
      _jquery['default'].xhrPool.push(jqXHR);
    }, //  annd connection to list
    complete: function complete(jqXHR) {
      var i = _jquery['default'].xhrPool.indexOf(jqXHR); //  get index for current connection completed
      if (i > -1) _jquery['default'].xhrPool.splice(i, 1); //  removes from list by index
    }
  });

  function ajax(url) {
    var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    params.data = params.data || {};

    var token = localStorage.getItem('authtoken');
    if (token !== null && token !== "") {
      params.headers = params.headers || {};
      _ember['default'].merge(params.headers, {
        'Authorization': 'token ' + token
      });
      // if(params.type === "post"){
      //   params.url = params.url+'?access_token='+apiKey
      // }else{
      //   params.data.access_token = apiKey;
      // }
    }

    // params.data.organization_id =  window.APP_META.organization.organization_id;
    url = window.APP_META.resturl + window.APP_META.api_prefix + url;

    // TODO hack for DELETE requests
    if (params.type) {
      if (/^(?:DELETE)$/.test(params.type.toUpperCase())) {
        url += (/\?/.test(url) ? "&" : "?") + _jquery['default'].param(params.data);
        delete params.data;
      }
    }

    return new _ember['default'].RSVP.Promise(function (resolve, reject) {

      _jquery['default'].ajax(url, params).then(function (data) {
        _ember['default'].run(null, resolve, data);
      }, function (jqXHR, textStatus) {

        var resObj = {};
        var errorMsg = undefined;

        try {
          resObj = _jquery['default'].parseJSON(jqXHR.responseText);
          errorMsg = resObj.message;
          if (jqXHR.status === 401) {
            // Since `utils/ajax` is resolved before running Application initializer
            // we cannot cache `window.EMApplicationController` at module level
            // window.appCtrl.transitionToRoute('login');
            localStorage.removeItem('authtoken');
            APP_META.isLogin = false;
            window.location.hash = 'login';
            // window.EMApplicationController.send('showModal', 'signin', {  //No I18N
            //   modalSize: 'small'  //No I18N
            // });
            errorMsg = '';
          }
        } catch (err) {

          if (jqXHR.status === 401) {
            localStorage.removeItem('authtoken');
            APP_META.isLogin = false;
            errorMsg = 'Unauthorized Access'; //No I18N

            // window.appCtrl.transitionToRoute('login');
            window.location.hash = 'login';
          } else if (jqXHR.status === 0) {
            errorMsg = 'Not connect.\n Verify Network.'; //No I18N
          } else if (jqXHR.status == 404) {
              errorMsg = 'Requested page not found. [404]'; //No I18N
            } else if (jqXHR.status == 500) {
                errorMsg = 'Internal Server Error [500].'; //No I18N
              } else if (jqXHR.status === 400) {
                  errorMsg = 'Bad request.'; //No I18N
                } else if (jqXHR === 'parsererror') {
                    //No I18N
                    errorMsg = 'Requested JSON parse failed.'; //No I18N
                  } else if (jqXHR === 'timeout') {
                      //No I18N
                      errorMsg = 'Time out error.'; //No I18N
                    } else if (jqXHR === 'abort') {
                        //No I18N
                        errorMsg = 'Ajax request aborted.'; //No I18N
                      }
        }
        resObj.message = errorMsg;
        _ember['default'].run(null, reject, resObj);
      });
    });
  }
});
/*$Id$*/
define('netconfig/utils/notify', ['exports', 'jquery'], function (exports, _jquery) {

	var customNotify = function customNotify(nType, nMsg, timeout) {

		var ids = Math.floor(Math.random() * 1000);
		(0, _jquery['default'])('.notifyDiv').remove();
		var nClass = '',
		    nIcon = '',
		    nTitle = '';
		if (nType === 'error') {
			nClass = 'nerrorDiv'; //No I18N
			nIcon = 'fa-times-circle'; //No I18N
			nTitle = 'Error'; //No I18N
		} else if (nType === 'success') {
				nClass = 'nsuccessDiv'; //No I18N
				nIcon = 'fa-check-circle'; //No I18N
				nTitle = 'Success'; //No I18N
			} else if (nType === 'info') {
					//No I18N
					nClass = 'ninfoDiv'; //No I18N
					nIcon = 'fa-exclamation-circle'; //No I18N
					nTitle = 'Info'; //No I18N
				}

		(0, _jquery['default'])('body').append('<div ids="' + ids + '" class="notifyDiv ' + nClass + '"><div class="nMsgDiv"><span class="nMsgTitle"><i class="fa ' + nIcon + '"></i> ' + nTitle + '</span><span class="nMsgTxt">' + nMsg + '</span></div> <span class="notifyCls">×</span></div>');
		(0, _jquery['default'])('.notifyDiv').addClass('active');

		window.key('esc', function () {
			(0, _jquery['default'])('.notifyDiv').fadeOut('fast', function () {
				(0, _jquery['default'])(this).remove();
			});
		});

		var defaultTimeout = timeout !== undefined ? timeout : nType === 'error' || nType === 'info' ? 5500 : 3500;
		setTimeout(function () {
			(0, _jquery['default'])('.notifyDiv[ids="' + ids + '"]').fadeOut('fast', function () {
				(0, _jquery['default'])(this).remove();
			});
		}, defaultTimeout); //No I18N

		(0, _jquery['default'])('.notifyCls').click(function () {
			(0, _jquery['default'])(this).closest('.notifyDiv').fadeOut('fast', function () {
				(0, _jquery['default'])(this).remove();
			}); //No I18N
		});
	};

	exports.customNotify = customNotify;
});
define("netconfig/utils/telemetryUrl", ["exports"], function (exports) {
    //Panel ID dictionary
    var paramsTable = {
        "#ndpFrame": "12",
        "#routedFrame": "10",
        "#arpFrame": "8",
        "#lldpFrame": "6",
        "#portFrame": "4",
        "#interfaceFrame": "2",
        "#trafficFrame": "14"
    };
    var paramGraph = {
        "#conmonFrame": "10",
        "#cpuFrame": "8",
        "#curFrame": "16",
        "#fanFrame": "12",
        "#memFrame": "4",
        "#packetlossFrame": "14",
        "#sysFrame": "2",
        "#tempFrame": "6",
        "#tempSecondFrame": "17",
        "#tempThirdFrame": "18",
        "#tempFourthFrame": "19"

    };

    //Dashborad IDs of graphs
    var statGraph = "z9UyllLVk";
    var timeGraph = "5TbOZdUVz";

    //Dashborad Names
    var type_stat = "graphs-big-number";
    var type_time = "graphs-time";

    var tableID = "3Y9GrVyVz";

    //Initital URLs For Telemetry Default 5s Refreshes 
    var INIurlTable = "https://ab1-netops-gfna.zohonoc.com/d-solo/3Y9GrVyVz/interface-tables-final?orgId=1&var-Allow=%@&refresh=5s&theme=light&panelId=";
    var INIurlGraph = "https://ab1-netops-gfna.zohonoc.com/d-solo/z9UyllLVk/graphs-big-number?orgId=1&var-Allow=%@&theme=light&refresh=5s&panelId=";

    //URLs for separate widgets
    var teleUrlGraph = "https://ab1-netops-gfna.zohonoc.com/d-solo/%@/%@?orgId=1&var-Allow=%@&from=%@&to=%@&theme=light&panelId=";
    var teleUrlTable = "https://ab1-netops-gfna.zohonoc.com/d-solo/3Y9GrVyVz/interface-tables-final?orgId=1&var-Allow=%@&theme=light&panelId=";

    exports.teleUrlGraph = teleUrlGraph;
    exports.statGraph = statGraph;
    exports.timeGraph = timeGraph;
    exports.paramGraph = paramGraph;
    exports.paramsTable = paramsTable;
    exports.teleUrlTable = teleUrlTable;
    exports.type_stat = type_stat;
    exports.type_time = type_time;
    exports.tableID = tableID;
    exports.INIurlTable = INIurlTable;
    exports.INIurlGraph = INIurlGraph;
});
define('netconfig/utils/update', ['exports', 'ember-object-update/utils/update'], function (exports, _emberObjectUpdateUtilsUpdate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberObjectUpdateUtilsUpdate['default'];
    }
  });
});
define('netconfig/utils/validation', ['exports', 'netconfig/utils/notify', 'jquery', 'ember'], function (exports, _netconfigUtilsNotify, _jquery, _ember) {

  var isEmpty = function isEmpty(obj) {
    return _ember['default'].isEmpty(obj) || typeof obj === 'string' && obj.trim() === "";
  };

  var frmRegex = {
    number: /^[0-9]{0,5}$/,
    mnumber: /^(([1-9]{1,4}[ \-]*)|(\([0-9]{2,3}\)[ \-]*)|([0-9]{2,4})[ \-]*)*?[0-9]{3,4}?[ \-]*[0-9]{3,4}?$/,
    label: /^[A-Za-z0-9-_.\+ ]{0,100}$/,
    apikey: /^[a-f0-9\s]{0,32}$/,
    ipaddress: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/,
    hostname: /^[A-Za-z0-9._-]{0,100}$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/,
    email: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    displayname: /^[A-Za-z0-9-_.\+ ]{0,100}$/,
    intiger: /^[0-9]{0,100}$/
  };
  var rangeRegex = {
    ipv4: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
    ipv6: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
  };

  var formdatatoObj = function formdatatoObj(str) {
    str = str.split('&');
    var obj = {};
    (0, _jquery['default'])(str).each(function (i, e) {
      e = e.split('=');
      obj[e[0]] = e[1];
    });
    return obj;
  };

  var customConfirm = function customConfirm(options, ycb, ncb) {

    if (typeof options !== "object") {
      options = { msg: options };
    }

    var defaults = {
      msg: '',
      type: 'warning', //No I18N
      etype: { 'warning': 'zmdi-alert-triangle', 'error': 'cus_msg_error zmdi-alert-triangle' }, //No I18N
      ok_btn_txt: "Yes", //No I18N
      cancel_btn_txt: "No" //No I18N
    },
        settings = _jquery['default'].extend(true, {}, defaults, options),
        _createEle = function _createEle() {
      var ele = '<div class="cusCnfrmOverlay animated fadeIn"><div class="cusCnfrmDiv"><div class="cusCnfrmMsg"> <div class="cusCnfrmIcon"><span class="zmdi ' + settings.etype[settings.type] + '"></span></div> <div class="cusCnfrmTxt">' + settings.msg + '</div> </div> <div class="cusCnfrmAct"><div class="cusCnfrmBtn cusCnfrmBtn_yes">' + settings.ok_btn_txt + '</div><div class="cusCnfrmBtn cusCnfrmBtn_no">' + settings.cancel_btn_txt + '</div></div></div></div>';
      (0, _jquery['default'])('.cusCnfrmOverlay').remove();
      (0, _jquery['default'])('body').append(ele);

      (0, _jquery['default'])('.cusCnfrmBtn_yes').click(function () {
        (0, _jquery['default'])('.cusCnfrmOverlay').remove();
        if (ycb !== undefined) {
          ycb();
        }
      });

      (0, _jquery['default'])('.cusCnfrmBtn_no').click(function () {
        (0, _jquery['default'])('.cusCnfrmOverlay').remove();
        if (ncb !== undefined) {
          ncb();
        }
      });
    };
    _createEle();
  };
  var customAlert = function customAlert(options, ycb, ncb) {

    if (typeof options !== "object") {
      options = { msg: options };
    }

    var defaults = {
      msg: '',
      type: 'warning', //No I18N
      etype: { 'warning': 'zmdi-alert-triangle', 'error': 'zmdi-alert-triangle', 'info': 'zmdi-info' }, //No I18N
      ok_btn_txt: "OK" //No I18N
    },
        settings = _jquery['default'].extend(true, {}, defaults, options),
        _createEle = function _createEle() {

      var ele = '<div class="cusAlertOverlay animated fadeIn"><div class="cusAlertDiv cus_AMsgDiv_' + settings.type + '"><div class="cusAlertMsg"> <div class="cusAlertIcon"><span class="zmdi ' + settings.etype[settings.type] + '"></span></div> <div class="cusAlertTxt">' + settings.msg + '</div> </div> <div class="cusAlertAct"><div class="cusAlertBtn cusAlertBtn_yes">' + settings.ok_btn_txt + '</div></div></div></div>';
      (0, _jquery['default'])('.cusAlertOverlay').remove();
      (0, _jquery['default'])('body').append(ele);

      (0, _jquery['default'])('.cusAlertBtn_yes').click(function () {
        (0, _jquery['default'])('.cusAlertOverlay').remove();
        if (ycb !== undefined) {
          ycb();
        }
      });

      (0, _jquery['default'])('.cusAlertBtn_no').click(function () {
        (0, _jquery['default'])('.cusAlertOverlay').remove();
        if (ncb !== undefined) {
          ncb();
        }
      });
    };
    _createEle();
  };

  var validateState = function validateState(input) {

    var allowedValues = ["NEW", "ESTABLISHED", "RELATED", "INVALID"];

    var states = input.split(',');

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = states[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var state = _step.value;

        var trimmedState = state.toUpperCase();

        if (!allowedValues.includes(trimmedState)) {
          (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid state');
          return false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return true;
  };

  var validatePortNumbers = function validatePortNumbers(input) {

    //var portRegex = /^\d{1,5}$/;

    var portRegex = /^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/;

    var numbers = input.split(',');

    if (numbers.length > 15) {
      (0, _netconfigUtilsNotify.customNotify)('error', 'Maximum Limit is 15');
      return false;
    }

    if (new Set(numbers).size !== numbers.length) {
      (0, _netconfigUtilsNotify.customNotify)('error', 'Duplicate ports are not allowed');
      return false;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = numbers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var number = _step2.value;

        if (number.includes(":")) {

          var numb2 = number.split(':');

          if (numb2.length > 2) {
            (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid Range format');
            return false;
          }

          if (parseInt(numb2[1], 10) < parseInt(numb2[0], 10)) {
            (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid Range format');
            return false;
          }

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = numb2[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var x = _step3.value;

              if (!portRegex.test(x)) {
                (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid port number');

                return false;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                _iterator3['return']();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        } else {

          if (!portRegex.test(number)) {
            (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid port number');

            return false;
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return true;
  };

  var validateForm = {
    isValid: true,

    validateEle: function validateEle(e) {
      this.isValid = true;
      this.doValidate((0, _jquery['default'])('.vMsgID_' + e)[0]);
      if (this.isValid) {
        (0, _jquery['default'])('.vMsgID_' + e).removeAttr('onblur, onchange');
        (0, _jquery['default'])('.vMsgID_' + e).siblings('.fValidationMsg').remove();
        (0, _jquery['default'])('.vMsgID_' + e).removeClass('vMsgID_' + e);
      }
    },
    validationMsg: function validationMsg(msg, e) {
      var cusVid = new Date().getTime(),
          nodeName = e.nodeName;
      if (nodeName === "SELECT") {
        (0, _jquery['default'])(e).attr('onchange', "(function() { require('netconfig/utils/validation').validateForm.validateEle(" + cusVid + ") })()").addClass('vMsgID_' + cusVid).focus(); //No I18N
      } else {
          if ((0, _jquery['default'])(e).attr('onblur') === undefined) {
            (0, _jquery['default'])(e).attr('onblur', "(function() { require('netconfig/utils/validation').validateForm.validateEle(" + cusVid + ") })()").addClass('vMsgID_' + cusVid).focus(); //No I18N
          }
        }
      (0, _jquery['default'])(e).siblings('.fValidationMsg').remove();
      (0, _jquery['default'])(e).addClass('reqActive').after('<span class="fValidationMsg">' + msg + '</span>');
    },
    doValidate: function doValidate(e) {
      (0, _jquery['default'])(e).removeClass('reqActive');
      var inpType = (0, _jquery['default'])(e).attr('type');

      if (!(0, _jquery['default'])(e).closest('.formRow').is(':visible')) {
        return true;
      }

      if (inpType === 'checkbox') {
        if (!(0, _jquery['default'])(e).is(':checked')) {
          this.isValid = false;
          (0, _netconfigUtilsNotify.customNotify)('error', (0, _jquery['default'])(e).attr('reqmsg') === undefined ? 'This field is required' : (0, _jquery['default'])(e).attr('reqmsg')); //No I18N
          return false;
        }
      } else {
        var cVal = _jquery['default'].trim((0, _jquery['default'])(e).val()),
            nodeName = e.nodeName;
        if (nodeName === 'SELECT') {
          if ((0, _jquery['default'])(e).attr('multiple')) {
            if ((0, _jquery['default'])(e).find('option:selected').length === 0) {
              cVal = "";
            } else {
              cVal = (0, _jquery['default'])(e).find('option:selected').length;
            }
          } else {
            if ((0, _jquery['default'])(e).find('option:selected').length && (0, _jquery['default'])(e).val() !== "") {
              cVal = (0, _jquery['default'])(e).val();
            } else {
              cVal = "";
              if ((0, _jquery['default'])(e).hasClass('chosen-select')) {
                (0, _jquery['default'])(e).trigger('chosen:activate');
              }
            }
          }
        }
        if (cVal === "" || cVal === null) {
          //this.validationMsg(, e); 	//No I18N
          var lblval = (0, _jquery['default'])(e).siblings('label').text(),
              dmsg = e.nodeName === 'SELECT' ? 'Please select ' : 'Please enter ';
          if (lblval === "") {
            lblval = (0, _jquery['default'])(e).attr('name');
          }
          var msg = (0, _jquery['default'])(e).attr('reqmsg') === undefined ? dmsg + lblval : (0, _jquery['default'])(e).attr('reqmsg');
          (0, _netconfigUtilsNotify.customNotify)('error', msg); //No I18N
          if (e.nodeName === "SELECT") {
            (0, _jquery['default'])(e).trigger('chosen:activate');
          } else {
            (0, _jquery['default'])(e).focus();
          }
          this.isValid = false;
          return false;
        } else if ((0, _jquery['default'])(e).attr('isregex') !== undefined) {
          var rtype = (0, _jquery['default'])(e).attr('isregex'),
              lblval = (0, _jquery['default'])(e).siblings('label').text();;

          if (frmRegex[rtype] !== undefined) {

            if (!new RegExp(frmRegex[(0, _jquery['default'])(e).attr('isregex')]).test(cVal)) {
              (0, _jquery['default'])(e).focus();
              var msg = (0, _jquery['default'])(e).attr('reqmsg') === undefined ? 'Invalid value present in ' + lblval : (0, _jquery['default'])(e).attr('reqmsg'); //No I18N
              (0, _netconfigUtilsNotify.customNotify)('error', msg); //No I18N
              this.isValid = false;
              return false;
            }
          } else if ((0, _jquery['default'])(e).attr('range') !== undefined) {
            var inpVal = cVal.split('-'),
                lblval = (0, _jquery['default'])(e).siblings('label').text();
            switch (rtype) {
              case 'ipv4':
                {
                  //No I18N
                  if (inpVal.length > 1) {
                    if (!new RegExp(frmRegex.ipv4).test(cVal)) {
                      (0, _jquery['default'])(e).focus();
                      (0, _netconfigUtilsNotify.customNotify)('error', (0, _jquery['default'])(e).attr('reqmsg') === undefined ? 'Invalid value present in ' + lblval : (0, _jquery['default'])(e).attr('reqmsg')); //No I18N
                      this.isValid = false;
                      return false;
                    }
                  } else {
                    if (!new RegExp(frmRegex.ipv4).test(inpVal[0]) || !new RegExp(frmRegex.ipv4).test(inpVal[1])) {
                      (0, _jquery['default'])(e).focus();
                      (0, _netconfigUtilsNotify.customNotify)('error', (0, _jquery['default'])(e).attr('reqmsg') === undefined ? 'Invalid value present in ' + lblval : (0, _jquery['default'])(e).attr('reqmsg')); //No I18N
                      this.isValid = false;
                      return false;
                    }
                  }
                }
                break;
              // case 'ipv6':{	//No I18N

              // }
              // break;
              // case 'ip':{	//No I18N

              // }
              // break;
            }
          }
        }
        this.isValid = true;
        return true;
      }
    },
    validate: function validate(frm, self, isvisEle) {
      var _this = this;
      (0, _jquery['default'])(frm).find('.required:not(label):not(div)').each(function (i, e) {

        if (isvisEle !== undefined) {
          if (!(0, _jquery['default'])(e).closest(isvisEle).is(':visible')) {
            return true;
          }
        }
        _this.doValidate(e);
        if (!_this.isValid) {
          return false;
        }
      });

      if (!this.isValid) {
        return false;
      } else {
        (0, _jquery['default'])('.notifyDiv').remove();
        return true;
      }
    },
    validateSeq: function validateSeq(e) {
      var val = true;
      var srcop = (0, _jquery['default'])(e).find('select[name=srcoperator]').val();
      var srcport = (0, _jquery['default'])(e).find('input[name=srcport]').val();
      if (srcop != 'None' && srcport == "") {
        (0, _netconfigUtilsNotify.customNotify)("error", "Enter source port to be compared!");
        val = false;
        return false;
      }
      var dstop = (0, _jquery['default'])(e).find('select[name=dstoperator]').val();
      var dstport = (0, _jquery['default'])(e).find('input[name=dstport]').val();
      if (dstop != 'None' && dstport == "") {
        (0, _netconfigUtilsNotify.customNotify)("error", "Enter destination port to be compared!");
        val = false;
        return false;
      }
      (0, _jquery['default'])(e).find('.required:not(label):not(div)').each(function (j, f) {
        console.log("Required elements value is", (0, _jquery['default'])(f).val());
        if ((0, _jquery['default'])(f).val() === "" || (0, _jquery['default'])(f).val() === null) {
          console.log("Field is empty!");
          (0, _netconfigUtilsNotify.customNotify)("error", "Enter all the mandatory fields!");
          val = false;
          return false;
        }
      });
      console.log("Return value is", val);
      return val;
    },

    validateRuleList: function validateRuleList(key, iptype) {

      var ipv6 = /^([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])/;
      var ipsubnet = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/(3[0-2]|[1-2]?[0-9])$/;
      //var portRegex = /^\d{1,5}$/;
      var numberRegex = /^[A-Za-z]+$/;
      var alphanumericRegex = /^[a-zA-Z0-9]+$/;

      var isValid = true;
      var inputlist = (0, _jquery['default'])('div[data-key="' + key + '"]');

      var formobj = inputlist.find('[data-key="rule_list"]');
      var formgrp = formobj.find('.formgroup');

      var default_policy = inputlist.find('.formgroup >.formRow');

      if (default_policy.length > 1) {
        var default_policy = inputlist.find('.formgroup >.formRow')[0];

        var ele2 = (0, _jquery['default'])(default_policy).find('.key-box').parent();
        var temp2 = (0, _jquery['default'])(default_policy).find('.value-box');

        if ((0, _jquery['default'])(default_policy).find('.value-box').val() === '') {
          (0, _jquery['default'])('.innerContainer').animate({
            scrollTo: (0, _jquery['default'])(ele2).offset().top
          }, 2000);
          (0, _jquery['default'])(temp2).focus();
          (0, _netconfigUtilsNotify.customNotify)('error', "default policy is mandatory");
          isValid = false;
        }
      } else {
        var default_policy = inputlist.find('.formgroup >.formRow');
        var ele2 = default_policy.find('.key-box').parent();
        var temp2 = default_policy.find('.value-box');
        if (default_policy.find('.value-box').val() === '') {
          (0, _jquery['default'])('.innerContainer').animate({
            scrollTo: (0, _jquery['default'])(ele2).offset().top
          }, 2000);
          (0, _jquery['default'])(temp2).focus();
          (0, _netconfigUtilsNotify.customNotify)('error', "default policy is mandatory");
          isValid = false;
        }
      }

      if (isValid === false) {
        return false;
      }

      formgrp.each(function (i, e) {

        (0, _jquery['default'])(e).find('.formRow').each(function () {

          var label = (0, _jquery['default'])(this).find('.key-box').text();
          var input = (0, _jquery['default'])(this).find('.value-box').val();
          var temp = (0, _jquery['default'])(this).find('.value-box');

          var ele = (0, _jquery['default'])(this).find('.key-box').parent();

          //console.log("label is",label)
          //console.log("value is",input)

          if (label == 'State') {
            if (input && !validateState(input)) {
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();
              // customNotify('error', 'Invalid State');
              isValid = false;
              return false;
            }
          }

          if (label === "Action") {
            if (input === '') {
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();
              (0, _netconfigUtilsNotify.customNotify)('error', 'Action is mandatory');
              isValid = false;
              return false;
            }
          }

          if (label === "Protocol") {
            if (input && !numberRegex.test(input)) {
              console.log("inside protcol!!!!!!!!!");
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();

              (0, _netconfigUtilsNotify.customNotify)('error', 'protocol is a text field, should not contain numbers');
              isValid = false;
              return false;
            }
          }

          if (label === "Source Host") {

            if (iptype) {

              if (input && !(frmRegex.ipaddress.test(input) || ipsubnet.test(input))) {
                console.log("source host!!!!!!!!!!");
                (0, _jquery['default'])('.innerContainer').animate({
                  scrollTo: (0, _jquery['default'])(ele).offset().top
                }, 2000);
                (0, _jquery['default'])(temp).focus();
                (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid source IP Address');
                isValid = false;
                return false;
              }
            } else {
              if (input && !ipv6.test(input)) {
                console.log("source host!!!!!!!!!!");
                (0, _jquery['default'])('.innerContainer').animate({
                  scrollTo: (0, _jquery['default'])(ele).offset().top
                }, 2000);
                (0, _jquery['default'])(temp).focus();
                (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid source IP Address');
                isValid = false;
                return false;
              }
            }
          }

          if (label === "Destination Host") {

            if (iptype) {
              if (input && !(frmRegex.ipaddress.test(input) || ipsubnet.test(input))) {
                (0, _jquery['default'])('.innerContainer').animate({
                  scrollTo: (0, _jquery['default'])(ele).offset().top
                }, 2000);
                (0, _jquery['default'])(temp).focus();
                (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid desaination IP Address');
                isValid = false;
                return false;
              }
            } else {
              if (input && !ipv6.test(input)) {

                (0, _jquery['default'])('.innerContainer').animate({
                  scrollTo: (0, _jquery['default'])(ele).offset().top
                }, 2000);
                (0, _jquery['default'])(temp).focus();
                (0, _netconfigUtilsNotify.customNotify)('error', 'Invalid desaination IP Address');
                isValid = false;
                return false;
              }
            }
          }

          if (label === "Source Port") {
            if (input && !validatePortNumbers(input)) {
              console.log("source port!!!!!!!!");
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();
              //customNotify('error', 'Invalid source Port Number');
              isValid = false;
              return false;
            }

            var prot = (0, _jquery['default'])(e).find('.formRow label[data-val="protocol"] + input').val();

            if (input && prot === '') {
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(e).find('.formRow label[data-val="protocol"]').parent().offset().top
              }, 2000);
              (0, _jquery['default'])(e).find('.formRow label[data-val="protocol"] + input').focus();
              (0, _netconfigUtilsNotify.customNotify)('error', 'Port Number should always be accompanied with a protocol');
              isValid = false;
              return false;
            }
          }

          if (label === "Destination Port") {
            if (input && !validatePortNumbers(input)) {
              console.log("destination port!!!!!!!!!!");
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();
              //customNotify('error', 'Invalid Destination Port Number');
              isValid = false;
              return false;
            }

            var prot = (0, _jquery['default'])(e).find('.formRow label[data-val="protocol"] + input').val();

            if (input && prot === '') {
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(e).find('.formRow label[data-val="protocol"]').parent().offset().top
              }, 2000);
              (0, _jquery['default'])(e).find('.formRow label[data-val="protocol"] + input').focus();
              (0, _netconfigUtilsNotify.customNotify)('error', 'Port Number should always be accompanied with a protocol');
              isValid = false;
              return false;
            }
          }

          if (label === "Interface") {
            if (input && !alphanumericRegex.test(input)) {
              console.log("inside interface!!!!!!!!!!");
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();
              (0, _netconfigUtilsNotify.customNotify)('error', ' interface should contain letters and numbers');
              isValid = false;
              return false;
            }
          }

          if (label === "Outgoing Interface") {
            if (input && !alphanumericRegex.test(input)) {
              console.log("inside interface!!!!!!!!!!");
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();
              (0, _netconfigUtilsNotify.customNotify)('error', ' interface should contain letters and numbers');
              isValid = false;
              return false;
            }
          }

          if (label === "Incoming Interface") {
            if (input && !alphanumericRegex.test(input)) {
              console.log("inside interface!!!!!!!!!!");
              (0, _jquery['default'])('.innerContainer').animate({
                scrollTo: (0, _jquery['default'])(ele).offset().top
              }, 2000);
              (0, _jquery['default'])(temp).focus();
              (0, _netconfigUtilsNotify.customNotify)('error', ' interface should contain letters and numbers');
              isValid = false;
              return false;
            }
          }
        });
      });
      return isValid;
    }

  };

  exports.frmRegex = frmRegex;
  exports.rangeRegex = rangeRegex;
  exports.customConfirm = customConfirm;
  exports.isEmpty = isEmpty;
  exports.customAlert = customAlert;
  exports.validateForm = validateForm;
  exports.formdatatoObj = formdatatoObj;
});
/*$Id$*/
define('netconfig/views/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].View.extend({
    classNameBindings: "warnClass",
    bindKeyBoardShortCuts: (function () {
      var self = this;
      bindKey('/', function () {
        self.get('controller').send('closeModal');
        // self.$('.app-quick-search-field').focus();
        return false;
      });
      // this.bindAction('n', 'goToCreate');
      // this.bindAction('e', 'goToEdit');
    }).on('didInsertElement'),
    unBindKeyBoardShortCuts: (function () {
      unBindKeys();
    }).on('willDestroyElement'),
    bindAction: function bindAction(shortcut, actionName) {
      var controller = this.get('controller');
      bindKey(shortcut, function () {
        controller.send('closeModal');
        Em.run.later(this, function () {
          controller.send(actionName);
        }, 300);
      });
    }
  });

  /*
  All the shortcuts are stored in the shortcutKeyList array. So that, all the keys will be unbinded while destroying the application
  view by iterating the array.
  */
  var shortcutKeyList = [];

  /*
  Use bindKey to define shortcuts directly
  */
  function bindKey(shortcut, fn) {
    shortcutKeyList.push(shortcut);
    window.key(shortcut, fn);
  }

  /*
  Method that iterates the shortcutKeyList array and unbind all the shortcuts keys
  */
  function unBindKeys() {
    var windKey = window.key;
    shortcutKeyList.forEach(function (shortcutKey) {
      console.log(shortcutKey);
      windKey.unbind(shortcutKey);
    });
    shortcutKeyList = [];
  }
});
define('netconfig/views/common/modal', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].View.extend({
    modalContext: service(),
    store: service(),
    addModalBehaviour: (function () {
      _ember['default'].run.next(this, function () {
        this.$('.modal, .modal-backdrop').addClass('in');
        (0, _jquery['default'])(window.document).on('keydown', { view: this }, this.clsOnEsc);
      });
    }).on('didInsertElement'),
    modalTitle: (function () {
      return this.get('modalContext.modalTitle') === undefined ? '' : this.get('modalContext.modalTitle');
    }).property('modalContext.modalTitle'),
    modalClass: (function () {
      var size = this.get('modalContext.modalSize');

      switch (size) {
        case 'large':
          return 'modal-lg';
        case 'medium':
          return 'modal-md';
        case 'small':
          return 'modal-sm';
        case 'x-small':
          return 'modal-xs';
        case 'x-large':
          return 'modal-xlg';
        default:
          return size;
      }
    }).property('modalContext.modalSize'),
    bkpDrpClass: (function () {
      var cls = this.get('modalContext.bkdrpCSS');
      if (!Em.isEmpty(cls)) {
        return cls;
      }
      return;
    }).property('modalContext.bkdrpCSS'),
    layoutName: 'common/modallayout',
    clsOnEsc: function clsOnEsc(event) {
      var currentView = event.data.view;
      if (event.which === 27 && currentView.get('modalContext.canClsOnEsc')) {
        var closeOnEscFunc = currentView.get('modalContext.closeOnEscFunc') || 'closeModal';
        currentView.get('controller').send(closeOnEscFunc);
      }
    },
    hideModal: (function () {
      if (this.get('modalContext.closeModal') && this.$()) {
        this.$('.modal, .modal-backdrop').removeClass('in');
      }
    }).observes('modalContext.closeModal'),
    unbindAttachedEvent: (function () {
      (0, _jquery['default'])(window.document).off('keydown', this.clsOnEsc);
      this._super();
    }).on('willDestroyElement')
  });
});
define('netconfig/views/common/statusmsg', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].View.extend({
    showclose: false,
    arrMsgs: false,
    messageDidChange: (function () {
      var self = this,
          msg = this.get('message');

      if (msg !== null) {
        this.set('arrMsgs', _ember['default'].isArray(msg.m_txt));
        if (msg.type === "error") {
          this.set('showclose', true);
          this.$('#statusMsg').slideDown('slow');
        } else {
          this.set('showclose', false);
          this.$('#statusMsg').slideDown('slow').delay(2500).fadeOut('slow', function () {
            self.set('arrMsgs', false);
            self.set('message', null);
          });
        }
      }
    }).observes('message'),

    actions: {
      close: function close() {
        var self = this;
        this.$('#statusMsg').fadeOut('slow', function () {
          self.set('arrMsgs', false);
          self.set('message', null);
        });
      }
    },
    templateName: 'statusmsg'
  });
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('netconfig/config/environment', ['ember'], function(Ember) {
  var prefix = 'netconfig';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("netconfig/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true,"name":"netconfig","version":"0.0.0+02b7e1d8"});
}

/* jshint ignore:end */
//# sourceMappingURL=netconfig.map